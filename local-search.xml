<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vim</title>
    <link href="/2023/08/16/vim/"/>
    <url>/2023/08/16/vim/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><p>学习Vim你要做的第一件事情，就是把你的鼠标给扔了（</p><p>Vim是一个功能强大、高度可定制且广泛使用的文本编辑器，它在程序开发和系统管理等领域得到了广泛的应用。然而，由于其学习曲线较陡峭，初学者可能需要一些时间来熟悉和掌握Vim的使用。</p><hr><p><img src="https://s1.ax1x.com/2023/08/16/pPQyUHI.png"></p><hr>]]></content>
    
    
    <categories>
      
      <category>Intro to Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Solana 开发者培训营</title>
    <link href="/2023/08/11/Solana/"/>
    <url>/2023/08/11/Solana/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><p>Solana是一个快速、可扩展且具有环保特性的区块链网络，在生态发展、开发情况、环保特性和安全性等方面取得了显著的进展。它的生态系统不断扩大，吸引了越来越多的开发者和项目加入，并提供丰富的开发工具和文档支持。Solana的POS和POH共识机制使其在环保方面具有优势，而S7协议保证了链的安全性。</p><p>本课程内容主要介绍了 Solana 区块链的基础知识、Rust合约开发、RPC功能和NFT解决方案等相关内容。课程从基础入手，逐步讲解，包括与索拉纳交互、RPC提供的功能和如何构建应用等方面。同时，还介绍了如何在前端与 Solana 合约进行交互，以便更好地使用其生态系统中的资源。最后，通过实际案例展示了如何使用这些知识点解决实际问题。</p><hr><p>📅 课程时间：2023年7月30日 - 2023年10月</p><p>📖 课件内容：<a href="https://www.solanazh.com/">solanazh.com</a></p><p>YouTube频道【<a href="https://www.youtube.com/channel/UC55hLTz7EuR97neBW2trFMA">Solana Bootcamp</a>】</p><hr><h1 id="01-Solana-基础知识"><a href="#01-Solana-基础知识" class="headerlink" title="01. Solana 基础知识"></a><u>01. Solana 基础知识</u></h1><h2 id="1-1-Solana开发流程"><a href="#1-1-Solana开发流程" class="headerlink" title="1.1 Solana开发流程"></a>1.1 Solana开发流程</h2><p>任何人都可以通过 Solana 支付费用来存储和执行代码。部署的代码被称为程序 &#x3D; 智能合约。要与程序交互，您需要从客户端在区块链上发送一笔交易。</p><p>Solana开发者工作流程是程序-客户 (program-client) 模型。这个模型由两个主要的工作流程组成：程序开发和客户端开发。</p><ol><li>程序开发工作流程 (后端)：<ul><li>编程语言：Rust、C 或 C++ 等。这些程序可以包含智能合约、验证器或其他自定义功能。</li><li>一旦您完成了程序的开发，可以将其部署到 Solana 区块链上。</li><li>部署完成后，任何了解如何与这些程序进行通信的人都可以使用它们。</li></ul></li><li>客户端开发工作流程 (前端)：<ul><li>在客户端开发工作流程中，您可以编写与已部署程序进行交互的去中心化应用程序（dApp）。</li><li>您可以使用客户端 SDK 或命令行界面（CLI）来编写与部署的程序进行通信的 dApp。</li><li>这些客户端 SDK 在底层使用 JSON RPC API 来与程序进行通信。</li><li>您可以创建各种应用程序，如钱包、交易所等，通过客户端 SDK 向已部署的程序提交交易指令。</li><li>常见的应用程序类型包括浏览器扩展钱包和 Web 应用程序，但您也可以构建移动应用程序、桌面应用程序或任何能够与 JSON RPC API 进行通信的应用程序。</li></ul></li></ol><p>这两个工作流程共同创建了一个由 dApp 和程序组成的网络。它们可以相互通信以更新状态和查询区块链。这种模型涵盖了前端开发和合约开发两个方向。</p><p><img src="https://www.solanazh.com/assets/images/solana-overview-client-program.png"></p><h3 id="Account-x3D-文件"><a href="#Account-x3D-文件" class="headerlink" title="Account &#x3D; 文件"></a>Account &#x3D; 文件</h3><p>在Solana中，”Everythin is an Account” 类似Linux世界里面把所有的资源都抽象成 <strong>“文件”</strong> 一样。</p><p>Solana作为一个分布式区块链系统，所有的信息都存储在Account对象中，如合约（Solana叫Onchain Program）, 账号信息，合约中存储的内容等都是存储在一个个Account对象中。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Account</span> &#123;<br>        <span class="hljs-comment">/// lamports in the account</span><br>        <span class="hljs-keyword">pub</span> lamports: <span class="hljs-type">u64</span>,<br>        <span class="hljs-comment">/// data held in this account</span><br>        <span class="hljs-meta">#[serde(with = <span class="hljs-string">&quot;serde_bytes&quot;</span>)]</span><br>        <span class="hljs-keyword">pub</span> data: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;,<br>        <span class="hljs-comment">/// the program that owns this account. If executable, the program that loads this account.</span><br>        <span class="hljs-keyword">pub</span> owner: Pubkey,<br>        <span class="hljs-comment">/// this account&#x27;s data contains a loaded program (and is now read-only)</span><br>        <span class="hljs-keyword">pub</span> executable: <span class="hljs-type">bool</span>,<br>        <span class="hljs-comment">/// the epoch at which this account will next owe rent</span><br>        <span class="hljs-keyword">pub</span> rent_epoch: Epoch,<br>    &#125;<br></code></pre></td></tr></table></figure><p>其中的lamports表示账号余额，data表示存储的内容，owner表示这个Account可以被谁来操作，类似文件所有者。 如果是合约账号，这里data的内容就是合约编译后的代码，同时executable为true。</p><h4 id="Account-and-signature"><a href="#Account-and-signature" class="headerlink" title="Account and signature"></a>Account and signature</h4><p>Solana的签名系统使用的是 <a href="https://en.wikipedia.org/wiki/EdDSA#Ed25519">Ed25519</a> ,说人话就是： <strong>Ed25519是一种计算快，安全性高，且生成的签名内容小的一种不对称加密算法。新一代公链几乎都支持这个算法。</strong></p><p>所以Solana的，我们用户理解的账号，就是一串Ed25519的私钥，各种钱包里面的助记词，会被转换成随机数种子， 再用随机数种子来生成一个私钥，所以助记词最终也是换算成私钥。所以用户账号的本质就是私钥，而用户账号的地址 则是这私钥对应的公钥,优于公钥是二进制的，为了可读性，将其进行Base58编码后的值，就是这个账号的地址。 如：HawRVHh7t4d3H3bitWHFt25WhhoDmbJMCfWdESQQoYEy</p><p>把这里的公钥和私钥放一起，就是所谓的Keypair，或者叫公私钥对。假设这里把私钥进行加密，并由用户来设置密码， 公钥作为这个私钥的索引。就实现了一个简单的钱包系统了。</p><p>通过用户选择的公钥，加上密码，得到对应的私钥，再用私钥去操作的他的账号</p><h4 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h4><p>交易就是链外数据和链上数据产生的一次交互。比如发起一笔转账，在StepN里面发起一次Claim动作。 交易是对多个交易指令的打包，所以起内容主要就是各个交易指令，以及相应指令对应的发起人和签名。Transaction 的定义为：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Message</span> &#123;<br>        <span class="hljs-keyword">pub</span> header: MessageHeader,<br>        <span class="hljs-meta">#[serde(with = <span class="hljs-string">&quot;short_vec&quot;</span>)]</span><br>        <span class="hljs-keyword">pub</span> account_keys: <span class="hljs-type">Vec</span>&lt;Pubkey&gt;,<br>        <span class="hljs-keyword">pub</span> recent_blockhash: Hash,<br>        <span class="hljs-meta">#[serde(with = <span class="hljs-string">&quot;short_vec&quot;</span>)]</span><br>        <span class="hljs-keyword">pub</span> instructions: <span class="hljs-type">Vec</span>&lt;CompiledInstruction&gt;,<br>        <span class="hljs-meta">#[serde(with = <span class="hljs-string">&quot;short_vec&quot;</span>)]</span><br>        <span class="hljs-keyword">pub</span> address_table_lookups: <span class="hljs-type">Vec</span>&lt;MessageAddressTableLookup&gt;,<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">VersionedMessage</span> &#123;<br>        <span class="hljs-title function_ invoke__">Legacy</span>(LegacyMessage),<br>        <span class="hljs-title function_ invoke__">V0</span>(v0::Message),<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">VersionedTransaction</span> &#123;<br>        <span class="hljs-comment">/// List of signatures</span><br>        <span class="hljs-meta">#[serde(with = <span class="hljs-string">&quot;short_vec&quot;</span>)]</span><br>        <span class="hljs-keyword">pub</span> signatures: <span class="hljs-type">Vec</span>&lt;Signature&gt;,<br>        <span class="hljs-comment">/// Message to sign.</span><br>        <span class="hljs-keyword">pub</span> message: VersionedMessage,<br>    &#125;<br></code></pre></td></tr></table></figure><p>从中可以简单理解为，交易就是一连串的交易指令，以及需要签名的指令的签名内容。</p><h4 id="交易指令"><a href="#交易指令" class="headerlink" title="交易指令"></a>交易指令</h4><p>上面说到的交易指令又是什么呢？先来看下定义：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">CompiledInstruction</span> &#123;<br>        <span class="hljs-comment">/// Index into the transaction keys array indicating the program account that executes this instruction.</span><br>        <span class="hljs-keyword">pub</span> program_id_index: <span class="hljs-type">u8</span>,<br>        <span class="hljs-comment">/// Ordered indices into the transaction keys array indicating which accounts to pass to the program.</span><br>        <span class="hljs-meta">#[serde(with = <span class="hljs-string">&quot;short_vec&quot;</span>)]</span><br>        <span class="hljs-keyword">pub</span> accounts: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;,<br>        <span class="hljs-comment">/// The program input data.</span><br>        <span class="hljs-meta">#[serde(with = <span class="hljs-string">&quot;short_vec&quot;</span>)]</span><br>        <span class="hljs-keyword">pub</span> data: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;,<br>    &#125;<br></code></pre></td></tr></table></figure><p>从这些成员变量名就可以猜到。交易指令就是 执行哪个合约(program_id_index),输入为数据data,执行过程 中需要用到哪些Account: accounts</p><p>类似函数调用一样，program_id_index是函数名，因为合约都是用地址标识的，所以这里指在accounts数组中 的第几个地址。传入的参数包含两部分，二进制数据data和需要使用到的Account资源：accounts。</p><h3 id="Contract"><a href="#Contract" class="headerlink" title="Contract"></a>Contract</h3><p>合约分为两类，一类是普通合约一类是系统合约，前者在Solana中称为”On Chain Program” 后者称为”Native Program” 其实本质都是类似其他公链上所说的合约。</p><h4 id="System-contract"><a href="#System-contract" class="headerlink" title="System contract"></a>System contract</h4><p>系统合约是由节点在部署的时候生成的，普通用户无法更新，他们像普通合约一样，可以被其他合约或者RPC进行调用</p><p>系统合约有</p><ul><li>System Program: 创建账号，转账等作用</li><li>BPF Loader Program: 部署和更新合约</li><li>Vote program: 创建并管理用户POS代理投票的状态和奖励</li><li>…</li></ul><h4 id="General-contract"><a href="#General-contract" class="headerlink" title="General contract"></a>General contract</h4><p>一般我们说的合约都是普通合约，或者叫 “On Chain Program”。普通合约是由用户开发并部署，Solana官方也有 一些官方开发的合约，如Token、ATA账号等合约。</p><p>当用户通过”BPF Loader Program”部署一个新合约的时候，新合约Account中的被标记为true，表示他是一个可以 被执行的合约账号。不同于有些公链，Solana上的合约是可以被更新的，也可以被销毁。并且当销毁的时候，用于存储 代码的账号所消耗的资源也会归还给部署者。</p><h3 id="Contract与Account"><a href="#Contract与Account" class="headerlink" title="Contract与Account"></a>Contract与Account</h3><p>在上面的Account介绍中，我们有个owner的成员，这个就表示这个Account是被哪个合约管理的，或者说哪个合约可以对这个Account进行读写，类似Linux操作系统中，文件属于哪个用户。</p><p>比如一般合约，他的Owner都是BPF Loader：</p><p><img src="https://www.solanazh.com/assets/images/a_program.png"></p><p>而存放我们代币余额的内容的ower都是Token合约：</p><p><img src="https://www.solanazh.com/assets/images/a_program_curl.png"></p><p>对应的代币为：</p><p><img src="https://www.solanazh.com/assets/images/spl_account.png"></p><ul><li><p><strong>租约：</strong>Solana的资金模型中，每个 Solana 账户在区块链上存储数据的费用称为“租金”。 这种基于时间和空间的费用来保持账户及其数据在区块链上的活动为节点提供相应的收入。</p><ul><li><p>所有 Solana 账户（以及计划）都需要保持足够高的 LAMPORT 余额，才能免除租金并保留在 Solana 区块链上。</p></li><li><p>当帐户不再有足够的 LAMPORTS 来支付租金时，它将通过称为垃圾收集的过程从网络中删除。</p></li><li><p>注意：租金与交易费用不同。 支付租金（或保存在账户中）以将数据存储在 Solana 区块链上。 而交易费用是为了处理网络上的指令而支付的。</p></li></ul></li><li><p><strong>租金率：</strong>Solana 租金率是在网络范围内设置的，主要基于每年每字节设置的 LAMPORTS。 目前，租金率为静态金额并存储在 Rent 系统变量中。</p></li><li><p><strong>免租：</strong>保持最低 LAMPORT 余额超过 2 年租金的账户被视为“免租金”，不会产生租金。每次账户余额减少时，都会检查该账户是否仍免租金。 导致账户余额低于租金豁免阈值的交易将会失败。</p></li><li><p><strong>垃圾收集：</strong>未保持租金豁免状态或余额不足以支付租金的帐户将通过称为垃圾收集的过程从网络中删除。 完成此过程是为了帮助减少不再使用&#x2F;维护的数据的网络范围存储。</p></li></ul><h2 id="1-2-SPL-代币"><a href="#1-2-SPL-代币" class="headerlink" title="1.2 SPL 代币"></a>1.2 SPL 代币</h2><p>在以太坊中，普通代币被一个叫ERC20的提案定了规范，可以认为普通代币合约统一叫做ERC20代币。</p><p>那么Solana世界里的ERC20代币是什么呢？答案就是SPL代币。</p><blockquote><p>The Solana Program Library (SPL) is a collection of on-chain programs targeting the Sealevel parallel runtime.</p></blockquote><p>SPL Token是 “ Solana Program Library”中的一个组成部分，叫做”Token Program”，简称为SPL Token。</p><p>所有的代币都有这个合约来管理，该合约代码在 <a href="https://github.com/solana-labs/solana-program-library/tree/master/token">https://github.com/solana-labs/solana-program-library/tree/master/token</a></p><h3 id="代币信息"><a href="#代币信息" class="headerlink" title="代币信息"></a>代币信息</h3><p>不同于以太坊中，一个代币就是一个合约。</p><p>SPL Token中，一个代币，仅仅是一个归Token合约管理的普通的Account对象，这个对象里面的二进制数据定义了 这个代币的基本属性。其结构为：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Mint</span> &#123;<br>        <span class="hljs-comment">/// Optional authority used to mint new tokens. The mint authority may only be provided during</span><br>        <span class="hljs-comment">/// mint creation. If no mint authority is present then the mint has a fixed supply and no</span><br>        <span class="hljs-comment">/// further tokens may be minted.</span><br>        <span class="hljs-keyword">pub</span> mint_authority: COption&lt;Pubkey&gt;,<br>        <span class="hljs-comment">/// Total supply of tokens.</span><br>        <span class="hljs-keyword">pub</span> supply: <span class="hljs-type">u64</span>,<br>        <span class="hljs-comment">/// Number of base 10 digits to the right of the decimal place.</span><br>        <span class="hljs-keyword">pub</span> decimals: <span class="hljs-type">u8</span>,<br>        <span class="hljs-comment">/// Is `true` if this structure has been initialized</span><br>        <span class="hljs-keyword">pub</span> is_initialized: <span class="hljs-type">bool</span>,<br>        <span class="hljs-comment">/// Optional authority to freeze token accounts.</span><br>        <span class="hljs-keyword">pub</span> freeze_authority: COption&lt;Pubkey&gt;,<br>    &#125;<br></code></pre></td></tr></table></figure><p>相对有意义的就是supply表示总共的供应量，decimals表示代币的精度信息。</p><p><img src="https://www.solanazh.com/assets/images/mint_wallet_account.png" alt="img"></p><h3 id="SPL-Token-Account"><a href="#SPL-Token-Account" class="headerlink" title="SPL Token Account"></a>SPL Token Account</h3><p>那么每个用户的拥有的代币数量信息存在哪里呢？</p><p>这个合约又定义了一个账号结构，来表示某个地址含有某个代币的数量。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Account</span> &#123;<br>        <span class="hljs-comment">/// The mint associated with this account</span><br>        <span class="hljs-keyword">pub</span> mint: Pubkey,<br>        <span class="hljs-comment">/// The owner of this account.</span><br>        <span class="hljs-keyword">pub</span> owner: Pubkey,<br>        <span class="hljs-comment">/// The amount of tokens this account holds.</span><br>        <span class="hljs-keyword">pub</span> amount: <span class="hljs-type">u64</span>,<br>        <span class="hljs-comment">/// If `delegate` is `Some` then `delegated_amount` represents</span><br>        <span class="hljs-comment">/// the amount authorized by the delegate</span><br>        <span class="hljs-keyword">pub</span> delegate: COption&lt;Pubkey&gt;,<br>        <span class="hljs-comment">/// The account&#x27;s state</span><br>        <span class="hljs-keyword">pub</span> state: AccountState,<br>        <span class="hljs-comment">/// If is_native.is_some, this is a native token, and the value logs the rent-exempt reserve. An</span><br>        <span class="hljs-comment">/// Account is required to be rent-exempt, so the value is used by the Processor to ensure that</span><br>        <span class="hljs-comment">/// wrapped SOL accounts do not drop below this threshold.</span><br>        <span class="hljs-keyword">pub</span> is_native: COption&lt;<span class="hljs-type">u64</span>&gt;,<br>        <span class="hljs-comment">/// The amount delegated</span><br>        <span class="hljs-keyword">pub</span> delegated_amount: <span class="hljs-type">u64</span>,<br>        <span class="hljs-comment">/// Optional authority to close the account.</span><br>        <span class="hljs-keyword">pub</span> close_authority: COption&lt;Pubkey&gt;,<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里owner表示谁的代币，amount表示代币的数量。</p><p><img src="https://www.solanazh.com/assets/images/spl_account.png" alt="img"></p><h3 id="Account关系"><a href="#Account关系" class="headerlink" title="Account关系"></a>Account关系</h3><p>所以整体结构是这样的：</p><p><img src="https://www.solanazh.com/assets/images/spl_pda_account.png" alt="img"></p><p>这两个结构体都是SPL Token Program管理的Account对象，其自身所携带的数据，分别为代币信息，和 存储哪个代币的信息。</p><p>这样当需要进行代币的交易时，只需要相应用户的相应代币账号里面的amount即可。</p><h2 id="1-3-Solana-command-line"><a href="#1-3-Solana-command-line" class="headerlink" title="1.3 Solana command line"></a>1.3 Solana command line</h2><p>接下来我们来开始体验Solana，Solana为我们提供了一套命令行工具来实现对Solana的操作。 这里注意，这个命令行工具，是除了节点外，官方提供的唯一工具。什么钱包，scan浏览器等还 都是第三方的，所以我们从这里开始。</p><p>这里建议开发工具平台使用Mac&#x2F;Linux(Ubuntu),Windows不建议折腾，虽然Solana也是支持 的，下面我们以Mac作为演示平台进行讲演。</p><blockquote><p>接下来几步将演示<strong>通过命令行，发行一个代币。并给自己账号mint一定数量的代币。 并通过插件钱包或者命令行的方式给其他同学空投该代币</strong></p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>打开命令行，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -sSfL https://release.solana.com/stable/install)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>自动加载：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">downloading stable installer<br>✨ stable commit cd1c6d0 initialized<br>Adding<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;/Users/you/.local/share/solana/install/active_release/bin:<span class="hljs-variable">$PATH</span>&quot;</span> <span class="hljs-keyword">to</span> /Users/you/.profile<br><br>Close <span class="hljs-keyword">and</span> reopen your terminal <span class="hljs-keyword">to</span> apply the PATH changes <span class="hljs-keyword">or</span> <span class="hljs-built_in">run</span> the following <span class="hljs-keyword">in</span> your existing shell:<br><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;/Users/you/.local/share/solana/install/active_release/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure><p>再次输入加载出来的最后一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/Users/you/.local/share/solana/install/active_release/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure><p>输入solana –version查看是否安装完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">~ % solana --version<br>    solana-cli 1.14.20 (src:cd1c6d0d; feat:1879391783)<br></code></pre></td></tr></table></figure><p>这里打印出来cli的版本号。</p><h4 id="查看spl-token命令的帮助文档"><a href="#查看spl-token命令的帮助文档" class="headerlink" title="查看spl-token命令的帮助文档"></a>查看spl-token命令的帮助文档</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">1solana config set --url https://api.devnet.solana.com<br></code></pre></td></tr></table></figure><h3 id="2-设置网络环境"><a href="#2-设置网络环境" class="headerlink" title="2. 设置网络环境"></a>2. 设置网络环境</h3><p>Solana的网络环境分成开发网、测试网、主网三类，开发网为Solana节点开发使用，更新频繁，测试网主要 给到DApp开发者使用，相对稳定。主网则是正式环境，里面的是真金白银。</p><p>官方RPC地址分别是：</p><ul><li>DevNet: <a href="https://api.devnet.solana.com/">https://api.devnet.solana.com</a></li><li>TestNet: <a href="https://api.testnet.solana.com/">https://api.testnet.solana.com</a></li><li>MainNet: <a href="https://api.mainnet-beta.solana.com/">https://api.mainnet-beta.solana.com</a></li></ul><p>这里我们使用测试网，测试网可以申请空投测试币。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">solana config <span class="hljs-built_in">set</span> --url https://api.testnet.solana.com<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">Config File: <span class="hljs-regexp">/Users/y</span>ou<span class="hljs-regexp">/.config/</span>solana<span class="hljs-regexp">/cli/</span>config.yml<br>RPC URL: https:<span class="hljs-regexp">//</span>api.testnet.solana.com<br>WebSocket URL: wss:<span class="hljs-regexp">//</span>api.testnet.solana.com/ (computed)<br>Keypair Path: <span class="hljs-regexp">/Users/y</span>ou<span class="hljs-regexp">/.config/</span>solana/id.json<br>Commitment: confirmed<br></code></pre></td></tr></table></figure><h3 id="3-创建账号"><a href="#3-创建账号" class="headerlink" title="3. 创建账号"></a>3. 创建账号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">solana-keygen new --force<br></code></pre></td></tr></table></figure><p>自动加载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Generating a <span class="hljs-keyword">new</span> <span class="hljs-title class_">keypair</span><br><br>For added security, enter a BIP39 passphrase<br><br>NOTE! This passphrase improves security of the recovery seed phrase NOT the<br>keypair file itself, which is stored as insecure plain text<br><br>BIP39 <span class="hljs-title function_">Passphrase</span> <span class="hljs-params">(empty <span class="hljs-keyword">for</span> none)</span>:<br><br>Wrote <span class="hljs-keyword">new</span> <span class="hljs-title class_">keypair</span> to /Users/you/.config/solana/id.json <br><span class="hljs-comment">// 这里设置好密码后，提示keypair被加密存在存在&quot;/Users/you/.config/solana/id.json&quot;</span><br><br>===========================================================================<br>pubkey: Czorr4y9oFvE3VdfCLVFuKDYxaNUG1iyQomR7kMZUuzi <span class="hljs-comment">// public key: 账户公钥</span><br>===========================================================================<br>Save <span class="hljs-built_in">this</span> seed phrase and your BIP39 passphrase to recover your <span class="hljs-keyword">new</span> <span class="hljs-title class_">keypair</span>:<br>tail ... despair <span class="hljs-comment">// 创建完成后其对应的BIP39的助记词，这里助记词要记住，后续使用钱包的时候，可以通过助记词来恢复账号。</span><br>===========================================================================<br></code></pre></td></tr></table></figure><p>通过如下命令可以查看当前账号的地址，也就是上面的Keypair文件的中的公钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">solana-keygen pubkey<br></code></pre></td></tr></table></figure><h3 id="4-申请水龙头"><a href="#4-申请水龙头" class="headerlink" title="4. 申请水龙头"></a>4. 申请水龙头</h3><p>只有开发网和测试网可以申请水龙头币，这里可以通过命令行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">solana airdrop <span class="hljs-number">1</span> <span class="hljs-comment">// Request airdrop of 1 SOL</span><br></code></pre></td></tr></table></figure><p>提示申请1个SOL成功。通过命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">solana balance<br></code></pre></td></tr></table></figure><p>可以查看当前账号的余额。当前账号也就是”&#x2F;Users&#x2F;you&#x2F;.config&#x2F;solana&#x2F;id.json”中存储的keypair对应的账号。</p><h3 id="5-用-mint-account-创建-Token"><a href="#5-用-mint-account-创建-Token" class="headerlink" title="5. 用 mint account 创建 Token"></a>5. 用 mint account 创建 Token</h3><p>创建Token时，会先创建一个 <strong>“mint account”</strong> 来 <strong>铸造 (mint)</strong> 新的 Token，**”mint account”** 创建完成，就可以 <strong>使用其私钥来铸造新的Token</strong>，并将其 <strong>发送给其他Solana账户</strong>。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">spl-<span class="hljs-built_in">token</span> <span class="hljs-keyword">create</span>-<span class="hljs-built_in">token</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs solidity">Creating token 7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9 under program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA<br><br>Address:  7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9 // mint account, Token地址<br>Decimals:  9 // 精度: 9<br><br>Signature: 5QRdzn59ig3j3qjEazteDR2zoCLUWoCWdbFc7iQTd68esfdV9je3fE2We3Ms7NUGfBt6kapCj7oBAr1kbiTskSmz<br></code></pre></td></tr></table></figure><p>交易浏览器：<a href="https://solscan.io/tx/5QRdzn59ig3j3qjEazteDR2zoCLUWoCWdbFc7iQTd68esfdV9je3fE2We3Ms7NUGfBt6kapCj7oBAr1kbiTskSmz?cluster=devnet">5QRdzn59ig3j3qjEazteDR2zoCLUWoCWdbFc7iQTd68esfdV9je3fE2We3Ms7NUGfBt6kapCj7oBAr1kbiTskSmz</a></p><h3 id="6-创建-Token-Account"><a href="#6-创建-Token-Account" class="headerlink" title="6. 创建 Token Account"></a>6. 创建 Token Account</h3><p>在Solana上创建Token后，需要创建 <strong>Token Account</strong> 来存储和管理该Token的余额和相关信息。Token账户是Solana区块链上特定Token的持有者账户，类似于银行账户，用于记录Token的所有权和交易历史。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity">spl-token create-account 7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9<br><br>Creating account EZhhUANUMKsRhRMArczio1kLc9axefTUAh5xofGX35AK // 调用了ATA合约，并创建了ATA账号：EZhhUANUMK...<br><br>Signature: 59yBhJzC2HDkF61AhgaXcvVGiw5CjdnNpFyxvCzbqQrCjGCVKotNvCMaRQooJkxmu6ypJ9P7AZDiKxYex7pvBZKq<br></code></pre></td></tr></table></figure><p>交易浏览器：<a href="https://solscan.io/tx/59yBhJzC2HDkF61AhgaXcvVGiw5CjdnNpFyxvCzbqQrCjGCVKotNvCMaRQooJkxmu6ypJ9P7AZDiKxYex7pvBZKq?cluster=devnet">59yBhJzC2HDkF61AhgaXcvVGiw5CjdnNpFyxvCzbqQrCjGCVKotNvCMaRQooJkxmu6ypJ9P7AZDiKxYex7pvBZKq</a></p><h3 id="7-给自己的-Token-Account-发送-mint"><a href="#7-给自己的-Token-Account-发送-mint" class="headerlink" title="7. 给自己的 Token Account 发送 mint"></a>7. 给自己的 Token Account 发送 mint</h3><p>创建完 <strong>Token Account</strong> 后，要给我们的账号去 <strong>“mint”</strong> 一些token（下面mint了100个）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs solidity">spl-token mint  7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9 100 EZhhUANUMKsRhRMArczio1kLc9axefTUAh5xofGX35AK<br>// mint accountmint 100 token to  //我们刚刚创建的这个 token account 的账号来存这100个<br>Minting 100 tokens<br>  Token: 7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9<br>  Recipient: EZhhUANUMKsRhRMArczio1kLc9axefTUAh5xofGX35AK<br><br>Signature: 5eE21U9ukZLP7Uvck5mzBbKRcXjxEYZYxCTnJX6qoS9kdXzfhPuN8k2Ko6BBekBdP2mhLmPMHAWNJW6bqyo6mqQe<br></code></pre></td></tr></table></figure><p>交易记录：<a href="https://solscan.io/tx/5eE21U9ukZLP7Uvck5mzBbKRcXjxEYZYxCTnJX6qoS9kdXzfhPuN8k2Ko6BBekBdP2mhLmPMHAWNJW6bqyo6mqQe?cluster=devnet">5eE21U9ukZLP7Uvck5mzBbKRcXjxEYZYxCTnJX6qoS9kdXzfhPuN8k2Ko6BBekBdP2mhLmPMHAWNJW6bqyo6mqQe</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Token Program -TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA <span class="hljs-comment">// owner program</span><br>#<span class="hljs-number">1</span> - Account -EZhhUANUMKsRhRMArczio1kLc9axefTUAh5xofGX35AKicon<br>#<span class="hljs-number">2</span> - Mint -7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9icon <span class="hljs-comment">// token address</span><br>#<span class="hljs-number">3</span> - MintAuthority -Czorr4y9oFvE3VdfCLVFuKDYxaNUG1iyQomR7kMZUuziicon <span class="hljs-comment">// Authority (也就是说是谁发的，这是他的公钥)</span><br>#<span class="hljs-number">4</span> - TokenAmount - <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>查询余额：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs solidity">spl-token balance 7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9<br>100<br></code></pre></td></tr></table></figure><p>因为这里是求取ATA账号，所以只需要提供Token Mint地址即刻。</p><h3 id="8-转账"><a href="#8-转账" class="headerlink" title="8. 转账"></a>8. 转账</h3><p>这里通过命令行给另一个账号转账，如果这个账号之前不存在，需要使用–allow-unfunded-recipient来进行创建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">solana transfer --allow-unfunded-recipient &#123;your wallet&#125; 0.01<br></code></pre></td></tr></table></figure><p>eg.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">spl-token transfer --fund-recipient  7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9 1 BBy1K96Y3bohNeiZTHuQyB53LcfZv6NWCSWqQp89TiVu<br>// 也就是说转 1个 &#123;7vtXvye2ECB1T5S..的所属类型代币&#125; 到 &#123;BBy1K96Y3bohNeiZT..&#125;<br>Transfer 1 tokens<br>  Sender: EZhhUANUMKsRhRMArczio1kLc9axefTUAh5xofGX35AK<br>  Recipient: BBy1K96Y3bohNeiZTHuQyB53LcfZv6NWCSWqQp89TiVu<br>  Recipient associated token account: H1jfKknnnyfFGYPVRd4ZHwUbXLF4PbFSWSH6wMJq6EK9<br>  Funding recipient: H1jfKknnnyfFGYPVRd4ZHwUbXLF4PbFSWSH6wMJq6EK9 // --fund-recipient, 帮这个用户创建了ATA账号<br><br>Signature: 5VqeT7ctVtGdcJDvTmLzL4Pbti8PzM3mSrRpdE8GNG4ghF3svSJMkTn4AfNRQDSeYqCotEQuzDY9KLgdSJbKEjXt<br></code></pre></td></tr></table></figure><p>交易为: <a href="https://solscan.io/tx/5VqeT7ctVtGdcJDvTmLzL4Pbti8PzM3mSrRpdE8GNG4ghF3svSJMkTn4AfNRQDSeYqCotEQuzDY9KLgdSJbKEjXt?cluster=devnet">5VqeT7ctVtGdcJDvTmLzL4Pbti8PzM3mSrRpdE8GNG4ghF3svSJMkTn4AfNRQDSeYqCotEQuzDY9KLgdSJbKEjXt</a></p><p>查询下这个 <a href="https://solscan.io/account/H1jfKknnnyfFGYPVRd4ZHwUbXLF4PbFSWSH6wMJq6EK9?cluster=devnet">账号</a>，余额为1.</p><h1 id="02-通过RPC与Solana交互"><a href="#02-通过RPC与Solana交互" class="headerlink" title="02. 通过RPC与Solana交互"></a><u>02. 通过RPC与Solana交互</u></h1><h2 id="2-1-Solana的RPC介绍"><a href="#2-1-Solana的RPC介绍" class="headerlink" title="2.1 Solana的RPC介绍"></a>2.1 Solana的RPC介绍</h2><p><strong>RPC (Remote Procedure Call, 远程过程调用):</strong> <u>通过网络从远程计算机上请求服务</u>。就是用一台 loacl 电脑远程调用 procedure (subroutine) 共享网络上的另一台计算机上 (不同的 address space ) 上面正在运行的函数。eg:</p><p>local: 2+3 <strong>&#x3D;&#x3D; RPC (可能是使用的HTTP、gRPC、Thrift…) &#x3D;&#x3D;&gt;</strong> Server: int func(a+b)<br>Server: 5  <strong>&#x3D;&#x3D; RPC (可能是使用的HTTP、gRPC、Thrift…) &#x3D;&#x3D;&gt;</strong>  Local: 5</p><p><strong>RPC 框架：</strong>是一种技术思想和方法而非一种规范和协议（实现RPC的方式有很多，使用RPC框架思想实现的例子有 gRPC、Thrift、mina…, HTTP是标准化的协议，也是RPC框架的一种实现方法），RPC框架的主要功能是把RPC调用的过程封装起来，使开发者不用考虑模块间的兼容性问题，简单配置就可调用。</p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Screenshot%202023-08-11%20at%2014.42.22.png"></p><h3 id="RPC-跟区块链关系"><a href="#RPC-跟区块链关系" class="headerlink" title="RPC 跟区块链关系"></a>RPC 跟区块链关系</h3><ul><li>账户：用于管理和交易代币的虚拟数字资产；</li><li>合约：一种智能合约，可以自动化地完成各种操作，例如转移代币或支付费用；</li><li>RPC：分布式系统中的一种通信协议，可以通过不同的节点进行交互。</li></ul><p>RPC 跟区块链是什么关系呢？引用 Polkadot 的一个架构图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;Networking:&quot;</span> 每个节点之间要进行通讯，这个网络一般就是我们所谓的P2P网络。<br><span class="hljs-string">&quot;Storage:&quot;</span> 区块需要存储，我们需要一个存储的组件。<br><span class="hljs-string">&quot;Consensus:&quot;</span> 存储完了以后互通信息的时候要有一个共识，比如说POW，POS这种的共识算法？<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;Runtime call executor:&quot;</span> 相应的，智能合约，它要怎么去执行，执行什么语言，需要一个runtime<br><span class="hljs-string">&quot;Application logic and state WebAssembly (Wasm):&quot;</span> 这个runtime去执行我们合约编译出来的字节码。<br></code></pre></td></tr></table></figure><img src="https://www.solanazh.com/assets/images/dot_arch.png" style="zoom:70%;" /><p><strong>RPC:</strong> 作为区块链系统中客户端与节点之间的通信接口，被普通用户直接使用，<strong>通过RPC可以实现与 <u>区块链 node</u> 的交互操作</strong>，同时节点的操作可能会影响到网络和存储等方面。</p><ul><li><p>因为程序员帮忙将中间的过程都通过代码来串联起来了，所以普通用户感知不到 RPC 的存在，只知道钱包，拉起、确定 &#x3D;&gt; 币没了。所以 RPC 又是用户界面和区块链之间的桥梁。</p></li><li><p>Solana 提供的 RPC 分为主动请求的 HTTP 接口和消息推送的 Websocket 接口。只是单次查询一般使用 HTTP 接口，如发送交易，查询用户余额。而对于链上数据的监控则通过 Websocket 接口，如监控合约执行的日志。</p><ul><li><p>HTTP 接口是通过 JSON RPC 的格式对外提供服务，<a href="https://www.jsonrpc.org/">JSON RPC</a> 是一种以 JSSON 作为序列化工具，HTTP 作为传输协议的 RPC 模式，其有多个版本，当前使用的是 v2 版本。其请求格式为（对应的请求结果多了result等）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;,<br>&quot;id&quot;: 1,<br>&quot;method&quot;: &quot;getBalance&quot;,...&#125; // result 表示请求的结果。id 和请求里面的 id 对应，表示的是哪个请求的结果。<br>/* 在请求查询的时候，对查询的结果有三种状态选择：<br>- &#x27;finalized&#x27; - 节点将查询由超过集群中超多数确认为达到最大封锁期的最新区块，表示集群已将此区块确认为已完成。<br>- &#x27;confirmed&#x27; - 节点将查询由集群的超多数投票的最新区块。<br>- &#x27;processed&#x27; - 节点将查询最新的区块。注意，该区块可能被集群跳过。*/<br></code></pre></td></tr></table></figure></li><li><p>Websocket 是 <strong>HTTP 为了补充长链接，而增加一个特性</strong>，概括来说就可以认为这个是一条 TCP 长链接，可以实现实时数据传输。Solana 通过这条长连接来给客户端推送消息。只是这里的消息的内容也是采用了 JSONRPC 的格式，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;,<br>        &quot;id&quot;: 1,<br>        &quot;method&quot;: &quot;accountSubscribe&quot;,<br>        &quot;params&quot;: [...]&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-2-RPC-API"><a href="#2-2-RPC-API" class="headerlink" title="2.2 RPC API"></a>2.2 RPC API</h2><h3 id="Solana-RPC-API-格式"><a href="#Solana-RPC-API-格式" class="headerlink" title="Solana RPC API 格式"></a>Solana RPC API 格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs solidity">curl https://api.devnet.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;<br>    &#123;<br>        &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 1,<br>        &quot;method&quot;: &quot;&quot; // 添加方法, eg. getClusterNodes, getBlockHeight, getEpochInfo<br>    &#125;<br>    &#x27;<br></code></pre></td></tr></table></figure><ul><li><strong>getClusterNodes：</strong>可以获得当前网络内，集群节点的相关信息，比如验证者的key，节点IP，节点版本等。</li></ul><h3 id="block-相关-API"><a href="#block-相关-API" class="headerlink" title="block 相关 API"></a>block 相关 API</h3><ul><li><p><strong>getBlockHeight：</strong>可以获取当前的区块高度</p></li><li><p><strong>getLatestBlockhash：</strong>可以获得连上最近的一个Block的Hash值和高度，看到最近的一个区块的slot, hash以及block height</p></li><li><p><strong>getBlock：</strong>获取指定高度block的信息，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs solidity">curl https://api.devnet.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;<br>    &#123;<br>        &quot;jsonrpc&quot;: &quot;2.0&quot;,&quot;id&quot;:1,<br>        &quot;method&quot;:&quot;getBlock&quot;,<br>        &quot;params&quot;: [<br>            174302734,<br>            &#123;<br>                &quot;encoding&quot;: &quot;jsonParsed&quot;, // 将结果按照json的格式进行展示<br>                &quot;maxSupportedTransactionVersion&quot;:0, // 和带版本号的交易有关, 表示返回最大的版本号, 默认是0<br>                &quot;transactionDetails&quot;:&quot;full&quot;, // 设置返回的交易信息的内容复杂等级, 默认是 full<br>                &quot;rewards&quot;:false // rewards 表示是否携带 rewards 信息<br>            &#125;<br>        ]<br>    &#125;<br>    &#x27;<br></code></pre></td></tr></table></figure></li></ul><h4 id="获取指定block的确认状态"><a href="#获取指定block的确认状态" class="headerlink" title="获取指定block的确认状态"></a>获取指定block的确认状态</h4><p>有时候在上面获得当前最高区块，但是查询区块信息的时候却又查询不到，这里可以通过getBlockCommitment查看下对应区块的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs solidity">curl https://api.devnet.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;<br>    &#123;<br>        &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 1,<br>        &quot;method&quot;: &quot;getBlockCommitment&quot;,<br>        &quot;params&quot;:[174302734]<br>    &#125;<br>    &#x27;<br></code></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&#123;<br>        &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>        &quot;result&quot;: &#123;<br>            &quot;commitment&quot;: null, // 如果commitment不为null的时候，将是一个数组表示各个集群中Stake的数量分布。<br>            &quot;totalStake&quot;: 144333782793465543 // totalStake表示提交确认的节点总共Stake的SOL数目，也就是POS的权重<br>        &#125;,<br>        &quot;id&quot;: 1<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="一次性获取多个Block的信息"><a href="#一次性获取多个Block的信息" class="headerlink" title="一次性获取多个Block的信息"></a>一次性获取多个Block的信息</h4><p>前面的getBlock获得了单个Block的信息，还可以通过getBlocks一次性获得多个Block的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">curl https://api.devnet.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;<br>    &#123;<br>        &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 1,<br>        &quot;method&quot;: &quot;getBlocks&quot;,<br>        &quot;params&quot;: [<br>            174302734, 174302735 // 其余参数都是一样的，这里参数中，前面的部分是block number的数组<br>        ]<br>    &#125;<br>    &#x27;<br></code></pre></td></tr></table></figure><h4 id="分页获取Block"><a href="#分页获取Block" class="headerlink" title="分页获取Block"></a>分页获取Block</h4><p>前面两个获取Block信息的方法，分别可以获得单个Block和多个指定Block号的信息。因为Block Number是递增且不一定连续的，因此 还Solana还提供了一个分页查询的方式getBlocksWithLimit，从起始号查询多少个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs solidity">curl https://api.devnet.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;<br>  &#123;<br>    &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>    &quot;id&quot;:1,<br>    &quot;method&quot;:&quot;getBlocksWithLimit&quot;,<br>    &quot;params&quot;:[174302734, 3] // 从 174302734 节点高度开始，往后请求三个，然后在我们的浏览器里面显示三个<br>  &#125;<br>&#x27;<br></code></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&#123;<br>        &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>        &quot;result&quot;: [<br>            174302734,<br>            174302735,<br>            174302736<br>        ],<br>        &quot;id&quot;: 1<br>    &#125;<br></code></pre></td></tr></table></figure><p>三个BlockNumber，接着我们可以前面的GetBlocks来获得这三个Block的详细信息。</p><h3 id="Slot-amp-Epoch-相关-API"><a href="#Slot-amp-Epoch-相关-API" class="headerlink" title="Slot &amp; Epoch 相关 API"></a>Slot &amp; Epoch 相关 API</h3><p>Epoch：在一般POS中比较常见，表示这个周期内，一些参与验证的节点信息是固定的，如果有新 节点或者节点权重变更，将在下一个epoch中生效。</p><p>在POS（权益证明）中，”epoch”可以理解为在一段时间内选择多少个节点进行投票。在这个周期内，这些节点被选为投票者。提到了”Solanah”中的POH（Proof of History）概念，它选择一个主节点，并且其他节点以此主节点的信息进行同步。</p><ul><li><strong>getEpochInfo：</strong>获取当前Epoch信息。输出里面有当前周期的区块高度，slot数目，以及transaction的数目。</li><li><strong>getEpochSchedule：</strong>获取Epoch的调度信息。</li><li><strong>getSlot：</strong>获取最新Slot，和Epoch类似，可以获得当前的Slot</li></ul><h3 id="Account-相关-API"><a href="#Account-相关-API" class="headerlink" title="Account 相关 API"></a>Account 相关 API</h3><p>第一章有介绍，Solana上存储的内容，都是一个Account对象，有基础的源数据信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pub struct Account &#123;<br>        /// lamports in the account<br>        pub lamports: u64,<br>        /// data held in this account<br>        #[serde(with = &quot;serde_bytes&quot;)]<br>        pub data: Vec&lt;u8&gt;,<br>        /// the program that owns this account. If executable, the program that loads this account.<br>        pub owner: Pubkey,<br>        /// this account&#x27;s data contains a loaded program (and is now read-only)<br>        pub executable: bool,<br>        /// the epoch at which this account will next owe rent<br>        pub rent_epoch: Epoch,<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="获取-Account-Info"><a href="#获取-Account-Info" class="headerlink" title="获取 Account Info"></a>获取 Account Info</h4><p>我们可以通过 <strong>getAccountInfo</strong> RPC请求来查看，比如查看我们前面的测试账号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs solidity">curl https://api.devnet.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;<br>    &#123;<br>        &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>        &quot;id&quot;: 1,<br>        &quot;method&quot;: &quot;getAccountInfo&quot;,<br>        &quot;params&quot;: [<br>            &quot;5pWae6RxD3zrYzBmPTMYo1LZ5vef3vfWH6iV3s8n6ZRG&quot;,<br>            &#123;<br>                &quot;encoding&quot;: &quot;base58&quot;,<br>                &quot;commitment&quot;: &quot;finalized&quot;<br>            &#125;<br>        ]<br>    &#125;<br>    &#x27;<br></code></pre></td></tr></table></figure><p>这里我们通过curl来直接发起HTTP请求，最直观的看发生什么。请求中我们指定了测试网的RPC地址。 <a href="https://api.devnet.solana.com/">https://api.devnet.solana.com</a> 得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&#123;<br>    &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>    &quot;result&quot;: &#123; // 在result里面可以看到value里面的值项目，和Rust的结构体是一一对应的<br>        &quot;context&quot;: &#123;<br>            &quot;apiVersion&quot;: &quot;1.16.1&quot;,<br>            &quot;slot&quot;: 206885329<br>        &#125;,<br>        &quot;value&quot;: &#123;<br>            &quot;data&quot;: [ // data表示数据内容， 这里我们的普通账号不是合约账号，因此其为空<br>                &quot;&quot;,<br>                &quot;base58&quot; // 表示如果这里有值，那么他将是二进制内容的base58格式编码<br>            ],<br>            &quot;executable&quot;: false, // 表示是否为可执行合约<br>            &quot;lamports&quot;: 59597675320, // 表示余额，这里精度*10^9。<br>            &quot;owner&quot;: &quot;11111111111111111111111111111111&quot;, // 所有普通账号的Owner都是系统根账号<br>            &quot;rentEpoch&quot;: 349,<br>            &quot;space&quot;: 0<br>        &#125;<br>    &#125;,<br>    &quot;id&quot;: 1<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="获取账号-Balance"><a href="#获取账号-Balance" class="headerlink" title="获取账号 Balance"></a>获取账号 Balance</h4><p>在上面的Account信息里面，我们已经可以知道 <strong>账号余额 (lamports)</strong> 了，同时RPC还提供了<strong>getBalance</strong> 可以更简洁的得到余额信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">curl https://api.devnet.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;<br>    &#123;<br>        &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 1,<br>        &quot;method&quot;: &quot;getBalance&quot;,<br>        &quot;params&quot;: [<br>            &quot;5pWae6RxD3zrYzBmPTMYo1LZ5vef3vfWH6iV3s8n6ZRG&quot;<br>        ]<br>    &#125;<br>    &#x27;<br></code></pre></td></tr></table></figure><p>输出结果里，比如 value &#x3D; 989995000，SOL的精度是10^9，所以也就是 0.989995 个SOL。</p><h4 id="获取某个合约管理所有Account"><a href="#获取某个合约管理所有Account" class="headerlink" title="获取某个合约管理所有Account"></a>获取某个合约管理所有Account</h4><p>类似Linux查询某个用户所有的文件。Solana提供了一个查询owener为某个合约的RPC方法。</p><p><strong>getProgramAccounts：</strong>该方法的作用就是罗列出某个合约管理的Account，比如SPL Token合约记录的所有用户的余额信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs solidity">curl  https://api.devnet.solana.com  -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;<br>        &#123;<br>            &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>            &quot;id&quot;: 1,<br>            &quot;method&quot;: &quot;getProgramAccounts&quot;,<br>            &quot;params&quot;: [<br>            &quot;namesLPneVptA9Z5rqUDD9tMTWEJwofgaYwp8cawRkX&quot;,<br>            &#123;<br>                &quot;encoding&quot;: &quot;jsonParsed&quot;,<br>                &quot;filters&quot;: [<br>                &#123;<br>                    &quot;dataSize&quot;: 128 // 获取所有NameService服务管理的名字且记录空间大小为128字节的记录<br>                &#125;<br>                ]<br>            &#125;<br>            ]<br>        &#125;<br>    &#x27;<br></code></pre></td></tr></table></figure><h3 id="SPL-Token-相关-API"><a href="#SPL-Token-相关-API" class="headerlink" title="SPL-Token 相关 API"></a>SPL-Token 相关 API</h3><p>我们知道SPL Token的结构为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs solidity">1pub struct Account &#123;<br>2        /// The mint associated with this account<br>3        pub mint: Pubkey,<br>4        /// The owner of this account.<br>5        pub owner: Pubkey,<br>6        /// The amount of tokens this account holds.<br>7        pub amount: u64,<br>8        /// If `delegate` is `Some` then `delegated_amount` represents<br>9        /// the amount authorized by the delegate<br>10        pub delegate: COption&lt;Pubkey&gt;,<br>11        /// The account&#x27;s state<br>12        pub state: AccountState,<br>13        /// If is_native.is_some, this is a native token, and the value logs the rent-exempt reserve. An<br>14        /// Account is required to be rent-exempt, so the value is used by the Processor to ensure that<br>15        /// wrapped SOL accounts do not drop below this threshold.<br>16        pub is_native: COption&lt;u64&gt;,<br>17        /// The amount delegated<br>18        pub delegated_amount: u64,<br>19        /// Optional authority to close the account.<br>20        pub close_authority: COption&lt;Pubkey&gt;,<br>21    &#125;<br></code></pre></td></tr></table></figure><h4 id="按照需求查询账号"><a href="#按照需求查询账号" class="headerlink" title="按照需求查询账号"></a>按照需求查询账号</h4><p><strong>getTokenAccountsByOwner：</strong>我们可以查询某个Token下，所有owner为某人的Token账号，或者delegate为某人的所有账号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs solidity">curl  https://api.devnet.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;<br>        &#123;<br>            &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>            &quot;id&quot;: 1,<br>            &quot;method&quot;: &quot;getTokenAccountsByOwner&quot;,<br>            &quot;params&quot;: [<br>            &quot;Czorr4y9oFvE3VdfCLVFuKDYxaNUG1iyQomR7kMZUuzi&quot;,<br>            &#123;<br>                &quot;mint&quot;: &quot;7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9&quot;<br>            &#125;,<br>            &#123;<br>                &quot;encoding&quot;: &quot;jsonParsed&quot;<br>            &#125;<br>            ]<br>        &#125;<br>    &#x27;<br>// 这里查询到这个token：7vtXvye2ECB1T5Se8E... ower 为 CnjrCefFBHmWnKcw.. 所有账号<br></code></pre></td></tr></table></figure><h4 id="获取某个Token-Account账号的余额"><a href="#获取某个Token-Account账号的余额" class="headerlink" title="获取某个Token Account账号的余额"></a>获取某个Token Account账号的余额</h4><p>查询SPL Token的余额，有个ATA账号需要了解。本质上就是对应Token的账号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">curl  https://api.devnet.solana.com  -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;<br>        &#123;<br>            &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 1,<br>            &quot;method&quot;: &quot;getTokenAccountBalance&quot;,<br>            &quot;params&quot;: [<br>                &quot;EZhhUANUMKsRhRMArczio1kLc9axefTUAh5xofGX35AK&quot;<br>            ]<br>        &#125;<br>    &#x27;<br></code></pre></td></tr></table></figure><p>返回的值，会列出数量，uiAmount是可以显示的数量，做了精度转换的</p><h3 id="Transaction-相关-API"><a href="#Transaction-相关-API" class="headerlink" title="Transaction 相关 API"></a>Transaction 相关 API</h3><h4 id="获取交易手续费"><a href="#获取交易手续费" class="headerlink" title="获取交易手续费"></a>获取交易手续费</h4><p>针对某个交易，需要预估其手续费时，可以借助节点的预计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs solidity">curl https://api.devnet.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;<br>    &#123;<br>        &quot;id&quot;:1,<br>        &quot;jsonrpc&quot;:&quot;2.0&quot;,<br>        &quot;method&quot;:&quot;getFeeForMessage&quot;,<br>        &quot;params&quot;:[<br>            &quot;AQABAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQAA&quot;,<br>            &#123;<br>                &quot;commitment&quot;:&quot;processed&quot;<br>            &#125;<br>        ]<br>    &#125;<br>    &#x27;<br></code></pre></td></tr></table></figure><p>输出结果参数中的字符串，是Transaction打包后的结果。也就是RawTransaction的序列化结果。</p><h4 id="获取交易详细信息"><a href="#获取交易详细信息" class="headerlink" title="获取交易详细信息"></a>获取交易详细信息</h4><p><strong>getTransaction：</strong>查询某个交易的详细信息（输出结果跟浏览器中的结果基本是对应的）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs solidity">curl  https://api.devnet.solana.com  -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;<br>        &#123;<br>            &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>            &quot;id&quot;: 1,<br>            &quot;method&quot;: &quot;getTransaction&quot;,<br>            &quot;params&quot;: [<br>                &quot;2o9qCEhwKi8w7hTFQJTLwMBZPFH8qM3iNd9rprtdY6XShyrpsqkWt4Df3Zgsxv6y4nbRe4SDgU8KMvuMfs7HxVhp&quot;,<br>                &quot;jsonParsed&quot;<br>            ]<br>        &#125;<br>    &#x27;<br></code></pre></td></tr></table></figure><h2 id="2-3-RPC-notification"><a href="#2-3-RPC-notification" class="headerlink" title="2.3 RPC notification"></a>2.3 RPC notification</h2><p>推送RPC，其实是RPC节点允许连接的一个WebSocket长连接。通过在该长连接上发送订阅请求， RPC节点会将相关事件在长连接上推送过来。当前订阅主要分为：</p><ul><li><strong>accountSubscribe:</strong> 订阅 <strong>Account</strong> 的变化，比如lamports</li><li><strong>logsSubscribe:</strong> 订阅交易的 <strong>日志 log</strong></li><li><strong>programSubscribe：</strong>订阅 <strong>合约Account</strong> 的变化</li><li>signatureSubscribe : 订阅签名状态变化</li><li>slotSubscribe : 订阅slot的变化</li></ul><p>每个事件，还有对应的 <strong>取消订阅 (Unsubscribe)</strong> 动作。将上面的 Subscribe 替换成 Unsubscribe 即可。</p><p>这里我们通过wscat命令行工具来模拟wss客户端。首先安装工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">npm install -g ws wscat<br></code></pre></td></tr></table></figure><p>然后建立连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">wscat -c wss://api.devnet.solana.com<br></code></pre></td></tr></table></figure><p>下面举例说明：</p><h3 id="订阅-Account-变化"><a href="#订阅-Account-变化" class="headerlink" title="订阅 Account 变化"></a>订阅 Account 变化</h3><p><strong>accountSubscribe：</strong>这里的Account就是每个地址的Account元数据。主要变化的就是data部分和lamports部分。 比如我们要订阅我们的账号余额的变化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&#123;<br>        &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>        &quot;id&quot;: 1,<br>        &quot;method&quot;: &quot;accountSubscribe&quot;,<br>        &quot;params&quot;: [<br>            &quot;CnjrCefFBHmWnKcwH5T8DFUQuVEmUJwfBL3Goqj6YhKw&quot;,<br>            &#123;<br>            &quot;encoding&quot;: &quot;jsonParsed&quot;,<br>            &quot;commitment&quot;: &quot;finalized&quot;<br>            &#125;<br>        ]<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里订阅对账号的变化的事件，我们通过wscat来模拟：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">wscat -c wss://api.testnet.solana.com<br>    Connected (press CTRL+C to quit)<br>    &gt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;method&quot;:&quot;accountSubscribe&quot;,&quot;params&quot;:[&quot;CnjrCefFBHmWnKcwH5T8DFUQuVEmUJwfBL3Goqj6YhKw&quot;,&#123;&quot;encoding&quot;:&quot;jsonParsed&quot;,&quot;commitment&quot;:&quot;finalized&quot;&#125;]&#125;<br>    &lt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:3283925,&quot;id&quot;:1&#125;<br></code></pre></td></tr></table></figure><p>然后我们在另外一个终端里面进行转账：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">solana transfer --allow-unfunded-recipient CZmVK1DymrSVWHiQCGXx6VG5zgHVrh5J1P514jHKRDxA 0.01<br></code></pre></td></tr></table></figure><p>接着我们注意观察上面的wscat:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">Connected (press CTRL+C to quit)<br>    &gt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;method&quot;:&quot;accountSubscribe&quot;,&quot;params&quot;:[&quot;CnjrCefFBHmWnKcwH5T8DFUQuVEmUJwfBL3Goqj6YhKw&quot;,&#123;&quot;encoding&quot;:&quot;jsonParsed&quot;,&quot;commitment&quot;:&quot;finalized&quot;&#125;]&#125;<br>    &lt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:3283925,&quot;id&quot;:1&#125;<br>    &lt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;accountNotification&quot;,&quot;params&quot;:&#123;&quot;result&quot;:&#123;&quot;context&quot;:&#123;&quot;slot&quot;:209127027&#125;,&quot;value&quot;:&#123;&quot;lamports&quot;:989995000,&quot;data&quot;:[&quot;&quot;,&quot;base64&quot;],&quot;owner&quot;:&quot;11111111111111111111111111111111&quot;,&quot;executable&quot;:false,&quot;rentEpoch&quot;:0,&quot;space&quot;:0&#125;&#125;,&quot;subscription&quot;:3283925&#125;&#125;<br></code></pre></td></tr></table></figure><p>会发现，一段时间后，也就是到达了 “finalized”状态后，就会将修改过后的Account信息推送过来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&#123;<br>        &quot;lamports&quot;: 989995000,<br>        &quot;data&quot;: [<br>            &quot;&quot;,<br>            &quot;base64&quot;<br>        ],<br>        &quot;owner&quot;: &quot;11111111111111111111111111111111&quot;,<br>        &quot;executable&quot;: false,<br>        &quot;rentEpoch&quot;: 0,<br>        &quot;space&quot;: 0<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到这里余额发生了变化</p><h3 id="订阅-日志-log"><a href="#订阅-日志-log" class="headerlink" title="订阅 日志 log"></a>订阅 日志 log</h3><p>订阅日志可能是做应用最常见到的，任何在log里面打印了相关事件的交易都会被通知</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&#123;<br>        &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>        &quot;id&quot;: 1,<br>        &quot;method&quot;: &quot;logsSubscribe&quot;,<br>        &quot;params&quot;: [<br>            &#123;<br>            &quot;mentions&quot;: [ &quot;CdJp6W7S8muM85UXq7u2P42ryytDacqEo8JgoHENSiUi&quot; ] // 来指定，通知了哪个程序或者账号的地址<br>            &#125;,<br>            &#123;<br>            &quot;commitment&quot;: &quot;finalized&quot;<br>            &#125;<br>        ]<br>    &#125;<br></code></pre></td></tr></table></figure><p>比如这里我们订阅我们的一个ATA的账号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">wscat -c wss://api.testnet.solana.com<br>    Connected (press CTRL+C to quit)<br>    &gt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;method&quot;:&quot;logsSubscribe&quot;,&quot;params&quot;:[&#123;&quot;mentions&quot;:[&quot;CdJp6W7S8muM85UXq7u2P42ryytDacqEo8JgoHENSiUi&quot;]&#125;,&#123;&quot;commitment&quot;:&quot;finalized&quot;&#125;]&#125;<br>    &lt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:610540,&quot;id&quot;:1&#125;<br></code></pre></td></tr></table></figure><p>然后我们给这个地址做mint增加他的余额：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs solidity">spl-token mint 7dyTPp6Jd1nWWyz3y7CXqdSG86yFpVF7u45ARKnqDhRF 1000000000<br>    Minting 1000000000 tokens<br>    Token: 7dyTPp6Jd1nWWyz3y7CXqdSG86yFpVF7u45ARKnqDhRF<br>    Recipient: CdJp6W7S8muM85UXq7u2P42ryytDacqEo8JgoHENSiUi<br><br>    Signature: 5NVHNccPo4ADxnHZjVSYZzxk3fuZfZvuLP6MwkhSNBbQRNcGfC2gwScz24XYictZuqaMKFEcmsXuHV4WZDiFUD3r<br></code></pre></td></tr></table></figure><p>可以在事件通知中看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity">wscat -c wss://api.testnet.solana.com<br>    Connected (press CTRL+C to quit)<br>    &gt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;method&quot;:&quot;logsSubscribe&quot;,&quot;params&quot;:[&#123;&quot;mentions&quot;:[&quot;CdJp6W7S8muM85UXq7u2P42ryytDacqEo8JgoHENSiUi&quot;]&#125;,&#123;&quot;commitment&quot;:&quot;finalized&quot;&#125;]&#125;<br>    &lt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:610540,&quot;id&quot;:1&#125;<br>    &lt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;logsNotification&quot;,&quot;params&quot;:&#123;&quot;result&quot;:&#123;&quot;context&quot;:&#123;&quot;slot&quot;:209131722&#125;,&quot;value&quot;:&#123;&quot;signature&quot;:&quot;5NVHNccPo4ADxnHZjVSYZzxk3fuZfZvuLP6MwkhSNBbQRNcGfC2gwScz24XYictZuqaMKFEcmsXuHV4WZDiFUD3r&quot;,&quot;err&quot;:null,&quot;logs&quot;:[&quot;Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA invoke [1]&quot;,&quot;Program log: Instruction: MintToChecked&quot;,&quot;Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA consumed 4498 of 200000 compute units&quot;,&quot;Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA success&quot;]&#125;&#125;,&quot;subscription&quot;:610540&#125;&#125;<br></code></pre></td></tr></table></figure><p>这里有个”MintToChecked”指令。</p><h3 id="订阅合约所属于Account事件"><a href="#订阅合约所属于Account事件" class="headerlink" title="订阅合约所属于Account事件"></a>订阅合约所属于Account事件</h3><p>比如我们希望知道所有Token合约管理的账号的余额变化是，我们可以通过订阅合约管理的账号事件来发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&#123;<br>        &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>        &quot;id&quot;: 1,<br>        &quot;method&quot;: &quot;programSubscribe&quot;,<br>        &quot;params&quot;: [<br>            &quot;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&quot;,<br>            &#123;<br>            &quot;encoding&quot;: &quot;jsonParsed&quot;<br>            &#125;<br>        ]<br>    &#125;<br></code></pre></td></tr></table></figure><p>对应的命令里面可以看到有很多的SPL Token账号都在变化。并且因为我们加了”jsonParsed”,所以这里SPL Token的内容也展示出来了。</p><h3 id="订阅交易状态"><a href="#订阅交易状态" class="headerlink" title="订阅交易状态"></a>订阅交易状态</h3><p>比如我们希望在我们发起交易后，第一时间知道交易的确定状态，我们可以通过订阅该事件来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&#123;<br>    &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>    &quot;id&quot;: 1,<br>    &quot;method&quot;: &quot;signatureSubscribe&quot;,<br>    &quot;params&quot;: [<br>            &quot;BfQAbgqQZMfsxFHwh6Hve8yGb843QfZcYtD2j2nN3K1hLHZrQjzdwG9uWgNkGXs4tBNVLE3JAzvNLtwJBt3zDsN&quot;,<br>            &#123;<br>            &quot;commitment&quot;: &quot;finalized&quot;,<br>            &quot;enableReceivedNotification&quot;: false<br>            &#125;<br>        ]<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里。我们再次发起一笔转账交易：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs solidity">solana transfer --allow-unfunded-recipient CZmVK1DymrSVWHiQCGXx6VG5zgHVrh5J1P514jHKRDxA 0.01<br><br>    Signature: BfQAbgqQZMfsxFHwh6Hve8yGb843QfZcYtD2j2nN3K1hLHZrQjzdwG9uWgNkGXs4tBNVLE3JAzvNLtwJBt3zDsN<br></code></pre></td></tr></table></figure><p>然后在另外一个终端，迅速建立wscat连接，并订阅该事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity">wscat -c wss://api.testnet.solana.com<br>    Connected (press CTRL+C to quit)<br>    &gt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;method&quot;:&quot;signatureSubscribe&quot;,&quot;params&quot;:[&quot;BfQAbgqQZMfsxFHwh6Hve8yGb843QfZcYtD2j2nN3K1hLHZrQjzdwG9uWgNkGXs4tBNVLE3JAzvNLtwJBt3zDsN&quot;,&#123;&quot;commitment&quot;:&quot;finalized&quot;,&quot;enableReceivedNotification&quot;:false&#125;]&#125;<br>    &lt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:3285176,&quot;id&quot;:1&#125;<br>    &lt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;signatureNotification&quot;,&quot;params&quot;:&#123;&quot;result&quot;:&#123;&quot;context&quot;:&#123;&quot;slot&quot;:209127740&#125;,&quot;value&quot;:&#123;&quot;err&quot;:null&#125;&#125;,&quot;subscription&quot;:3285176&#125;&#125;<br></code></pre></td></tr></table></figure><p>可以看到。当到达”finalized”状态时，通知我们，该交易已经成功，没有出错。</p><h2 id="2-4-课后练习"><a href="#2-4-课后练习" class="headerlink" title="2.4 课后练习"></a>2.4 课后练习</h2><p>通过curl和wscat命令行来模拟一个监视钱包动作。提示：</p><ul><li>创建一个新账号</li><li>实时展示余额变化</li><li>列出已知SPL-Token的余额</li><li>实时展示SPL-Token余额变化</li></ul><h3 id="1-创建账号"><a href="#1-创建账号" class="headerlink" title="1. 创建账号"></a>1. 创建账号</h3><ul><li><strong>SOL账号：</strong> Czorr4y9oFvE3VdfCLVFuKDYxaNUG1iyQomR7kMZUuzi</li><li><strong>SPL-Token (Mint Account):</strong> 7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9</li><li><strong>Token Account:</strong> EZhhUANUMKsRhRMArczio1kLc9axefTUAh5xofGX35AK</li></ul><ol><li>创建一个新账号:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">solana-keygen new --force // 得到SOL账号公钥：Czorr4y9oFvE3VdfCLVFuKDYxaNUG1iyQomR7kMZUuzi<br></code></pre></td></tr></table></figure><ol start="2"><li>用 mint account 创建 Token</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">spl-token create-token<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs solidity">Creating token 7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9 under program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA<br><br>Address:  7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9 // 得到 SPL-Token (Mint Account), Token地址<br>Decimals:  9 // 精度: 9<br><br>Signature: 5QRdzn59ig3j3qjEazteDR2zoCLUWoCWdbFc7iQTd68esfdV9je3fE2We3Ms7NUGfBt6kapCj7oBAr1kbiTskSmz<br></code></pre></td></tr></table></figure><ol start="3"><li>创建 Token Account</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">spl-token create-account 7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs solidity">Creating account EZhhUANUMKsRhRMArczio1kLc9axefTUAh5xofGX35AK // 调用ATA合约，并创建ATA账号, Token Account.<br><br>Signature: 59yBhJzC2HDkF61AhgaXcvVGiw5CjdnNpFyxvCzbqQrCjGCVKotNvCMaRQooJkxmu6ypJ9P7AZDiKxYex7pvBZKq<br></code></pre></td></tr></table></figure><h3 id="2-订阅SOL余额变化"><a href="#2-订阅SOL余额变化" class="headerlink" title="2. 订阅SOL余额变化"></a>2. 订阅SOL余额变化</h3><p>这里的Account就是每个地址的Account元数据。主要变化的就是data部分和lamports部分。 比如我们要订阅我们的账号余额的变化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&#123;<br>        &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>        &quot;id&quot;: 1,<br>        &quot;method&quot;: &quot;accountSubscribe&quot;,<br>        &quot;params&quot;: [<br>            &quot;CnjrCefFBHmWnKcwH5T8DFUQuVEmUJwfBL3Goqj6YhKw&quot;,<br>            &#123;<br>            &quot;encoding&quot;: &quot;jsonParsed&quot;,<br>            &quot;commitment&quot;: &quot;finalized&quot;<br>            &#125;<br>        ]<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里订阅对账号的变化的事件，我们通过wscat来模拟：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">wscat -c wss://api.devnet.solana.com<br>    Connected (press CTRL+C to quit)<br>    &gt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;method&quot;:&quot;accountSubscribe&quot;,&quot;params&quot;:[&quot;EZhhUANUMKsRhRMArczio1kLc9axefTUAh5xofGX35AK&quot;,&#123;&quot;encoding&quot;:&quot;jsonParsed&quot;,&quot;commitment&quot;:&quot;finalized&quot;&#125;]&#125;<br>    &lt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:3283925,&quot;id&quot;:1&#125;<br></code></pre></td></tr></table></figure><p>然后我们在另外一个终端里面进行转账：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">solana transfer --allow-unfunded-recipient CZmVK1DymrSVWHiQCGXx6VG5zgHVrh5J1P514jHKRDxA 0.01<br></code></pre></td></tr></table></figure><p>接着我们注意观察上面的wscat:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">Connected (press CTRL+C to quit)<br>    &gt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;method&quot;:&quot;accountSubscribe&quot;,&quot;params&quot;:[&quot;CnjrCefFBHmWnKcwH5T8DFUQuVEmUJwfBL3Goqj6YhKw&quot;,&#123;&quot;encoding&quot;:&quot;jsonParsed&quot;,&quot;commitment&quot;:&quot;finalized&quot;&#125;]&#125;<br>    &lt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:3283925,&quot;id&quot;:1&#125;<br>    &lt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;accountNotification&quot;,&quot;params&quot;:&#123;&quot;result&quot;:&#123;&quot;context&quot;:&#123;&quot;slot&quot;:209127027&#125;,&quot;value&quot;:&#123;&quot;lamports&quot;:989995000,&quot;data&quot;:[&quot;&quot;,&quot;base64&quot;],&quot;owner&quot;:&quot;11111111111111111111111111111111&quot;,&quot;executable&quot;:false,&quot;rentEpoch&quot;:0,&quot;space&quot;:0&#125;&#125;,&quot;subscription&quot;:3283925&#125;&#125;<br></code></pre></td></tr></table></figure><p>会发现，一段时间后，也就是到达了 “finalized”状态后，就会将修改过后的Account信息推送过来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&#123;<br>        &quot;lamports&quot;: 989995000,<br>        &quot;data&quot;: [<br>            &quot;&quot;,<br>            &quot;base64&quot;<br>        ],<br>        &quot;owner&quot;: &quot;11111111111111111111111111111111&quot;,<br>        &quot;executable&quot;: false,<br>        &quot;rentEpoch&quot;: 0,<br>        &quot;space&quot;: 0<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到这里余额发生了变化</p><h3 id="3-展示SPL-Token变化"><a href="#3-展示SPL-Token变化" class="headerlink" title="3. 展示SPL-Token变化"></a>3. 展示SPL-Token变化</h3><p>早期的钱包是通过官方的 <a href="https://github.com/solana-labs/token-list">token-list</a> 来获得 已知的SPL-Token，现在则通过Metaplex的FT标准查询。除此之外还可以通过订阅Token合约管理的账户变化 来判断是否有Owner为自己的 Token Account被创建。</p><p>这里我们假设第一种情况，钱包只维护知名token或者用户自己添加的Token，比如上面的 “7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9”</p><p>我们首先获取这个SPL-Token下我们有多少 Token Account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs solidity">curl  https://api.devnet.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;<br>        &#123;<br>            &quot;jsonrpc&quot;: &quot;2.0&quot;,<br>            &quot;id&quot;: 1,<br>            &quot;method&quot;: &quot;getTokenAccountsByOwner&quot;,<br>            &quot;params&quot;: [<br>            &quot;Czorr4y9oFvE3VdfCLVFuKDYxaNUG1iyQomR7kMZUuzi&quot;,<br>            &#123;<br>                &quot;mint&quot;: &quot;7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9&quot;<br>            &#125;,<br>            &#123;<br>                &quot;encoding&quot;: &quot;jsonParsed&quot;<br>            &#125;<br>            ]<br>        &#125;<br>    &#x27;<br></code></pre></td></tr></table></figure><p>这里根据结果发现只有一个 “EZhhUANUMKsRhRMArczio1kLc9axefTUAh5xofGX35AK”</p><p>那么我们只需要按照教程里面，订阅这个Account的变化就可以了。如果有多个，那么就订阅多个。 在重复对其他 SPL-Token做同样操作，既可以完成SPL-Token钱包的功能。</p><p>首先建立websocket链接，并发起对这个Account的订阅：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs solidity">wscat -c wscat -c wss://api.devnet.solana.com  --proxy=http://127.0.0.1:1087<br>Connected (press CTRL+C to quit)<br>&gt;  &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;method&quot;:&quot;accountSubscribe&quot;,&quot;params&quot;:[&quot;EZhhUANUMKsRhRMArczio1kLc9axefTUAh5xofGX35AK&quot;,&#123;&quot;encoding&quot;:&quot;jsonParsed&quot;,&quot;commitment&quot;:&quot;finalized&quot;&#125;]&#125;<br></code></pre></td></tr></table></figure><p>然后再另一个终端，用”spl-token”命令行来进行转账:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs solidity">spl-token transfer --fund-recipient  7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9 1 BBy1K96Y3bohNeiZTHuQyB53LcfZv6NWCSWqQp89TiVu<br>Transfer 1 tokens<br>  Sender: EZhhUANUMKsRhRMArczio1kLc9axefTUAh5xofGX35AK<br>  Recipient: BBy1K96Y3bohNeiZTHuQyB53LcfZv6NWCSWqQp89TiVu<br>  Recipient associated token account: H1jfKknnnyfFGYPVRd4ZHwUbXLF4PbFSWSH6wMJq6EK9<br><br>Signature: 3paamDSKFk5depKufcDjmJ8wc3eXte3qcgtitFu4TyDi8z9GTXMrLGEgPHgQMnAzFBXYoWxyF5JFzA54Fjvi2ZUK<br></code></pre></td></tr></table></figure><p>接着我们就可以在前面的监听中收到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&lt; &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;accountNotification&quot;,&quot;params&quot;:&#123;&quot;result&quot;:&#123;&quot;context&quot;:&#123;&quot;slot&quot;:236334118&#125;,&quot;value&quot;:&#123;&quot;lamports&quot;:2039280,&quot;data&quot;:&#123;&quot;program&quot;:&quot;spl-token&quot;,&quot;parsed&quot;:&#123;&quot;info&quot;:&#123;&quot;isNative&quot;:false,&quot;mint&quot;:&quot;7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9&quot;,&quot;owner&quot;:&quot;Czorr4y9oFvE3VdfCLVFuKDYxaNUG1iyQomR7kMZUuzi&quot;,&quot;state&quot;:&quot;initialized&quot;,&quot;tokenAmount&quot;:&#123;&quot;amount&quot;:&quot;92000000000&quot;,&quot;decimals&quot;:9,&quot;uiAmount&quot;:92.0,&quot;uiAmountString&quot;:&quot;92&quot;&#125;&#125;,&quot;type&quot;:&quot;account&quot;&#125;,&quot;space&quot;:165&#125;,&quot;owner&quot;:&quot;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&quot;,&quot;executable&quot;:false,&quot;rentEpoch&quot;:0,&quot;space&quot;:165&#125;&#125;,&quot;subscription&quot;:18067841&#125;&#125;<br></code></pre></td></tr></table></figure><p>可以看到当前余额为92了。我们在用”balance”确认下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs solidity">spl-token balance 7vtXvye2ECB1T5Se8E1KebNfmV7t4VkaULDjf2v1xpA9<br>92<br></code></pre></td></tr></table></figure><h1 id="03-与Solana合约交互"><a href="#03-与Solana合约交互" class="headerlink" title="03. 与Solana合约交互"></a><u>03. 与Solana合约交互</u></h1><h2 id="3-1-Solana的Web3-js"><a href="#3-1-Solana的Web3-js" class="headerlink" title="3.1 Solana的Web3.js"></a>3.1 Solana的Web3.js</h2><h2 id="3-2-与钱包交互"><a href="#3-2-与钱包交互" class="headerlink" title="3.2 与钱包交互"></a>3.2 与钱包交互</h2><h2 id="3-3-合约调用"><a href="#3-3-合约调用" class="headerlink" title="3.3 合约调用"></a>3.3 合约调用</h2><h2 id="3-4-课后练习"><a href="#3-4-课后练习" class="headerlink" title="3.4 课后练习"></a>3.4 课后练习</h2>]]></content>
    
    
    <categories>
      
      <category>Web3.0</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web3.0</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>投资尽职调查｜Investment due diligence</title>
    <link href="/2023/08/08/InvestmentDueDiligence/"/>
    <url>/2023/08/08/InvestmentDueDiligence/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><p><img src="https://pic2.zhimg.com/v2-4c9a5b6b416112f0dddbeaaf358ee4c1_r.jpg"></p><p>投资是一个兼具“科学性”与“艺术性”的行业。人们往往关注其”艺术性”而忽略其”科学性”。一个优秀的投资行业工作者应该有一套科学而实用的工作方法，从而能更快地做出正确的决策。</p><hr><h1 id="01-Investment-logic"><a href="#01-Investment-logic" class="headerlink" title="01. Investment logic"></a>01. Investment logic</h1><blockquote><p>投资如何决策、如何对决策影响因素进行尽调。</p></blockquote><ul><li>从投资整体的角度出发，将单一项目的投资决策影响因素概括为五项: 价值、估值、退出、风险、策略。</li><li>从尽调逻辑出发，阐述了尽调的含义与目标并重点分析了不同类型尽调之间的逻辑关系，并提出了投资应该实现“标准化”的观点。</li></ul><h2 id="1-1-Investment-decisions"><a href="#1-1-Investment-decisions" class="headerlink" title="1.1 Investment decisions"></a>1.1 Investment decisions</h2><h3 id="投资的-Purpose"><a href="#投资的-Purpose" class="headerlink" title="投资的 Purpose"></a>投资的 Purpose</h3><ul><li>国家投资是为了 national strategic layout</li><li>地方政府投资是为了 foster new industries</li><li>上市公司投资并购是为了 business collaboration</li><li>投资机构投资是为了 financial return</li><li>职业投资人就是 make more money for investors.</li></ul><h3 id="投资如何-pursue-Financial-return"><a href="#投资如何-pursue-Financial-return" class="headerlink" title="投资如何 pursue Financial return"></a>投资如何 pursue Financial return</h3><p>股权投资获取财务回报的方式有两种: 企业分红(Corporate dividends) 和 估值差(valuation differentials)。</p><blockquote><p>投资决策的逻辑是基于<strong>价值</strong>和<strong>估值</strong>的比较。</p><ul><li>Value 是指 <strong>投资对象的内在价值</strong>，也就是其未来能够产生的现金流的折现值。</li><li>Estimated value 是指 <strong>投资对象的市场价值</strong>，也就是其在市场上的交易价格。</li></ul><p>投资者需要通过不同的方法和模型，计算出投资对象的价值和估值，并比较二者的差异，从而确定投资机会和风险。</p></blockquote><p><strong>估值差才是企业获取财务回报的重要且高效的方式:</strong></p><ul><li>假设甲公司2020年收入为1 000万元，净利润100万元。投资人A按照5倍市销率给予其估值5 000万元，投资 了1 000万元，获得了20%股权。2021年公司收入增长到2 000万 元，净利润200万元。投资人B按照5倍市销率给其估值1亿元，并 以2 000万元的价格买走了A全部的股权。</li><li>如果按照 <strong>分红(dividend)</strong> 方式，A每年只能获得40万元(200×20%)的 分红，意味着如果公司业绩不再增长，A需要25年才能收回成 本。而通过估值差，A在1年内就实现了翻倍的收益。这就是投资人赚钱的原理。</li><li>相对于分红而言，估值差是投资追求回报的主要方式，而业 绩在增长就意味着估值会增长。不同行业的估值倍数相对固定， 所以估值增长可以视同只跟业绩增长相关(当然也会有类似“戴 维斯双击”的情况，成长性高的企业，可以获得更高的估值倍数，此种情况暂且不论)。这里可以得出一个结论: <strong>投资回报取决于企业的未来成长性，成长性判断是投资决策的核心因素</strong>。这 是本书的核心观点之一。</li></ul><h3 id="投资决策要考虑哪些-Factors"><a href="#投资决策要考虑哪些-Factors" class="headerlink" title="投资决策要考虑哪些 Factors"></a>投资决策要考虑哪些 Factors</h3><ol><li><strong>价值 (Value):</strong> <u>价值意味着成长性</u>，成长性是投资的前提和基础。</li><li><strong>估值 (Estimated value):</strong> 估值跟成长性直接相关。<u>估值高意味着企业未来有高成长性</u>，如果成长性不够，就不能覆盖高估值的投资成本，也就无法实现投资的目的。</li><li><strong>退出变现 (Exit):</strong> 在一级市场中，缺乏的不是估值低于价值的标的，而是<u>流动性</u>。如果无法退出项目，就意味着投资无法变现，账面上的浮盈再高也没有意义。</li><li><strong>风险 (Risk):</strong> 风险不仅意味着收益的波动，还意味着企业经营的安全性。不同类型的风险或者与成长性相关，或者与<u>持续经营能力相关</u>，需要结合估值、退出方案来综合分析其对投资决策的影响。</li><li><strong>策略 (Strategy):</strong> 每家投资机构都有自己的策略。<u>策略会直接影响投资决策</u>，而策略的形成是投资方向、投资领域、风险偏好、基金规模、基金期限、发展阶段、团队配置等多种因素综合决定的结果。</li></ol><h2 id="1-2-Growth-is-the-best-measure-of-enterprise-value"><a href="#1-2-Growth-is-the-best-measure-of-enterprise-value" class="headerlink" title="1.2 Growth is the best measure of enterprise value"></a>1.2 Growth is the best measure of enterprise value</h2><p>什么样的企业是投资意义上的好企业？成长性是衡量企业价值的最佳指标。有成长性的企业就是好企业。如何判断企业的成长性？成长性应该从下列几个维度去分析。</p><h3 id="概念维度-Conceptual-dimension"><a href="#概念维度-Conceptual-dimension" class="headerlink" title="概念维度 (Conceptual dimension)"></a>概念维度 (Conceptual dimension)</h3><p>成长性包含两层含义: </p><ul><li>财务意义上的成长性，主要体现为营业收入的增长。财务上的成长性是估值的依据，是分析的目的。</li><li>业务意义上的成长性，主要体现为订单的增长。业务上的成长性是企业发展真正的动因，是分析的核心。判断企业成长性需要将二者结合:以财务增长来验证业务，以业务增长来预测财务。</li></ul><h3 id="时间维度-Time-dimension"><a href="#时间维度-Time-dimension" class="headerlink" title="时间维度 (Time dimension)"></a>时间维度 (Time dimension)</h3><p>分析企业的成长性，既要看历史，也要看未来。历史数据主要用来验证企业的成长速度与质量，进而验证企业的核心业务与成长驱动力。虽然过去的增长并不代表未来的增长，但企业的核心能力是未来持续发展的保证。</p><h3 id="尽调维度-Due-diligence-dimension"><a href="#尽调维度-Due-diligence-dimension" class="headerlink" title="尽调维度 (Due diligence dimension)"></a>尽调维度 (Due diligence dimension)</h3><p>成长性分析的本质是一个对业务不断加深认知的过程，对<strong>业务的认知可以分成三个阶段</strong>，分别对应了不同的尽调方法。</p><ol><li><strong>业务抽象(业务尽调):</strong> 根据<strong>访谈、产品演示</strong>等方式获取对企业业务的<strong>感性认知</strong>。该阶段仅有定性的认识，<strong>无法做定量分析</strong>。</li><li><strong>业务具象(财务尽调):</strong> 根据财务数据<strong>对业务做定量分析</strong>，能够在一定程度上<strong>验证</strong>企业“口中的业务”与“真实业务” 情况之间的<strong>差异</strong>。</li><li><strong>业务实质(行业尽调):</strong> 在定性与定量分析基础之上，<strong>做行业对比分析</strong>，明确目标企业在行业中的<strong>实际价值与地位</strong>。</li></ol><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Screenshot%202023-08-07%20at%2010.08.36.png"></p><h2 id="1-3-合理估值-Reasonable-Valuation"><a href="#1-3-合理估值-Reasonable-Valuation" class="headerlink" title="1.3 合理估值 Reasonable Valuation"></a>1.3 合理估值 Reasonable Valuation</h2><p>对于投资人来说，需要对估值的高低进行权衡，一味地 “追风口”或者“捡垃圾”都是不可取的。</p><ul><li>投资估值过低 &#x3D; 导致流动性低，退出困难</li><li>投资估值过高 &#x3D; 导致无法实现预期盈利目标</li></ul><p>实践中<strong>估值是询价</strong>的结果，而不是依靠公式计算得来的。通常情况下，<strong>企业根据*<u>相对估值法报价</u>*，投资机构再根据<u><em>尽调情况调整报价</em></u>，最终得出一个双方都能接受的估值结果。</strong></p><p>在估值谈判过程中，投融资双方的利益诉求是相悖的: <strong>投资人倾向于将估值压低，而企业方倾向于将估值做高</strong>。合理的估值应该兼顾二者利益，其判断标准是: <strong>基于该估值，投资人能获得合理的投资回报</strong>。</p><h3 id="合理投资回报率-return"><a href="#合理投资回报率-return" class="headerlink" title="合理投资回报率 (return)"></a>合理投资回报率 (return)</h3><p><strong>高收益 &#x3D; 高风险</strong>。不论何种类型的投资都应该有<strong>投资回报率目标</strong>，比如 债权投资(creditor investor)，利息是固定的，只要能<strong>到期还本付息，投资回报率 (return) 目标就达成了</strong>。确定股权投资的合理投资回报率应该考虑以下两点：</p><ul><li><strong>机会成本的风险回报率：</strong>股权投资的合理回报率至少应该达到**年化收益率为30%**。</li><li><strong>风险收益配比：</strong>在天使轮和Pre-IPO之间，根据不同的投资阶段和期限决定合理回报率范围。<ul><li><strong>Pre- IPO 年化收益率 &#x3D; 10% - 30%:</strong> 稳健，风险最低，则回报率也应该最低。以标准Pre-IPO项目投资(3年退出)作为参考， 以此作为股权投资收益率的下限，即年化收益率为30%;</li><li><strong>非Pre- IPO 年化收益率 &gt; 20% - 30%:</strong> 上限可以参考早期天使投资。成功率 &#x3D; 5%，平均投资期限 &#x3D; 8年。如果基金的整体投资回报率目标想要维持**年化收益率为30%<strong>，意味着成功项目的</strong>回报倍数应该为163倍，对应IRR为89%**（假设一只天使基金共投资20个项目， 按照5%成功率，即只有1个项目成功。失败项目的残值均为0，存 续期为8年，所有项目均为第1年年初投资，第8年末退出）。这个可以视为天使投资的合理投资回报率。</li></ul></li></ul><h3 id="确定合理估值-determine"><a href="#确定合理估值-determine" class="headerlink" title="确定合理估值 (determine)"></a>确定合理估值 (determine)</h3><p>在实现合理投资回报率的情况下，确定估值。我们先来看看影响估值的因素有哪些。这里采用的是相对估值法，计算方法具体如下：</p><ul><li>投资时点: <ul><li>投资估值 &#x3D; 估值倍数(投资) × 历史业绩</li><li>预期投资回报倍数 &#x3D; 估值倍数(投资) × 历史业绩 × 成长性预期&#x2F;投资估值</li></ul></li><li>退出时点:<ul><li>实际投资回报倍数 &#x3D; 估值倍数(退出) × 历史业绩 × 实际成长性&#x2F;投资估值</li></ul></li></ul><p>根据公式可以发现，影响投资回报倍数达成的因素有两点:</p><h4 id="成长性预期与实际成长性"><a href="#成长性预期与实际成长性" class="headerlink" title="成长性预期与实际成长性"></a>成长性预期与实际成长性</h4><ul><li>成长性预期 &#x3D; 在投资时点上管理层对企业未来增长的预测，它会影响投资估值和退出估值。成长性预期过高，会导致投资时估值过高，而退出时估值过低，从而降低投资回报率。这也是为什么高估值的企业往往难以实现预期的增长，甚至出现估值崩溃的原因。</li><li>投资时的成长性预期是判断企业价值的关键，它应该与未来的实际成长性相匹配，才能实现投资回报率目标。投资人在尽调时应该考虑各种影响因素，与管理层协商，将成长性预期控制在合理水平。</li></ul><h4 id="投资时点的估值倍数与退出时点的估值倍数"><a href="#投资时点的估值倍数与退出时点的估值倍数" class="headerlink" title="投资时点的估值倍数与退出时点的估值倍数"></a>投资时点的估值倍数与退出时点的估值倍数</h4><ul><li>首先，估值倍数跟行业因素直接相关。通常来说，行业天花板越高，市场规模增速越快，估值倍数越高。通常以可比上市公司或者同行业企业最近融资估值的数据作为参考。</li><li>其次，估值倍数往往跟企业成长性预期正相关。企业成长性预期越高，则估值倍数越高。</li><li>最后，估值倍数也会受到项目供求关系等因素影响。正如前文所述，估值是询价结果，并无计算公式，亦无对错之分，最终取决于双方的谈判结果。</li></ul><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>投资人在确定目标企业的合理估值时的步骤如下:</p><ol><li>根据项目的风险因素确定其合理投资回报率目标;</li><li>找到目标企业细分同行业的相对权威的估值方法，进行对比分析，以此修正企业估值倍数;</li><li>根据尽调情况修正管理层盈利预测中的成长性预期;</li><li>根据前述情况确定投资估值区间。</li></ol><p>其中，成长性预期的修正是合理估值的核心与关键，也是难点所在。</p><p>此外，虽然历史业绩不影响投资回报率目标的达成，但要注意根据尽调情况来修正目标企业的历史业绩，以避免出现为粉饰历史业绩而透支未来业绩的情况。</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>A公司成立于2015年，2020年净利润为1 500 万元。公司实际控制人承诺:2021年、2022年和2023年净利 润分别不低于1 800万元、2 160万元、2 600万元; 公司投后估值不超过2.16亿元，该估值是否合理呢?</p><ul><li>不合理。因为公司在业绩承诺的最后一年仍达不到上市要求，因此该项目不能被视为Pre-IPO项目，<strong>那么非Pre-IPO投资回报率目标应该高于30%;</strong> 公司预计2021—2023年的年均收入增速仅为20%， 意味着在估值倍数不变的情况下，对应的投资回报率仅为20%， 这明显低于投资回报率目标。因此，公司给出的估值明显过高。</li><li>一旦按照上述估值投资会出现哪些后果呢？<ul><li>成长性不佳 &#x3D; 目标企业竞争力不足，随着行业发展成熟，增速会放缓。如果实际成长性达不到预期，投资到期时估值倍数可能下降甚至出现估值倒挂情况。更糟糕的是，吸引力下降可能导致后续融资困难，企业缺乏资金发展，形成恶性循环。</li><li>对投资人而言，如果企业估值一直不涨，就无法退出投资，没有退出约定或其他风控措施，相当于给企业一笔无息贷款，企业只要不清算就可以永远使用。这无疑是非常糟糕的一种状况。</li></ul></li></ul><h2 id="1-4-退出变现-Exit"><a href="#1-4-退出变现-Exit" class="headerlink" title="1.4 退出变现 (Exit)"></a>1.4 退出变现 (Exit)</h2><p>退出渠道主要可以分为以下三种:</p><h4 id="IPO上市"><a href="#IPO上市" class="headerlink" title="IPO上市"></a>IPO上市</h4><ul><li><strong>从渠道畅通度来看，IPO退出空间有限。</strong>我国每年境内外IPO的企业数量约为200<del>500家，且受政策影响较大，例如2013年只有2家企业上市。粗略估算，正常情况下**每年只有2%</del>5%的企业能通过IPO方式退出，无法满足所有股权投资项目的退出需求**。</li></ul><h4 id="并购-Mergers-and-Acquisitions-M-amp-A"><a href="#并购-Mergers-and-Acquisitions-M-amp-A" class="headerlink" title="并购 Mergers and Acquisitions (M&amp;A)"></a>并购 Mergers and Acquisitions (M&amp;A)</h4><ul><li><strong>从渠道通畅度来说，并购退出通道的空间相比于IPO大很多</strong>，近年来年均并购案例在2 000例左右。但实际上股权投资真正通过并购方式退出的并不多。最近5年私募基金投资项目以并购退出的数量每年约为600家，数量比IPO略多，占比约6%。</li></ul><h4 id="对外转让-External-transfer"><a href="#对外转让-External-transfer" class="headerlink" title="对外转让 External transfer"></a>对外转让 External transfer</h4><ul><li>相对于前述的退出方式，<strong>对外转让相对来说更市场化，既能兼顾收益，又不受政策调控的影响，适合消化大量项目</strong>。比如， 近年来S基金在退出渠道中扮演着越来越重要的角色。但遗憾的是，由于信息不对称以及信任机制等问题，这类退出方式仍处在发展早期，难以有效解决投资退出问题。</li></ul><p>综上，现有渠道仅能满足不到20%的项目退出需求，大量的项目面临退出无门的窘境。这要求投资人必须重视退出，提前谋划才有可能抓住为数不多的机会。</p><h3 id="价值-估值-退出-缺一不可"><a href="#价值-估值-退出-缺一不可" class="headerlink" title="价值, 估值, 退出 缺一不可"></a>价值, 估值, 退出 缺一不可</h3><ul><li><strong>“退出”</strong> &#x3D; 投资兑现的结果</li><li><strong>“价值”</strong> 和 <strong>“估值”</strong> &#x3D; 投资兑现的原因</li></ul><p>在谈论”退出”时，投资人关注的主要是以下几个方面：</p><ol><li>成长价值：投资人关注企业的成长潜力和业绩预测，衡量投资的回报是否有可能实现。</li><li>估值：投资人关注投资的回报和风险之间的权衡，评估投资的估值是否合理，是否能够实现预期回报。</li><li>退出策略：投资人关注投资项目的退出时间和方式，规划和执行退出策略，确保投资资金的安全和退出目标的实现。<br>退出可以被视为预期回报的实现方式，也可以被理解为一种应急方案。它既涉及基金策略目标的实现，也涉及投资资金的安全。退出的衡量标准是简单的是或否，而不是好与坏。<br>退出方案不关注企业的成长问题，也不关心具体的回报表现，而是关注实际操作。例如，投资到期时企业是否能够满足上市条件，这是成长价值需要考虑的问题，而退出讨论的是无法IPO时的后续应对措施；又如，将并购作为退出渠道时预期的投资回报和面临的风险，这是估值需要确定的问题，而退出只关注企业是否制定了并购计划并成功地执行了任务。</li></ol><h3 id="退出所要考虑的-factors"><a href="#退出所要考虑的-factors" class="headerlink" title="退出所要考虑的 factors"></a>退出所要考虑的 factors</h3><ol><li><strong>符合基金策略：</strong>退出方案应与基金整体投资策略相一致，考虑基金的存续期限、预期回报率以及风险投资金额的配比等因素。退出方案要与基金的大目标相符，避免影响基金管理人下期基金的募集或投资回报率。</li><li><strong>明确的退出渠道：</strong>根据项目所处阶段确定退出渠道，如早期项目可能以对外转让或并购为退出方式。需要考虑退出渠道是否被市场接受、是否符合投资机构的需求，并评估标的企业是否符合并购要求。</li><li><strong>覆盖风险：</strong>按时退出是首要任务，以保证基金策略目标的实现。退出方案应考虑风险控制措施，例如对赌条款，可以约束创始人的预测与承诺，保证其全力经营企业。然而，对赌条款并不能完全保证投资本金的安全，投资人需要及时清理未达预期退出目标的企业。</li></ol><h3 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h3><p>虽然能否实现退出归根结底还是 <strong>“成长性”</strong> 的问题，因为一家成长性良好的企业不缺乏投资人投资，但投资人经验再丰富，也难免会有看走眼的时候，而各种意外也可能导致项目出现无法预料的状况。合理的退出方案能保证在遇到问题时有一个合理的善后方案，避免各方陷入僵局。因此，退出方案应该追求全面性，务求把退出中可能遇到的各种问题和风险及其应对措施都纳入考虑范围，以实现全面覆盖。</p><h2 id="1-5-风险-Risk"><a href="#1-5-风险-Risk" class="headerlink" title="1.5 风险 (Risk)"></a>1.5 风险 (Risk)</h2><p>投资风险 &#x3D; 对目标企业的业务与经营可能构成不利影响的事项。投资风险的用途在于:</p><ul><li>第一，作为投资决策的考量因素之一;</li><li>第二，指导投后管理。事项作为投资风险提示的前提需要满足以下条件:<ul><li><strong>相关性:</strong> 风险要结合企业具体情况，跟<strong>企业的业务相关</strong>;</li><li><strong>可能性:</strong> 风险要有基本的证据支持，达到合理怀疑的标准;</li><li><strong>不确定性:</strong> 风险是在未来可能发生的事项，其发生与否是不确定的;</li><li><strong>业务影响&#x2F;存续影响&#x2F;投资决策影响:</strong> 风险是能对企业的业务与经营构成影响，或者对投资决策构成影响的事项。</li></ul></li></ul><p>举个例子，如果企业一直偷税漏税，其行为可能导致企业被处罚甚至被吊销营业执照，那就对企业的经营造成了影响，符合风险的构成条件; 此外，诸如财务处理不规范导致报表收入虚增等的情形，可能误导投资人做出错误投资决策的，也符合风险的构成条件。</p><h3 id="投资风险描述的误区"><a href="#投资风险描述的误区" class="headerlink" title="投资风险描述的误区"></a>投资风险描述的误区</h3><p>实践中，由于有不少投资尽调报告是参考投行IPO招股说明书的“风险因素”章节来撰写的，因此这里先以招股说明书为例来说明投资风险描述的误区。</p><ul><li><strong>普适性风险：</strong>不区分行业和企业的<strong>通用风险</strong>，没有实际价值和应对措施，应该避免在风险提示中出现<ul><li>eg. <u>宏观经济波动风险：</u>消费者未来的收入存在不确定性。</li></ul></li><li><strong>无病呻吟式风险：</strong>指<strong>财务层面的正常现象</strong>，对<strong>业务没有实际影响</strong>，也不应该作为风险提示<ul><li>eg. <u>应收账款发生坏账的风险：</u>正常情况下，收入增长，应收账款和坏账同比例增长这是合理的现象。</li><li>eg. <u>净资产收益率下滑的风险:</u> 本次发行后，企业净资产规模将大幅扩张，由于募集资金用于投资项目，而项目需要一段时间才能产生收益，所以企业的净资产收益率会暂时降低。）。</li><li>风险提示应该关注<strong>真正对业务有影响的事项</strong>（应收账款为例，随着业务增长，风险提示应该关注的是<strong>企业在账期管理策略上是否有变化</strong>、是否为了保增长而放宽账期、账龄结构是否恶化等情况出现）。</li></ul></li><li><strong>确定性风险：</strong>未来<u>必定会发生的事项</u>，不符合风险的定义，只需要评估影响，不用作为风险提示（eg. 税收优惠变化风险）。</li><li><strong>无迹象风险：</strong><u>没有事实依据证明其可能发生的事项</u>，也不应该作为风险提示。</li></ul><h3 id="投资风险的分类"><a href="#投资风险的分类" class="headerlink" title="投资风险的分类"></a>投资风险的分类</h3><p>在投资尽调的实践中，投资风险经常按照下列口径分类:</p><ul><li><strong>法律风险:</strong> 股权代持、股东特殊权利、股权集中、股权质押、出资未实缴等风险;</li><li><strong>财务风险:</strong> 内控瑕疵风险、现金流风险等;</li><li><strong>业务风险:</strong> 经营合规性风险、客户&#x2F;供应商&#x2F;经销商依赖风 险、同业竞争风险等;</li><li><strong>行业风险:</strong> 行业竞争风险、监管政策风险等。</li></ul><p>上述划分方式的问题有两点：</p><ul><li>有些风险是多种因素的混合结果，无法界定具体类型;</li><li>在尽调的具体分工方面存在模糊地带，可能导致重复或遗漏的风险。</li></ul><p>基于上述原因，提出了一个新的风险分类方法，将风险分为成长性风险和持续经营风险。（举个例子，把企业比喻成一名运动员：）</p><ul><li><strong>成长性风险：</strong>对企业的成长性构成直接影响的风险，一般是业务、财务、行业尽调关注的内容;（其能否拿金牌，取决于运动能力和临场发挥，这是所谓的成长性风险）<ul><li>主要通过降低盈利预期和调整估值等方式来解决。</li></ul></li><li><strong>持续经营风险：</strong>对企业的经营存续构成直接影响的风险，一般是法律尽调关注的内容。（而其能否作为运动员在这个行业里持续工作，这取决于其身体健康水平和职业操守，这是所谓的持续经营风险。比如他可能患有先天性疾病，职业生涯随时可能结束; 他可能在服用禁药，一旦被发现将终生禁赛。持续经营风险虽然发生的概率较 小，但一旦发生会对企业的经营产生巨大影响。）<ul><li>持续经营风险的应对措施有在投资前解决风险和约定风险发生后的责任分担机制两种。</li></ul></li></ul><h4 id="成长性风险"><a href="#成长性风险" class="headerlink" title="成长性风险"></a>成长性风险</h4><blockquote><p>指可能对业务产生直接影响的事项，该风险一般只关乎<strong>企业的业务增速快慢</strong>，而不会对企业的经营存续能力构成影响。<br>此外，因为尽调操作所导致的可能影响投资决策判断的风险也归入成长性风险。<br>在尽调中，成长性风险分析应该由负责业务、行业和财务尽调的人员来完成。</p></blockquote><p>企业在成长性判断方面需要考虑的风险有：</p><ul><li><p><strong>业务风险：</strong>主要来自<u>产品、技术、商业模式</u>等方面。常见的业务风险包括：</p><ul><li>产品&#x2F;技术门槛较低风险→研发不确定性风险→估值高估风险：中早期项目的产品技术门槛较低，竞争门槛低，存在研发不确定性风险。相反，高门槛项目需要巨大的前期投入和较长的准备时间，其研发结果具有不确定性，给企业业务带来巨大风险，如原研药研发和芯片设计制造。如果企业成功地投入大量成本进行研发，并建立起高门槛商业模式，项目将具备稀缺性，但可能导致估值过高。</li><li>市场开拓风险→大客户依赖风险→跨区域、跨行业拓展风险：完成产品开发之后，中早期项目往往存在市场推广的问题。涉及市场策略、执行力和资源等方面的不确定性，可能导致推广效果不如预期。完成标杆性客户拓展后，企业可能面临大客户依赖风险，一旦失去大客户，收入将大幅减少，同时面临回款慢、现金流紧张和利润率下滑等风险。在特定区域或行业取得成功后，企业还需跨越式地拓展至不同区域和行业，但这种跨区域、跨行业的拓展会带来不达预期的风险。</li><li>供应商集中风险→供应链管理风险：当企业核心原材料仅依赖少数供应商时，一旦供应商停止供货，企业将无法继续生产。当下游需求分散时，企业对单一供应商的吸引力下降，导致供应商提供的价格优惠减少、货物供给优先级降低和结算账期缩短。同时，企业需要与更多供应商进行对接，增加了供应链管理的复杂性，给业务带来风险。</li></ul></li><li><p><strong>行业风险：</strong>在成长性判断方面，行业尽调的对象一般包括 <u>行业天花板、行业竞争格局、行业发展趋势</u>等。这些事项对企业成长性可能构成的影响可以归入行业风险。常见的行业风险如下:</p><ul><li>市场天花板风险→市场恶性竞争风险→市场格局确立风险→行业变化风险：新兴领域的市场需求不明确，市场规模小，行业发展缓慢，使得目标企业易受市场天花板质疑。随着行业趋势明确、商业模式验证、发展加速，竞争对手增多，行业竞争激烈，导致企业增速放缓、利润下滑，竞争力弱的企业面临淘汰风险。一旦市场洗牌、头部企业确立竞争壁垒，后进者面临劣势竞争。成为行业头部企业后，面临行业增速放缓和趋势变化，壁垒面临挑战的风险。</li></ul></li><li><p><strong>财务风险：</strong>从成长性角度看，财务在业务中通常充当业务结果的指标，而很少有财务反向影响业务的情况。尽调报告中提到的所谓财务风险往往只是财务会计层面的披露问题或尽调操作问题，对业务实际影响有限。例如，“收入确认不符合企业会计准则规定，可能存在调节收入的可能性；同时，缺乏足够的外部证据判断收入真实性和准确性；存在未签署合同即确认收入的情况，金额占比较大。”这类财务风险表述在实践中常见，说明目标企业的会计政策不符合要求，导致收入可能被高估。这是财务规范性和尽调问题。从财务规范性角度，不规范的收入确认可能意味着其他财务数据存在问题，财务真实性受到质疑。从尽调角度，该尽调未能真实反映财务情况，意味着企业财务状况可能比报表所示更差，这对投资决策和估值产生影响，才是真正的风险。</p></li><li><p><strong>尽调风险：</strong>在尽调中，受时间、人员和企业配合等因素的影响，尽调结果可能与实际情况存在差异。这种差异可能导致对企业未来成长性的预测偏差，进而导致投资决策错误。例如，报告指出：“财务尽职调查的局限性：我们未获取包括各期返利政策及计算表在内的财务资料，尽调存在潜在风险，但不影响本报告的结论。”这类风险需要向决策者重点说明。特别是在跟投项目中，仅依据领投方的尽调报告做出投资决策，存在较大尽调风险。因此，应充分评估风险因素并采取合理的风控措施。</p></li></ul><h4 id="持续经营风险"><a href="#持续经营风险" class="headerlink" title="持续经营风险"></a>持续经营风险</h4><blockquote><p>持续经营风险是指可能影响企业的持续经营能力的事项，一 旦发生可能导致企业无法经营。持续经营风险可以分为以下类型。</p></blockquote><ul><li><p><strong>团队风险：</strong>主要是指创始人、联合创始人、掌握关键技术的研 发技术人员等核心人员发生的变动与合作等风险，比如人员离职、被禁业、违法犯罪、内部纠纷等。由于上述人员所处位置较 为重要，所以一旦出现问题会对企业造成重大影响，甚至可能动摇企业根基。</p><ul><li>eg. 投资人未重视创始人关系问题，在投资后创始人关系恶化导致业务崩溃，投资人最终以低价退出。</li><li>eg. 投资人未预见创始人 (在国外某头部芯片企业从业多年，看到该芯片产品在国内巨大市场机会，遂离职回国创业，被原企业起诉窃取商业机密) 可能面临的法律风险，创始人被原企业起诉导致企业运营停滞，如果投资人能提前认知并采取相应措施，可规避此风险。</li></ul></li><li><p><strong>股权风险：</strong>股权是企业的核心资源，它关系到利益的分配、责任的承担，以及在企业中的控制权和表决权。适量的股权掌握在适格的 股东手中，股权才能最大限度地发挥其价值，否则，股权也有可能成为影响企业稳定运作的炸弹。</p><ul><li>eg. 某战略新兴产业企业引入一家P2P机构作为股东，后来P2P机构的下属资产被公安机关全部冻结，其中也包括该目标企业股权。为防止有人恶意转移资产，目标企业的银行 账户甚至一度被冻结。无法设立新企业，实际控制人高价出售股权，导致大部分投资人望而却步，企业增长潜力被耽误。</li></ul></li><li><p>业务合规风险：企业经营存在违法违规行为导致资质被撤销的风险，企业应该拥有正向价值观，投资人应该在发现风险时予以重视并谨慎决策，对行业政策和法规应该从成长性和风险角度进行分析，以提供投资决策的判断依据。</p><ul><li>eg. 某目标企业通过互联网爬虫技术抓取第三方求职网站中的人员简历数据，并向用工单位提供人才流失预警和简历修改查询等服务，但由于涉及侵犯用户隐私和违法买卖简历等问题触犯刑法，最终招致刑罚。</li></ul></li><li><p>重大财务风险：包括现金流风险、税务风险和内控风险，并提出了投资风险应对原则。在投资决策中，应该充分考虑风险因素并设计相应措施，如成长性风险可以作为企业成长性的抵销项；在投后管理中，投资机构需要根据前期制定的风险目标来定期跟踪并调整风控机制。</p></li></ul><h2 id="1-6-基金策略"><a href="#1-6-基金策略" class="headerlink" title="1.6 基金策略"></a>1.6 基金策略</h2><p>基金投资需要从宏观的角度出发，不仅仅是考虑单一项目的得失，而是要考虑基金的整体回报。在基金运作中，需要考虑诸多因素，如不同合伙人的诉求、政府引导基金的要求、市场化母基金的跟投要求、团队等。基金还需要考虑未来募资的事情，如已投资项目的退出收益率是否能满足潜在有限合伙人的要求，已投项目是否符合基金管理人的策略定位并体现专业聚焦的能力等。最后，基金管理人需要从全局和多方面兼顾的角度出发，而不是只考虑单一项目的得失。</p><h2 id="1-7-投资最重要的事"><a href="#1-7-投资最重要的事" class="headerlink" title="1.7 投资最重要的事"></a>1.7 投资最重要的事</h2><p>投资判断中并没有所谓最重要的事情，因为投资决策需要综合考虑多个方面的因素，而不是单一因素决定。投资逻辑的完整闭环是投资决策的核心要点，其中包括：</p><ul><li>成长性业务 + 成长性市场；</li><li>成长性 &gt; 估值对应成长性预期；</li><li>退出方案明确、可执行；</li><li>风险可控且风控机制完善；</li><li>项目符合基金策略。</li></ul><h1 id="02-Due-diligence-logic"><a href="#02-Due-diligence-logic" class="headerlink" title="02. Due diligence logic"></a>02. Due diligence logic</h1><p>投资尽职调查不能依赖于任何单一的因素进行投资判断，因为任何一个判断标准都有其限定条件和适用范围。尽职调查是一项复杂的系统工程，需要用专业知识进行分析和资料收集，只有建立在真实尽调基础上的决策才是有意义的。在尽调过程中，了解真实情况可以帮助投资人提升认知，抓住更大的机会。</p><h2 id="2-1-尽职调查-Due-Diligence"><a href="#2-1-尽职调查-Due-Diligence" class="headerlink" title="2.1 尽职调查 (Due Diligence)"></a>2.1 尽职调查 (Due Diligence)</h2><blockquote><p>为了确认交易标的的实际情况而进行的调查、审计或审查。指投资者在进行投资决策之前对目标企业进行详尽的调查和评估的过程。</p></blockquote><ul><li>尽职调查在美国要求证券交易商和经纪人在出售金融工具时披露重要信息，并在调查目标企业时进行尽职调查并充分披露结果。</li><li>在国内，尽职调查也被称为“审慎调查”，指并购活动中收购者对目标企业的资产和负债情况、经营和财务情况、法律关系以及面临的机会与潜在风险进行的一系列调查。</li></ul><h3 id="尽职调查的分类"><a href="#尽职调查的分类" class="headerlink" title="尽职调查的分类"></a>尽职调查的分类</h3><ol><li>根据投资标的划分：股权投资尽职调查、债权投资尽职调查、房地产投资尽职调查、不良资产投资尽职调查</li><li>根据尽调内容划分：商业尽职调查、财务尽职调查、法律尽职调查、税务尽职调查</li><li>根据投资目的划分：财务性投资类尽调、产业整合类尽调、并购类尽调、破产收购类尽调</li></ol><p>投资尽调的关注点会根据企业的发展阶段和行业特点的不同而有所调整。早期项目阶段更注重创始人和商业计划，不同行业则需要关注不同的因素，如销售合同、业务数据、技术原理等。投资者通过尽调来全面评估目标企业的潜力和风险，为投资决策提供重要依据。</p><ul><li>早期项目阶段：目标企业没有财务数据，甚至可能没设立企业，尽调时主要关注创始人和其商业规划。</li><li>针对To B类项目（面向企业客户）的尽调，投资者会关注销售合同和客户关系等因素。</li><li>To C类项目（面向消费者客户）的尽调，投资者则需要通过业务数据来调研C端消费者的需求。</li><li>对于科技类项目，投资者需要增加对技术原理和先进性的分析。</li></ul><p>本书重点讨论的是一级市场中早期财务性股权投资类的尽职调查，即VC尽调。VC投资主要关注企业的成长性，以赚取企业业绩增长所带来的估值增长为主要盈利模式。VC尽调一般分为四个部分：</p><ol><li>业务尽调：关注目标企业的业务模式、竞争优势和市场机会等。</li><li>财务尽调：评估目标企业的财务状况、财务报表和财务预测等。</li><li>行业尽调：研究目标企业所处行业的发展趋势、市场规模和竞争格局等。</li><li>法律尽调：审查目标企业的法律文件、合同和知识产权等法律事项。</li></ol><p>尽调报告是尽职调查的结果呈现方式，包括投资建议书、财务尽调报告、法律尽调报告、行业研究报告、风控报告等。尽调报告的具体格式和结构可能因机构而异，但关键是分析的思路和深度，对决策产生影响。</p><blockquote><p>注意：尽职调查的具体内容和方法可能因不同情况而有所不同，上述内容仅提供了一般性的概述和分类。</p></blockquote><h3 id="投资尽调的常见误区"><a href="#投资尽调的常见误区" class="headerlink" title="投资尽调的常见误区"></a>投资尽调的常见误区</h3><p>投资尽调是评估和调查潜在投资项目的过程，以确定其可行性和风险。尽调的目的是为了获取全面、准确的信息，帮助投资者做出明智的决策。虽然实践中存在不同的观点和做法，但以下是一些常见的投资尽调误区，以及应该如何进行VC尽调的建议：</p><ol><li>忽视财务尽调：财务尽调是投资尽调中至关重要的一环，它可以揭示企业的财务状况、盈利能力和未来发展潜力。忽视财务尽调可能导致对企业真实价值的误判。因此，在VC尽调中，应该对企业的财务报表、财务指标和财务真实性进行仔细分析和核实。</li><li>忽视技术门槛：技术门槛是衡量企业核心竞争力的重要指标之一。对于科技型企业，尽调过程中应该重点研究企业的技术专利、研发实力和创新能力。这有助于评估企业在市场中的竞争地位和长期发展潜力。</li><li>忽视人的尽调：人的因素在创业公司的成功与否中起着重要作用。创始人和团队的背景、经验和能力对企业的发展至关重要。在尽调过程中，应该对创始人和团队的专业背景、创业经历和团队合作能力进行评估，以了解他们是否有足够的能力和资源来实现项目的目标。</li><li>忽视财务真实性尽调：财务真实性尽调是为了验证企业财务报表的准确性和可靠性，以避免被虚假财务信息误导。在VC尽调中，应该仔细审查企业的财务数据、会计准则遵循情况和财务审计报告，与相关的财务专业人士进行沟通，确保财务信息的真实性。</li></ol><p>VC尽调应该是一个综合性的过程，涉及财务、技术、人员等多个方面的调查和评估。尽调的目标应该是获取全面、准确的信息，形成完整的逻辑链条，帮助投资者做出明智的投资决策。尽调过程应该是标准化的，有客观的判断标准和方法，而不是仅仅依靠个人的产业认知或投资策略。</p><h2 id="2-2-尽调核心逻辑"><a href="#2-2-尽调核心逻辑" class="headerlink" title="2.2 尽调核心逻辑"></a>2.2 尽调核心逻辑</h2><blockquote><p>尽调是<strong>以衡量目标企业未来财务成长性为目标，以认知业务实质为核心，以判断投资风险为重点的调查活动。</strong><br>Due diligence is a survey activity that aims to measure <strong>the future financial growth</strong> of the target enterprise, takes the cognition of <strong>business essence</strong> as the core, and focuses on <strong>the judgment of investment risk.</strong></p><p>投资决策的影响因素有五点: 价值、估值、退出、风险、策略。尽调的主要目的是判断目标企业的价值与风险。</p></blockquote><p>尽调要有一套逻辑方法：尽调逻辑树</p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Screenshot%202023-08-08%20at%2017.50.07.png"></p><ul><li>业务尽调：从内部角度去分析企业的产品和商业模式，以及企业的产品能力和交易能力，从而评估企业的核心竞争力。</li><li>财务尽调：从量化的角度去验证企业的成长性，包括成长速度、成长质量和成长驱动力，从而还原企业的真实价值。</li><li>行业尽调：从外部角度去审视企业所处的市场环境和竞争态势，从而评估企业的市场机会和竞争优势。</li><li>法律尽调：从风险的角度去调查企业的团队、股权、合规、内控等方面，从而评估企业的持续经营能力和投资风险。</li></ul><p><strong>财务尽调、行业尽调 和 业务尽调</strong>的共同目的是 <strong>判断企业的成长性</strong>，而不是单纯的排雷、选择赛道或了解技术。三种尽调之间是相互关联和相互验证的，必须结合分析，不能孤立地进行分析，缺一不可。</p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Screenshot%202023-08-09%20at%2014.50.43.png"></p><ul><li>**业务尽调 **用于认知业务，是认知企业的第一步，即提出问题（企业的产品、商业模式、面向的客户、行业、核心能力是什么？）。<ul><li>企业的产品竞争力强;</li><li>企业拥有一套支撑业务的强大平台系统;</li><li>在系统的支持下，企业能够实现远超同行业水平的销售业绩。</li></ul></li><li>**财务尽调 **用于量化验证业务，即分析问题，将定性的业务能力和竞争优势以定量的方式进行分析（回答企业的核心业务、商业模式优劣、核心客户、行业是哪些，在产业链上的地位如何，运营效率如何，管理能力如何）。<ul><li>企业产品综合毛利率为20%，但是在下滑;</li><li>企业系统开发历时7年累计投入6亿元;</li><li>销售人员人均销售额为500万元。</li></ul></li><li>**行业尽调 **用于对比业务，即评价问题（回答企业的成长速度、产品性能、价格、竞争力、商业模式在行业中处于什么水平，核心业务构成与其他企业相比有何差异？）。<ul><li>行业平均毛利率在20%，但头部企业的毛利率高达25%;</li><li>竞争对手累计融资20亿元用于开发系统，通过客户访谈反馈，竞争对手系统体验更好;</li><li>竞争对手的人均销售额为600万~700万元，超过目标企业水平。</li></ul></li></ul><h3 id="投资的标准化与挑战"><a href="#投资的标准化与挑战" class="headerlink" title="投资的标准化与挑战"></a>投资的标准化与挑战</h3><h4 id="如何评价尽调的质量"><a href="#如何评价尽调的质量" class="headerlink" title="如何评价尽调的质量"></a>如何评价尽调的质量</h4><ul><li>评价标准<ul><li>尽调广度：覆盖企业的所有重要维度，不遗漏任何重要事项</li><li>尽调深度：结合企业特点，对重点关键事项进行深入分析论证，有充分证据支撑结论</li></ul></li><li>难点<ul><li>尽调有时间和成本限制，成本与尽调质量是一对矛盾体</li><li>尽调需要有方向，不能没有目标、方法和结果</li><li>尽调不是追求完美的艺术行为，而是精打细算的商业行为</li></ul></li></ul><h4 id="如何满足最低决策需求"><a href="#如何满足最低决策需求" class="headerlink" title="如何满足最低决策需求"></a>如何满足最低决策需求</h4><ul><li>投资要有相对明确的标准，要实现标准化<ul><li>标准化的投资决策方法</li><li>标准化的尽调逻辑论证过程</li><li>标准化的尽调执行手段和方法</li></ul></li><li>难点<ul><li>不同行业、不同阶段的企业在投资决策的考虑因素和评价标准上有很大差异</li><li>不同机构的投资策略不同</li><li>投资尽调的部分事项很难以标准化方式描述</li></ul></li></ul><h1 id="03-业务尽调"><a href="#03-业务尽调" class="headerlink" title="03. 业务尽调"></a>03. 业务尽调</h1><p>从这一篇开始，我们正式进入企业尽调的实战环节。业务认知是第一步，然后逐步深入其他方面。</p><ul><li>创始人往往会用夸张的语言和数据来吸引投资者，但投资者需要通过尽调来还原企业的真实情况，因为没有完美的交易。<strong>尽调是一种 “挤水分” 的过程</strong>，能够帮助投资者做出<strong>理性的决策</strong>。</li><li><strong>投资人要有企业家思维，从生意的角度去认知企业</strong>，抓住本质，卖芯片与卖茶叶蛋在本质上并没有不同。不需要复杂的模型或趋势分析，只要用生意的思维方式，就能更好地看清楚一家公司。<ul><li>比如你或许难判断一家大数据企业未来业务增长，但能确定杂货店未来业务增长。这是生意的常识，不是复杂的分析。<ul><li>杂货店的形象 (产品&#x2F;服务形态)</li><li>见过很多杂货店的生存状态 (同行业企业分析)</li><li>知道老板从哪里进货、哪些人经常光顾店铺 (上下游产业链)</li><li>也许还跟老板聊过他每月的收入情况和成本支出 (财务分析)</li></ul></li></ul></li></ul><h2 id="业务尽调目标："><a href="#业务尽调目标：" class="headerlink" title="业务尽调目标："></a>业务尽调目标：</h2><p>业务尽调是接触和了解公司的第一步，也是非常重要和关键的一步。在业务尽调中，我们的主要任务不是去”验证”，而是”聆听”。绝大部分情况下，我们需要通过访谈、观看产品使用演示和生产演示等方式来理解公司到底是做什么的。</p><p>在这个阶段，尽调应该以感性认知为主，从多个维度了解产品与业务的情况，务求细致，不要浮于表面，不要简单地跟创始人聊几句就轻率地给公司的业务和产品下结论。</p><h3 id="1-认知业务"><a href="#1-认知业务" class="headerlink" title="1. 认知业务"></a>1. 认知业务</h3><p>业务尽调的第一个目标是<strong>认知业务</strong>，即搞清楚公司是做什么的。</p><p>在新兴产业不断出现、产业结构日趋复杂的时代，认知业务并不简单。需要了解公司的产品、技术、应用场景、商业模式等多个方面，还需要找出公司的<strong>真实业务</strong>，即公司的核心价值所在。</p><h4 id="认知业务的难点与障碍"><a href="#认知业务的难点与障碍" class="headerlink" title="认知业务的难点与障碍"></a>认知业务的难点与障碍</h4><ul><li><p>产品体系混乱，理不清头绪</p><ul><li>有些公司的产品线包括软件、硬件、系统等多种形态，且没有明显的逻辑关系。</li><li>这类公司往往是围绕特定大客户做软硬件定制开发的，相关的底层技术都是使用的第三方技术。</li><li><strong>问题</strong>: 您想要了解公司的主要客户是谁?公司为客户提供了哪些解决方案?公司与客户之间的合作模式是什么?</li></ul></li><li><p>应用场景多样，找不到对标</p><ul><li>有些公司的产品既包括某一领域的组件，又包括其他领域的组件，且没有明显的竞争对手。</li><li>在这种情况下，需要理解公司核心产品具体是什么，再分别与可比公司的产品进行对比分析。</li><li><strong>问题</strong>: 您想要了解公司的核心产品是什么?公司在该领域有哪些优势和劣势?公司在该领域面临哪些机会和挑战?</li></ul></li><li><p>商业模式复杂，抓不住本质</p><ul><li>有些平台模式的互联网公司的业务涉及多方，各方之间会发生不同业务行为，受益方与买单方常常并不一致。</li><li>在这种情况下，如果没有好的分析方法，就很难抓住项目的本质。</li><li><strong>问题</strong>: 您想要了解公司的平台模式是什么?公司如何吸引和留住用户?公司如何实现收入和利润?</li></ul></li><li><p>背景知识缺乏，摸不清模式</p><ul><li>由于缺乏背景知识，摸不清行业的惯常模式，所以无法听懂公司的业务，更谈不上分析判断。</li><li>在这种情况下，需要补充相关行业和领域的基础知识和常识。</li><li><strong>问题</strong>: 您想要了解哪些行业或领域的基础知识和常识?您有哪些可靠的信息来源?您如何验证信息的真实性和有效性?</li></ul></li><li><p>公司故意包装</p><ul><li>为了顺利融资或者提高估值，公司倾向于将低门槛业务包装成 “看起来有竞争力” 的高门槛业务。这会导致投资人认知业务的时候遇到很多困难，甚至经常被误导。<ul><li>eg. 某公司虚假宣传自己的国产虚拟化软件已能完全取代国外产品，实际上还在代理国外品牌销售国外品牌的产品。</li><li>eg. 某无人机巡检公司谎称自行研发了新产品无人机机库，实际上是从第三方公司高价购买了方案</li></ul></li></ul></li></ul><h3 id="2-定义核心能力"><a href="#2-定义核心能力" class="headerlink" title="2. 定义核心能力"></a>2. 定义核心能力</h3><p>业务尽调的第二个目标是找出公司的核心能力，分为产品能力和交易能力。两种能力的极致表现是好产品不需要销售和好销售可以卖出任何产品。</p><ul><li>产品能力：通过技术壁垒获得高盈利和高增长的能力。</li><li>交易能力：通过平台壁垒获得规模效应和垄断效应的能力。</li></ul><p>下图从左侧到右侧，产品层面的核心技术因素逐渐弱化，销售资源层面的因素逐渐增加，与之对应的公司的核心能力分别是:</p><ul><li>原创技术能力 - 技术应用能力 - 成本控制能力 - 供应链管理能力 - 市场营销能力 - 平台整合能力。</li></ul><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Screenshot%202023-08-09%20at%2015.31.39.png"></p><ul><li>产品型公司: 芯片研发、创新药研发、高端装备制造等。</li><li>交易型公司: 电商平台、视频平台、应用分发平台等。</li><li>中间型公司: 大部分公司属于此种类型。按照其核心驱动因素在产品能力与交易能力间的侧重不同，具体业务模式举例如下:<ul><li>非核心组件研发生产商; 软硬件一体化解决方案提供商; 系统集成商; 组装装配服务商&#x2F;开发外包服务商; 产品经销商; 商品贸易商。</li></ul></li></ul><p>不同类型的公司应该采用不同的评价标准：</p><ul><li>评价产品型公司时，应该根据其不同的核心能力，采用不同的评价标准，而不是一味地追求技术先进性。</li><li>评价平台型公司时，应该重点关注其商业模式和资源等方面，比如人力资源管理、内部控制、供应链能力、数据运营能力等。</li><li>评价技术应用类项目时，应该重点关注其对客户行业的认知能力、服务能力、成本控制能力等，而非原创类技术。</li></ul><h3 id="3-定义业务"><a href="#3-定义业务" class="headerlink" title="3. 定义业务"></a>3. 定义业务</h3><h4 id="如何用一句话概括业务"><a href="#如何用一句话概括业务" class="headerlink" title="如何用一句话概括业务"></a>如何用一句话概括业务</h4><p>说明公司的客户、功能和产品形态，用简单明了的语言描述公司为客户提供什么样的价值。例如:</p><ul><li>公司为消费者提供娱乐用智能投影整机、配件等软硬件产品，并提供基于智能投影系统的应用分发、影视内容等互联网增值服务。</li><li>公司为工业客户提供用于测绘与获取地理信息、巡检、安防监控与应急处理领域的工业无人机软硬件系统。</li><li>公司为3C、新能源、半导体等行业的核心零部件生产厂商提供在自动化生产线上使用的识别、测量、定位和检测的机器视觉软硬件产品。</li></ul><h4 id="远景规划-amp-业务现实-amp-核心业务-amp-非核心业务"><a href="#远景规划-amp-业务现实-amp-核心业务-amp-非核心业务" class="headerlink" title="远景规划 &amp; 业务现实 &amp; 核心业务 &amp; 非核心业务"></a>远景规划 &amp; 业务现实 &amp; 核心业务 &amp; 非核心业务</h4><ul><li>远景规划：公司尚未开始实施的未来构想</li><li>业务现实：公司目前正在进行的业务活动</li><li>核心业务：公司主要发展方向和竞争力的体现</li><li>非核心业务：基于核心业务所进行的延伸。</li></ul><p>投资人可以通过财务收入占比、行业特点、新业务增速等因素来判断公司的核心业务和非核心业务，不能把远景规划作为核心业务来做尽调和估值。</p><h4 id="业务沿革"><a href="#业务沿革" class="headerlink" title="业务沿革"></a>业务沿革</h4><p>业务沿革是指公司过去做过什么，以及如何从过去的业务转变成目前的业务。通过了解业务沿革，投资人可以反映出创始团队的背景、核心能力和资源、市场敏锐度、战略选择和偏好、适应力以及性格和品质。</p><p>投资人可以通过访谈方式来了解公司的业务沿革，从创始人的工作经历、创业初衷等问题入手，进一步了解其在过程中做过的尝试、遇到的问题、采取的解决方式等。</p><h3 id="4-认识产品"><a href="#4-认识产品" class="headerlink" title="4. 认识产品"></a>4. 认识产品</h3><h4 id="描述产品"><a href="#描述产品" class="headerlink" title="描述产品"></a>描述产品</h4><p>描述产品是业务认知的一个方面，包括产品的分类、特点、结构、原理、功能和场景等。</p><ol><li>描述产品时，要先归类，找到其所属的大类和细分品类（圆珠笔是一种笔，笔是一种文具，文具是一种办公用品，圆珠笔又可以按照材质、颜色、使用次数等维度进行细分）。</li><li>产品结构拆解，了解产品有哪些构成组件，各个组件的功能是什么，哪些是核心部件等（圆珠笔由笔杆、笔芯、笔尖、笔帽等部件组成，每个部件又有不同的材质和形状）。</li><li>要分析其运作原理和过程（圆珠笔是利用笔尖上的小球在纸面上滚动时将墨水涂抹在纸上的原理来实现书写的功能）。</li><li>要拆解生产(服务)流程：制作塑料成形模具—注塑机加工零件—零件组装—包装。如果是产品，需要描述产品的生产过程;如果是服务，如软件系统开发，则可以将服务的提供过程进行拆解描述。</li><li>要展示，找到其使用场景和功能（圆珠笔可以用于日常书写、签字、画图等场景，具有方便携带、易于控制、颜色鲜艳等功能）。</li></ol><h4 id="找到产品体系的主线"><a href="#找到产品体系的主线" class="headerlink" title="找到产品体系的主线"></a>找到产品体系的主线</h4><p>找到产品体系的主线是业务认知的一个方面，可以帮助我们把握公司的核心能力和业务延伸的逻辑（比如一家公司产品多达十几项， 刚接触觉得产品混乱，梳理后发现其业务核心在于微波芯片技术，现有业务都是基于该技术的延伸）。</p><ul><li>先分析：找出公司的不同产品线和细分产品，比如公司有A、B、C三条产品线，每条产品线又有若干细分产品。</li><li>比较：找出不同产品线和细分产品之间的共性和差异，比如不同产品线是否有相同的客户群、技术基础、销售渠道等。</li><li>归纳：找出公司的核心能力和业务延伸的原因和优劣，比如公司是基于什么能力来开发不同的产品线和细分产品的，这样做有什么好处和坏处。</li></ul><h4 id="技术尽调"><a href="#技术尽调" class="headerlink" title="技术尽调"></a>技术尽调</h4><p>对技术驱动型的项目需要做技术原理的阐述，方便从技术角度理解产品。</p><ul><li>在对技术路线进行分析时，主要需要了解目标公司的技术路线在整个坐标系中的位置、同类技术路线有哪些，以及各自的优劣等。</li><li>面对新技术时，判断技术的成熟度，即技术是否能达到设想的状态。</li><li>在一个新产品问世时，往往有多种不同的技术实现路径。在技术路线尚未定形之前，比拼的是差异化优势，而在定形之后，比拼的则是执行层面的优化程度了。</li><li>从时间维度上看，还需要了解技术的演变过程、国内外所处的阶段是否有差异、未来的发展趋势等。</li></ul><p>技术尽调方法：</p><ul><li>行业专家访谈是技术尽调的重要手段之一，由行业内的资深专家提供技术评判的相关依据供投资人参考。</li><li>专利分析是对公司进行技术尽调的方法之一，更适合技术驱动型公司，比如创新药、新材料等行业。但专利分析门槛高、投入大，能够通过分析得出的有价值内容相对有限并且不确定性较大。专利分析用于研究竞争对手更为合适，若用于投资尽调则颇有得不偿失之感。<ul><li>作用：能帮助我们了解公司的竞争性门槛、提前获悉公司的业务布局和未来战略。</li><li>方法：确认哪些是公司的核心专利，搞清楚专利对应的产品。了解产品的技术原理，通常可以查阅相关专利说明书。根据关联人数、审查期总长度、独权专利个数等指标对专利的含金量做间接的验证。</li><li>限制：每家公司对于核心技术的保护策略并不相同，很多公司会选择不对真正核心的技术申请专利。非产业界内部人士很难对下一步的产业化方向进行预测，更无法评判竞争对手是否有绕过专利的能力。技术型公司的专利数量往往较多，如果对每项专利进行深入分析，工作量很大。评估专利的含金量很多时候需要专业的判断，大部分投资机构并不具备这种能力。</li></ul></li></ul><h3 id="5-商业模式"><a href="#5-商业模式" class="headerlink" title="5. 商业模式"></a>5. 商业模式</h3><p>商业模式是指公司基于产品&#x2F;服务的运营方式和收益获取方式，包括以下几个方面：</p><ol><li>营销模式：如何找到客户或让客户找到你的方式。</li><li>销售模式：与客户达成交易的方式，涉及价格、供货时间、产品、账期等要求。</li><li>采购模式：从哪些供应商采购原材料&#x2F;服务，供应商选择的机制是什么。</li><li>生产模式：组织生产的方式以及产能的配置。</li><li>研发模式：研发新产品&#x2F;新技术的方式。</li><li>盈利模式：如何赚钱的方式。</li></ol><p>我们可以从多个维度来了解一家公司的商业模式，最终可以形成商业模式示意图，概括公司的商业模式全景。</p><p>以销售模式为例，销售是公司的基础，没有销售，公司就失去了存在的价值。销售模式是商业模式研究的核心要素，主要内容包括：</p><ul><li>销售对象：企业客户&#x2F;消费者。</li><li>产品类型：通用&#x2F;垂直。</li><li>销售方式：直销&#x2F;渠道。</li><li>下游行业：客户所在行业。</li><li>交付方式：标准&#x2F;定制。</li><li>定价方式：变动&#x2F;固定。</li><li>付款方式：预付&#x2F;分期。</li><li>营销方式：线上&#x2F;线下。</li></ul><p>这些要素之间是相互关联的。当我们在分析时发现与一般认知不同的情况时，需要关注原因，并判断这是公司的创新做法还是有其他隐情。</p><p>举个例子，如果销售对象是消费者，那很难提供定制化产品，因为消费者的单价较低，定制化可能无法覆盖成本。一旦采用定制化模式，主要以直销为主，因为需要根据下游客户需求提供产品服务。定制化的付款方式通常不是一次性全额付款，而是按进度付款，这意味着会有账期。通过下面的案例，我们可以了解商业模式对公司的影响。</p><p>【案例】一个软件开发企业在商业模式转型过程中遇到的困难：该企业原本提供定制开发的仓储管理系统，面向不同行业的客户。由于定制开发的成本高、周期长、需求复杂，该企业决定转型为SaaS模式，提供标准化的仓储管理系统。然而，这样的转型导致该企业收入大幅下降，因为标准化产品的价格远低于定制开发的价格，而且可能无法满足客户的个性化需求。最终，该企业不得不放弃SaaS模式，重新回到定制开发模式。</p><h4 id="商业模式如何描述"><a href="#商业模式如何描述" class="headerlink" title="商业模式如何描述"></a>商业模式如何描述</h4><p>商业模式通常在投行IPO招股说明书中描述。商业模式章节通常包括 **采购模式、生产模式和销售模式 **等内容，以下是其例子：</p><ul><li><strong>采购模式</strong><ul><li>公司采购主要原材料包括xxx，其中直接采购为主，公司基于市场预测安排采购和生产，销售中心xxx，物控计划部xxx，采购部xxx，付款条件xxx，境外供应商xxx，结算方式为xxx</li></ul></li><li><strong>生产模式</strong><ul><li>自主生产：公司主要生产标准化产品。定制化非标产品由技术部门评审后按订单安排生产。生产周期xxx。</li><li>委托加工：少部分非核心加工工序通过委托加工进行。生产部门提出委托加工申请，采购部下达委托加工订单，委托加工厂商经过供应商认证及加工工艺认证。</li></ul></li><li><strong>销售模式</strong><ul><li>公司产品销售主要通过直销方式进行，面向激光设备集成商。</li><li>国内市场销售采用直销模式，覆盖全国核心区域，并通过客户拜访、展会展示等方式获取订单。</li><li>海外市场销售以直销为主、代理分销为辅，通过展会、网络、驻地市场人员等方式进行销售，重点地区包括东南亚和南亚。公司提供全方位的售前、售中和售后服务，并采用转账和票据结合的方式进行业务结算。</li></ul></li></ul><p>以上商业模式的写法没错。不同的招股说明书可能采用不同的写作方式，并没有明确规定商业模式应该如何撰写。但这样写是否有意义呢？以采购模式为例，上述描述包含了采购内容、采购方式、采购计划和付款账期等主要信息。实际上，这些信息已经在财务尽调的成本分析和存货分析中包含，并且已经提供了详细介绍。因此，在商业模式的业务部分，不需要再详细描述这些内容。</p><p>所以商业模式应该从三个层面来描述业务，即产品层面、交易层面和资金层面：</p><ul><li><strong>产品层面：</strong>描述目标公司提供的产品或服务。例如，设备厂商设计制造某类设备。</li><li><strong>交易层面：</strong>描述目标公司与哪类客户进行了何种交易。例如，设备厂商通过渠道商将设备销售给汽车厂商，用于汽车装配。</li><li><strong>资金层面：</strong>描述围绕目标公司资金如何在不同主体之间流转。例如，汽车厂商向渠道商支付款项，渠道商再与设备厂商结算。</li></ul><p>那我们再看看下面这个法律平台类项目的商业模式：</p><ul><li><strong>从产品层面看，</strong>目标公司与律师合作，由公司提供视频设计、策划、拍摄、编辑等服务、律师出镜的方式来制作法律宣传视频，并在抖音等平台投放。C端用户观看视频后如有法律咨询问题和需求则点击平台链接接入目标公司的App，App通过自身匹配系统将其匹配给特定区域和特定专业的律师，由律师直接答复C端用户。C端用户可以针对问题进一步向律师咨询，进而委托律师承办案件。</li><li><strong>从交易层面看，</strong>目标公司向律师销售App会员账号; 同时目标公司接受保险公司委托，向律师销售诉讼财产保全责任保险，并根据销售金额提取佣金。为鼓励律师使用平台，目标公司会向律师提供补贴。会员收入和保险佣金是公司的主要盈利模式。</li><li><strong>从资金层面看，</strong>律师向目标公司支付会员账号费;律师在 APP上付费购买保险，保险公司根据保险销售情况按月与目标公司结算佣金收入;目标公司根据律师回答问题数量和用户反馈情 况向律师实时支付补贴。</li></ul><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Screenshot%202023-08-09%20at%2022.52.47.png"></p><h3 id="6-核心能力"><a href="#6-核心能力" class="headerlink" title="6. 核心能力"></a>6. 核心能力</h3><p>业务尽调中，我们该如何认知企业的核心能力，又该如何初步评价企业的核心能力？我们以软件企业为例来说明。</p><h4 id="项目难易度"><a href="#项目难易度" class="headerlink" title="项目难易度"></a>项目难易度</h4><blockquote><p>项目难易度的衡量标准包括功能模块的复杂程度、代码开发数量、基于开源软件的开发程度以及所需的研发人员数量。通常情况下，做通用化和标准化产品的项目难度会高于做定制化产品的项目。通过分析企业的成本费用结构可以有效判断企业产品是标准化还是定制化的。</p></blockquote><p>举例说明，A公司开发了一款通用的财务软件，以较低的价格卖给大量客户，而B公司为少数客户开发定制化的软件，并以高价销售。</p><ul><li>A公司的成本较低，毛利率较高，主要依靠研发和销售费用来决定净利润水平。</li><li>B公司的成本较高，毛利率较低，主要依靠成本管控来决定净利润水平。</li></ul><p>根据成本费用的比例情况可以分析企业的产品化程度，大多数情况下企业都朝着产品化的方向发展。</p><p>有些企业可能标榜自己是高新技术企业，但实际上大部分人员都在进行定制开发，这种定制开发的软件很难复用，难以打造成通用性的产品。即使企业有通用的产品，销售的客户也可能与目前的客户不同，需要另外打造销售体系。</p><h4 id="研发人员情况"><a href="#研发人员情况" class="headerlink" title="研发人员情况"></a>研发人员情况</h4><ol><li>研发人员数量：了解企业所需产品类型的大致研发人员数量，并结合企业现有的研发人员数量，可以判断企业技术是自研还是主要使用开源技术。需要注意确保企业的表述与实际情况一致。</li><li>研发团队素质：关注研发团队的年龄、学历、薪酬情况、招聘标准、团队优化方向等。了解研发团队的具体设置、人员分工情况、绩效考核标准等。关注在研项目的方向、具体内容、人力投入情况、预期进度安排和使用的开发工具。</li><li>配置水平与发展阶段：不同发展阶段企业配置的研发人员水平可能不同。初创阶段很难吸引到优秀人才，但并不意味着研发没有成功的可能。初创阶段主要要求执行到位。随着业务发展，需要更专业和资深的人员来满足产品升级和客户需求。</li><li>管理层选择与规划：投资机构应关注管理层对研发负责人的选择，创始人是否有合理的评估和招募研发合作伙伴的计划。应了解是否有合理的规划来提升研发能力，包括目标人选的选择和能力是否满足业务要求。</li><li>方向和执行力：优秀的产品需要不断迭代和打磨，因此方向和执行力非常重要。研发负责人的业务水平、规划能力和团队建设能力与产品的成功密切相关。好的研发负责人知道什么时候使用何种人员来开发满足业务需求的产品，并通过持续、快速迭代不断完善产品。</li></ol><h4 id="团队情况-P117"><a href="#团队情况-P117" class="headerlink" title="团队情况 P117"></a>团队情况 P117</h4><h4 id="创始人特点"><a href="#创始人特点" class="headerlink" title="创始人特点"></a>创始人特点</h4><h4 id="Summary-2"><a href="#Summary-2" class="headerlink" title="Summary"></a>Summary</h4>]]></content>
    
    
    <categories>
      
      <category>Due diligence</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Due diligence</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python</title>
    <link href="/2023/08/01/Python/"/>
    <url>/2023/08/01/Python/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><p>Python由<a href="https://baike.baidu.com/item/%E8%8D%B7%E5%85%B0/190469?fromModule=lemma_inlink">荷兰</a><a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6/107037?fromModule=lemma_inlink">数学</a>和<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/9132?fromModule=lemma_inlink">计算机科学</a>研究学会的<a href="https://baike.baidu.com/item/%E5%90%89%E5%A4%9A%C2%B7%E8%8C%83%E7%BD%97%E8%8B%8F%E5%A7%86/328361?fromModule=lemma_inlink">吉多·范罗苏姆</a>于1990年代初设计，作为一门叫作<a href="https://baike.baidu.com/item/ABC%E8%AF%AD%E8%A8%80/334996?fromModule=lemma_inlink">ABC语言</a>的替代品。Python提供了高效的高级<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450?fromModule=lemma_inlink">数据结构</a>，还能简单有效地<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2262089?fromModule=lemma_inlink">面向对象</a>编程。Python<a href="https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95/23734941?fromModule=lemma_inlink">语法</a>和动态类型，以及<a href="https://baike.baidu.com/item/%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80/8888952?fromModule=lemma_inlink">解释型语言</a>的本质，使它成为多数平台上写<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC/1697005?fromModule=lemma_inlink">脚本</a>和快速开发应用的<a href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/9845131?fromModule=lemma_inlink">编程语言</a>，随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、<a href="https://baike.baidu.com/item/%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE/3986637?fromModule=lemma_inlink">大型项目</a>的开发。 </p><hr><p><em><strong>个人笔记，仅供参考 (FOR REFERENCE ONLY)</strong></em></p><hr><h1 id="1-Basic-Python-syntax"><a href="#1-Basic-Python-syntax" class="headerlink" title="1. Basic Python syntax"></a><u>1. Basic Python syntax</u></h1><h2 id="Identifiers"><a href="#Identifiers" class="headerlink" title="Identifiers"></a>Identifiers</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Identifiers 可以由字母、数字、下划线组成, 但开头只能 letter or underscore (“_”)，不能以 digits 开头</span><br><span class="hljs-comment"># 区分大小写，不能使用关键字。Python 中默认编码为 ASCII</span><br>a1 = <span class="hljs-number">0</span> ✅_a1 = <span class="hljs-number">0</span> ✅ 1a = <span class="hljs-number">0</span> ❌<br></code></pre></td></tr></table></figure><h2 id="多行显示"><a href="#多行显示" class="headerlink" title="多行显示"></a>多行显示</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 反斜杠(\)可以作为续行符，表示下一行是上一行的延续。也可以使用 &quot;&quot;&quot; 或 &#x27;&#x27;&#x27; 跨越多行。</span><br><span class="hljs-comment"># 我们可以使用 &quot;\&quot; 将一行的语句分为多行显示, total = a+b-c 可以表述为:</span><br>total = a + \<br>    b - \<br>    c<br>days = [<span class="hljs-string">&#x27;Monday&#x27;</span>, <span class="hljs-string">&#x27;Tuesday&#x27;</span>, <span class="hljs-string">&#x27;Wednesday&#x27;</span>,<br>        <span class="hljs-string">&#x27;Thursday&#x27;</span>, <span class="hljs-string">&#x27;Friday&#x27;</span>] <span class="hljs-comment"># 语句中包含 [], &#123;&#125; 或 () 括号就不需要使用 &quot;\&quot;aS</span><br></code></pre></td></tr></table></figure><h2 id="引号-amp-注释"><a href="#引号-amp-注释" class="headerlink" title="引号 &amp; 注释"></a>引号 &amp; 注释</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Python 可以使用引号( &#x27; )、双引号( &quot; )、三引号( &#x27;&#x27;&#x27; 或 &quot;&quot;&quot; ) 来表示字符串.</span><br>word = <span class="hljs-string">&#x27;word&#x27;</span><br>sentence = <span class="hljs-string">&quot;这是一个句子。&quot;</span><br>paragraph = <span class="hljs-string">&quot;&quot;&quot;这是一个段落。</span><br><span class="hljs-string">包含了多个语句&quot;&quot;&quot;</span> <span class="hljs-comment"># 三引号可以由多行组成，编写 &quot;多行文本&quot; 的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">我是多行注释</span><br><span class="hljs-string">我是多行注释</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">我是多行注释</span><br><span class="hljs-string">我是多行注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="同一行显示多条语句-amp-多个变量赋值"><a href="#同一行显示多条语句-amp-多个变量赋值" class="headerlink" title="同一行显示多条语句 &amp; 多个变量赋值"></a>同一行显示多条语句 &amp; 多个变量赋值</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">a, b, c = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;john&quot;</span> <span class="hljs-comment"># 多个变量赋值, 两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 &quot;john&quot; 分配给变量 c</span><br><span class="hljs-built_in">print</span> (a,b,c) <span class="hljs-comment"># 不换行输出: 1 2 john</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---------&#x27;</span>)<br><span class="hljs-comment"># print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=&quot;&quot;</span><br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 换行输出</span><br><span class="hljs-built_in">print</span>(b, end=<span class="hljs-string">&quot; &quot;</span>) <span class="hljs-comment"># 不换行输出</span><br><span class="hljs-built_in">print</span>(c, end=<span class="hljs-string">&quot; &quot;</span>) <span class="hljs-comment"># 不换行输出</span><br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">1 2 john</span><br><span class="hljs-section">---------</span><br>1<br>2 john <br></code></pre></td></tr></table></figure><h2 id="六个标准数据类型"><a href="#六个标准数据类型" class="headerlink" title="六个标准数据类型"></a>六个标准数据类型</h2><ul><li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）</li><li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）</li></ul><h3 id="1-Numbers（数字）"><a href="#1-Numbers（数字）" class="headerlink" title="1. Numbers（数字）"></a>1. Numbers（数字）</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">x = <span class="hljs-number">1</span>; y = <span class="hljs-number">1.5</span> <span class="hljs-comment"># 同一行显示多条语句，语句之间使用 &quot;;&quot; 分割</span><br>a, b, c, d = <span class="hljs-number">20</span>, <span class="hljs-number">5.5</span>, <span class="hljs-literal">True</span>, <span class="hljs-number">4</span>+<span class="hljs-number">3j</span> <span class="hljs-comment"># Python3 支持 int、float、bool、complex (复数)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a), <span class="hljs-built_in">type</span>(b), <span class="hljs-built_in">type</span>(c), <span class="hljs-built_in">type</span>(d))<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bool&#x27;</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;complex&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="2-String（字符串）"><a href="#2-String（字符串）" class="headerlink" title="2. String（字符串）"></a>2. String（字符串）</h3><ul><li>字符串截取语法格式：<code>变量[头下标:尾下标:步长]</code>, 从左往右以 0 开始, 从右往左以 -1 开始, 下标可以为空表示取到头或尾</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;123456789&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)                 <span class="hljs-comment"># 123456789, 输出字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])           <span class="hljs-comment"># 12345678, 输出第一个到倒数第二个的所有字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>])              <span class="hljs-comment"># 1, 输出字符串第一个字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[-<span class="hljs-number">1</span>])             <span class="hljs-comment"># 9, 输出字符串最后一个字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>])            <span class="hljs-comment"># 345, 输出从第三个开始到第六个的字符（不包含）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:])             <span class="hljs-comment"># 3456789, 输出从第三个开始后的所有字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])          <span class="hljs-comment"># 24, 输出从第二个开始到第五个且每隔一个的字符（步长为2）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span> * <span class="hljs-number">2</span>)             <span class="hljs-comment"># 123456789123456789, 输出字符串两次</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span> + <span class="hljs-string">&#x27;你好&#x27;</span>)         <span class="hljs-comment"># 123456789你好, 连接字符串</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello\nrunoob&#x27;</span>)      <span class="hljs-comment"># 使用反斜杠(\)+n转义特殊字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;hello\nrunoob&#x27;</span>)     <span class="hljs-comment"># hello\nrunoob, 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">ord</span>() <span class="hljs-comment"># 返回字符对应的 ASCII / numeric (ordinal) 码</span><br><span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;A&quot;</span>) = <span class="hljs-number">65</span><br> <br><span class="hljs-built_in">chr</span>() <span class="hljs-comment"># 返回 ASCII / numeric (ordinal) 码对应的字符</span><br><span class="hljs-built_in">chr</span>(<span class="hljs-number">65</span>) = <span class="hljs-string">&#x27;A&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://ultrafish.io/post/Python-basic-note/ascii.png" alt="ASCII table"></p><h3 id="3-List（列表）"><a href="#3-List（列表）" class="headerlink" title="3. List（列表）"></a>3. List（列表）</h3><ul><li>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</li><li>列表截取的语法格式如下：<code>变量[头下标:尾下标]</code></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span> = [ <span class="hljs-string">&#x27;abcd&#x27;</span>, <span class="hljs-number">786</span> , <span class="hljs-number">2.23</span>, <span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-number">70.2</span> ]; tinylist = [<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;runoob&#x27;</span>]<br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">list</span>)<span class="hljs-comment"># [&#x27;abcd&#x27;, 786, 2.23, &#x27;runoob&#x27;, 70.2], 输出完整列表</span><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>])<span class="hljs-comment"># abcd, 输出列表第一个元素</span><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])<span class="hljs-comment"># [786, 2.23], 从第二个开始输出到第三个元素</span><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>:])<span class="hljs-comment"># [2.23, &#x27;runoob&#x27;, 70.2], 输出从第三个元素开始的所有元素</span><br><span class="hljs-built_in">print</span> (tinylist * <span class="hljs-number">2</span>)<span class="hljs-comment"># [123, &#x27;runoob&#x27;, 123, &#x27;runoob&#x27;], 输出两次列表</span><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">list</span> + tinylist) <span class="hljs-comment"># [&#x27;abcd&#x27;, 786, 2.23, &#x27;runoob&#x27;, 70.2, 123, &#x27;runoob&#x27;], 连接列表</span><br><span class="hljs-comment"># 与Python字符串不一样的是，列表中的元素是可以改变的, List 内置了有很多方法，例如 append()、pop() 等等:</span><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">9</span>; a[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>] = [<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>]<br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># [9, 2, 13, 14, 15, 6]</span><br>a[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>] = []   <span class="hljs-comment"># 将对应的元素值设置为 []</span><br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># [9, 2, 6]</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">list.append(x)</td><td align="left">把一个元素添加到列表的结尾，相当于 a[len(a):] &#x3D; [x]。</td></tr><tr><td align="left">list.extend(L)</td><td align="left">通过添加指定列表的所有元素来扩充列表，相当于 a[len(a):] &#x3D; L。</td></tr><tr><td align="left">list.insert(i, x)</td><td align="left">在指定位置插入一个元素。第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。</td></tr><tr><td align="left">list.remove(x)</td><td align="left">删除列表中值为 x 的第一个元素。如果没有这样的元素，就会返回一个错误。</td></tr><tr><td align="left">list.pop([i])</td><td align="left">从列表的指定位置移除元素，并将其返回。如果没有指定索引，a.pop()返回最后一个元素。元素随即从列表中被移除。（方法中 i 两边的方括号表示这个参数是可选的，而不是要求你输入一对方括号，你会经常在 Python 库参考手册中遇到这样的标记。）</td></tr><tr><td align="left">list.clear()</td><td align="left">移除列表中的所有项，等于del a[:]。</td></tr><tr><td align="left">list.index(x)</td><td align="left">返回列表中第一个值为 x 的元素的索引。如果没有匹配的元素就会返回一个错误。</td></tr><tr><td align="left">list.count(x)</td><td align="left">返回 x 在列表中出现的次数。</td></tr><tr><td align="left">list.sort()</td><td align="left">对列表中的元素进行排序。</td></tr><tr><td align="left">list.reverse()</td><td align="left">倒排列表中的元素。</td></tr><tr><td align="left">list.copy()</td><td align="left">返回列表的浅复制，等于a[:]。</td></tr></tbody></table><h3 id="4-Tuple（元组）"><a href="#4-Tuple（元组）" class="headerlink" title="4. Tuple（元组）"></a>4. Tuple（元组）</h3><ul><li>元组（tuple）与列表类似，不同之处在于 “元组的元素不能修改”。元组写在小括号 () 里，元素之间用逗号隔开。</li><li>元组中的元素类型也可以不相同：</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">tuple</span> = ( <span class="hljs-string">&#x27;abcd&#x27;</span>, <span class="hljs-number">786</span> , <span class="hljs-number">2.23</span>, <span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-number">70.2</span>  )<br>tinytuple = (<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;runoob&#x27;</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">tuple</span>)             <span class="hljs-comment"># (&#x27;abcd&#x27;, 786, 2.23, &#x27;runoob&#x27;, 70.2), 输出完整元组</span><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">tuple</span>[<span class="hljs-number">0</span>])          <span class="hljs-comment"># abcd, 输出元组的第一个元素</span><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">tuple</span>[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])        <span class="hljs-comment"># (786, 2.23), 输出从第二个元素开始到第三个元素</span><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">tuple</span>[<span class="hljs-number">2</span>:])         <span class="hljs-comment"># (2.23, &#x27;runoob&#x27;, 70.2), 输出从第三个元素开始的所有元素</span><br><span class="hljs-built_in">print</span> (tinytuple * <span class="hljs-number">2</span>)     <span class="hljs-comment"># (123, &#x27;runoob&#x27;, 123, &#x27;runoob&#x27;), 输出两次元组</span><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">tuple</span> + tinytuple) <span class="hljs-comment"># (&#x27;abcd&#x27;, 786, 2.23, &#x27;runoob&#x27;, 70.2, 123, &#x27;runoob&#x27;), 连接元组</span><br><span class="hljs-built_in">tuple</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">11</span>  <span class="hljs-comment"># 修改元组元素的操作是非法的</span><br><span class="hljs-comment"># 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</span><br>tup1 = ()    <span class="hljs-comment"># 空元组</span><br>tup2 = (<span class="hljs-number">20</span>,) <span class="hljs-comment"># 一个元素，需要在元素后添加逗号</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">方法及描述</th><th>实例</th></tr></thead><tbody><tr><td align="left">len(tuple) <br />计算元组元素个数。</td><td><code>tuple1 = (&#39;Google&#39;, &#39;Runoob&#39;, &#39;Taobao&#39;)</code><br /><code>len(tuple1) = 3</code></td></tr><tr><td align="left">max(tuple) <br />返回元组中元素最大值。</td><td><code>&gt;&gt;&gt; tuple2 = (&#39;5&#39;, &#39;4&#39;, &#39;8&#39;)</code><br /><code>max(tuple2) = &#39;8&#39; </code></td></tr><tr><td align="left">min(tuple) <br />返回元组中元素最小值。</td><td><code>&gt;&gt;&gt; tuple2 = (&#39;5&#39;, &#39;4&#39;, &#39;8&#39;)</code><br /> <code>min(tuple2) = &#39;4&#39;  </code></td></tr><tr><td align="left">tuple(iterable) <br />将可迭代系列转换为元组。</td><td><code>&gt;&gt;&gt; list1= [&#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;, &#39;Baidu&#39;]</code><br /><code> &gt;&gt;&gt; tuple1 = tuple(list1)</code><br /><code>tuple1 =  (&#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;, &#39;Baidu&#39;)</code></td></tr></tbody></table><h3 id="5-Set（集合）"><a href="#5-Set（集合）" class="headerlink" title="5. Set（集合）"></a>5. Set（集合）</h3><ul><li>是一种无序、可变的数据类型, 集合中的元素不会重复，并且可以进行交集、并集、差集等常见的集合操作。</li><li>集合使用大括号 {} 表示，元素之间用逗号 “,” 分隔。</li><li>另外，也可以使用 set() 函数创建集合</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">sites = &#123;<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Taobao&#x27;</span>, <span class="hljs-string">&#x27;Runoob&#x27;</span>, <span class="hljs-string">&#x27;Facebook&#x27;</span>, <span class="hljs-string">&#x27;Zhihu&#x27;</span>, <span class="hljs-string">&#x27;Baidu&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(sites)   <span class="hljs-comment"># 输出集合，重复的元素被自动去掉: &#123;&#x27;Zhihu&#x27;, &#x27;Baidu&#x27;, &#x27;Taobao&#x27;, &#x27;Runoob&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;&#125;</span><br><span class="hljs-comment"># set可以进行集合运算</span><br>a = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;abracadabra&#x27;</span>); b = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;alacazam&#x27;</span>)<br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 无序输出所有元素: &#123;&#x27;d&#x27;, &#x27;c&#x27;, &#x27;r&#x27;, &#x27;b&#x27;, &#x27;a&#x27;&#125;</span><br><span class="hljs-built_in">print</span>(a - b)<span class="hljs-comment"># 无序输出 a 和 b 的差集: &#123;&#x27;d&#x27;, &#x27;b&#x27;, &#x27;r&#x27;&#125;</span><br><span class="hljs-built_in">print</span>(a | b)<span class="hljs-comment"># 无序输出 a 和 b 的并集: &#123;&#x27;l&#x27;, &#x27;m&#x27;, &#x27;d&#x27;, &#x27;c&#x27;, &#x27;r&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, &#x27;z&#x27;&#125;</span><br><span class="hljs-built_in">print</span>(a &amp; b)<span class="hljs-comment"># 无序输出 a 和 b 的交集: &#123;&#x27;a&#x27;, &#x27;c&#x27;&#125;</span><br><span class="hljs-built_in">print</span>(a ^ b)<span class="hljs-comment"># 无序输出 a 和 b 中不同时存在的元素: &#123;&#x27;l&#x27;, &#x27;m&#x27;, &#x27;r&#x27;, &#x27;b&#x27;, &#x27;d&#x27;, &#x27;z&#x27;&#125;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">集合内置方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-add.html">add()</a></td><td align="left">为集合添加元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-clear.html">clear()</a></td><td align="left">移除集合中的所有元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-copy.html">copy()</a></td><td align="left">拷贝一个集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-difference.html">difference()</a></td><td align="left">返回多个集合的差集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-difference_update.html">difference_update()</a></td><td align="left">移除集合中的元素，该元素在指定的集合也存在。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-discard.html">discard()</a></td><td align="left">删除集合中指定的元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-intersection.html">intersection()</a></td><td align="left">返回集合的交集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-intersection_update.html">intersection_update()</a></td><td align="left">返回集合的交集。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-isdisjoint.html">isdisjoint()</a></td><td align="left">判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-issubset.html">issubset()</a></td><td align="left">判断指定集合是否为该方法参数集合的子集。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-issuperset.html">issuperset()</a></td><td align="left">判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-pop.html">pop()</a></td><td align="left">随机移除元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-remove.html">remove()</a></td><td align="left">移除指定元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference.html">symmetric_difference()</a></td><td align="left">返回两个集合中不重复的元素集合。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference_update.html">symmetric_difference_update()</a></td><td align="left">移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-union.html">union()</a></td><td align="left">返回两个集合的并集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-update.html">update()</a></td><td align="left">给集合添加元素</td></tr></tbody></table><h3 id="6-Dictionary（字典）"><a href="#6-Dictionary（字典）" class="headerlink" title="6. Dictionary（字典）"></a>6. Dictionary（字典）</h3><ul><li>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</li><li>字典是一种映射类型，用 { } 标识，它是一个无序的 {键(key) : 值(value)} 的集合。键(key)必须使用不可变类型。</li><li>在同一个字典中，键(key)必须是唯一的。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">dict</span> = &#123;&#125; <span class="hljs-comment"># 创建空字典</span><br><span class="hljs-built_in">dict</span>[<span class="hljs-string">&#x27;one&#x27;</span>] = <span class="hljs-string">&quot;1 - 菜鸟教程&quot;</span><br><span class="hljs-built_in">dict</span>[<span class="hljs-number">2</span>]     = <span class="hljs-string">&quot;2 - 菜鸟工具&quot;</span><br>tinydict = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;runoob&#x27;</span>,<span class="hljs-string">&#x27;code&#x27;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;site&#x27;</span>: <span class="hljs-string">&#x27;www.runoob.com&#x27;</span>&#125;<br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">dict</span>[<span class="hljs-string">&#x27;one&#x27;</span>])<span class="hljs-comment"># 输出键为 &#x27;one&#x27; 的值: 1 - 菜鸟教程</span><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">dict</span>[<span class="hljs-number">2</span>])<span class="hljs-comment"># 输出键为 2 的值: 2 - 菜鸟工具</span><br><span class="hljs-built_in">print</span> (tinydict)<span class="hljs-comment"># 输出完整的字典: &#123;&#x27;name&#x27;: &#x27;runoob&#x27;, &#x27;code&#x27;: 1, &#x27;site&#x27;: &#x27;www.runoob.com&#x27;&#125;</span><br><span class="hljs-built_in">print</span> (tinydict.keys())<span class="hljs-comment"># 输出所有键: dict_keys([&#x27;name&#x27;, &#x27;code&#x27;, &#x27;site&#x27;])</span><br><span class="hljs-built_in">print</span> (tinydict.values())<span class="hljs-comment"># 输出所有值: dict_values([&#x27;runoob&#x27;, 1, &#x27;www.runoob.com&#x27;])</span><br><span class="hljs-keyword">del</span> tinydict[<span class="hljs-string">&#x27;name&#x27;</span>] <span class="hljs-comment"># 删除键是&#x27;name&#x27;的条目</span><br>tinydict.clear()<span class="hljs-comment"># 清空字典所有条目</span><br><span class="hljs-keyword">del</span> tinydict<span class="hljs-comment"># 删除字典</span><br><br><span class="hljs-built_in">dict</span>() <span class="hljs-comment"># 创建空字典</span><br><span class="hljs-built_in">dict</span>(a=<span class="hljs-string">&#x27;a&#x27;</span>,b=<span class="hljs-string">&#x27;6&#x27;</span>，t=<span class="hljs-string">&#x27;t&#x27;</span>)    <span class="hljs-comment"># 传入关键字, &#123;&#x27;a&#x27;: &#x27;a&#x27;, &#x27;b&#x27;: &#x27;b&#x27;, &#x27;t&#x27;: &#x27;t&#x27;&#125;</span><br><span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>([<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>]， [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>，<span class="hljs-number">3</span>]) <span class="hljs-comment"># 映射函数方式来构造字典</span><br><span class="hljs-built_in">dict</span>([(<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-number">3</span>)]) <span class="hljs-comment"># 可迭代对象方式来构造字典</span><br>     <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tinydict: <br>  <span class="hljs-built_in">print</span>(i, end = <span class="hljs-string">&quot; &quot;</span>) <span class="hljs-comment"># 遍历字典所有键: name code site</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">函数及描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">len(dict) <br />计算字典元素个数，即键的总数。</td><td align="left"><code>&gt;&gt;&gt; tinydict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125;</code><br /><code> len(tinydict) = 3</code></td></tr><tr><td align="left">str(dict) <br />输出字典，可以打印的字符串表示。</td><td align="left"><code>&gt;&gt;&gt; tinydict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125;</code><br /><code> str(tinydict) = &quot;&#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Class&#39;: &#39;First&#39;, &#39;Age&#39;: 7&#125;&quot;</code></td></tr><tr><td align="left">type(variable) <br />返回输入的变量类型，如果变量是字典就返回字典类型。</td><td align="left"><code>&gt;&gt;&gt; tinydict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125;</code><br /><code>type(tinydict) = &lt;class &#39;dict&#39;&gt;</code></td></tr></tbody></table><p>Python字典包含了以下内置方法：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>dict.clear()</td><td>删除字典内所有元素</td></tr><tr><td>dict.copy()</td><td>返回一个字典的浅复制</td></tr><tr><td>dict.fromkeys()</td><td>创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td></tr><tr><td>dict.get(key, default&#x3D;None)</td><td>返回指定键的值，如果键不在字典中返回 default 设置的默认值</td></tr><tr><td>key in dict</td><td>如果键在字典dict里返回true，否则返回false</td></tr><tr><td>dict.items()</td><td>以列表返回一个视图对象</td></tr><tr><td>dict.keys()</td><td>返回一个视图对象</td></tr><tr><td>dict.setdefault(key, default&#x3D;None)</td><td>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td>dict.update(dict2)</td><td>把字典dict2的键&#x2F;值对更新到dict里</td></tr><tr><td>dict.values()</td><td>返回一个视图对象</td></tr><tr><td>pop(key[,default])</td><td>删除字典 key（键）所对应的值，返回被删除的值</td></tr><tr><td>popitem()</td><td>返回并删除字典中的最后一对键和值</td></tr></tbody></table><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">x = <span class="hljs-built_in">int</span>(<span class="hljs-number">2.8</span>) <span class="hljs-comment"># 强制转换为整型, x 输出结果为 2</span><br>y = <span class="hljs-built_in">float</span>(<span class="hljs-number">1</span>) <span class="hljs-comment"># 强制转换为浮点型, y 输出结果为 1.0</span><br>z = <span class="hljs-built_in">str</span>(<span class="hljs-number">6.0</span>)  <span class="hljs-comment"># 强制转换为字符串类型, z 输出结果为 &#x27;6.0&#x27;</span><br><br>a = x+y; <span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">type</span>(a)) <span class="hljs-comment"># 3.0 &lt;class &#x27;float&#x27;&gt;</span><br>z = <span class="hljs-built_in">float</span>(z); <span class="hljs-built_in">print</span>(z, <span class="hljs-built_in">type</span>(z)) <span class="hljs-comment"># 6.0 &lt;class &#x27;float&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py">age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你家狗狗的年龄: &quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">if</span> age &lt;= <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你是在逗我吧!&quot;</span>)<br><span class="hljs-keyword">elif</span> age == <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;相当于 14 岁的人。&quot;</span>)<br><span class="hljs-keyword">elif</span> age == <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;相当于 22 岁的人。&quot;</span>)<br><span class="hljs-keyword">else</span> age &gt; <span class="hljs-number">2</span>:<br>    human = <span class="hljs-number">22</span> + (age -<span class="hljs-number">2</span>)*<span class="hljs-number">5</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;对应人类年龄: &quot;</span>, human)<br> <br><span class="hljs-comment">### 退出提示</span><br><span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;点击 enter 键退出&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">var = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> var == <span class="hljs-number">1</span> :  <span class="hljs-comment"># 表达式永远为 true, 无限循环</span><br>   num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入一个数字  :&quot;</span>))<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;你输入的数字是: &quot;</span>, num)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Good bye!&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">5</span>: <span class="hljs-comment"># 如果 while 后面的条件语句为 false 时，则执行 else 的语句块</span><br>   <span class="hljs-built_in">print</span> (count, <span class="hljs-string">&quot; 小于 5&quot;</span>)<br>   count = count + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (count, <span class="hljs-string">&quot; 大于或等于 5&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>): <span class="hljs-comment">#  1 到 5 的所有数字：</span><br>    <span class="hljs-built_in">print</span>(number, end = <span class="hljs-string">&quot; &quot;</span>) <span class="hljs-comment"># 1 2 3 4 5</span><br>    <br>sites = [<span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Runoob&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>]<br><span class="hljs-keyword">for</span> site <span class="hljs-keyword">in</span> sites:<br>    <span class="hljs-built_in">print</span>(site, end = <span class="hljs-string">&quot; &quot;</span>) <span class="hljs-comment"># Baidu Google Runoob Taobao</span><br>    <br><span class="hljs-comment"># 当循环执行完毕（即遍历完 iterable 中的所有元素）后，会执行 else 子句中的代码，如果在循环过程中遇到了 break 语句，则会中断循环，此时不会执行 else 子句</span><br><span class="hljs-comment"># break 语句可以&quot;跳出&quot; for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。</span><br><span class="hljs-comment"># continue 语句被用来告诉 Python &quot;跳过&quot;当前循环块中的剩余语句，然后继续进行下一轮循环。</span><br>sites = [<span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Runoob&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>]<br><span class="hljs-keyword">for</span> site <span class="hljs-keyword">in</span> sites:<br>    <span class="hljs-keyword">if</span> site == <span class="hljs-string">&quot;Runoob&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;菜鸟教程!&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;循环数据 &quot;</span> + site)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有循环数据!&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成循环!&quot;</span>)<br></code></pre></td></tr></table></figure><center>  <img src="https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm06h3ug30ci08cake.gif" style="zoom:80%;" />  <img src="https://www.runoob.com/wp-content/uploads/2014/05/break-continue-536.png" style="zoom:80%;" /></center><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&#x2F;</td><td>相除</td><td>a &#x2F; b</td></tr><tr><td>%</td><td>取模</td><td>a % b</td></tr><tr><td>**</td><td>幂</td><td>a**b 表示 a 的 b 次幂</td></tr><tr><td>&#x2F;&#x2F;</td><td>取整除</td><td>9 &#x2F;&#x2F; 4 结果为 2</td></tr><tr><td>&#x3D;&#x3D;</td><td>是否相等</td><td>a &#x3D;&#x3D; b</td></tr><tr><td>!&#x3D;</td><td>是否不等于</td><td>a !&#x3D; b</td></tr><tr><td>&gt;&#x3D;</td><td>是否大于等于</td><td>a &gt;&#x3D; b</td></tr><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>a +&#x3D; b 等效于 a &#x3D; a + b</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>a &#x3D; b 等效于 a &#x3D; a**b</td></tr></tbody></table><p><img src="https://ultrafish.io/post/Python-basic-note/built-in-unm-op.png" alt="Python built-in numeric operations"></p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，应该说传不可变对象和传可变对象。类型属于对象，对象有不同类型的区分，变量是没有类型的（可以通过 <strong>id()</strong> 函数来查看内存地址变化）：</p><ul><li><strong>不可变数据 (immutable object)：</strong>Number（数字）、String（字符串）、Tuple（元组）</li><li><strong>可变数据 (mutable object)：</strong>List（列表）、Dictionary（字典）、Set（集合）</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py">a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <span class="hljs-comment"># [1,2,3] 是 List 类型</span><br>a=<span class="hljs-string">&quot;Runoob&quot;</span> <span class="hljs-comment"># &quot;Runoob&quot; 是 String 类型</span><br><span class="hljs-comment"># 变量 a 是没有类型，她仅仅是一个 &quot;对象的引用 (一个指针)&quot;，可以是指向 List 类型对象，也可以是指向 String 类型对象。</span><br><br><span class="hljs-comment"># 不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a。</span><br>a = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 4372447600</span><br>a = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 4372447760, 改变地址了</span><br><br><span class="hljs-comment"># 可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</span><br>la=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(la)) <span class="hljs-comment"># 4296979648</span><br>la[<span class="hljs-number">2</span>]=<span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(la)) <span class="hljs-comment"># 4296979648</span><br></code></pre></td></tr></table></figure><p>传不可变对象实例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">a</span>): <span class="hljs-comment"># 传递的只是 a 的&quot;值(1)&quot;，没有影响 a 对象本身。</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))   <span class="hljs-comment"># 指向的是同一个对象, 4343070960</span><br>    a=<span class="hljs-number">10</span> <span class="hljs-comment"># 如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))   <span class="hljs-comment"># 一个新对象, 4343071248</span><br> <br>a=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 4343070960</span><br>change(a)<br><br><span class="hljs-built_in">print</span>(a)<span class="hljs-comment"># 1, 仍然是 1, 没有影响 a 对象本身.</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))  <span class="hljs-comment"># 4343070960, 地址没变.</span><br></code></pre></td></tr></table></figure><p>传可变对象实例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 可写函数说明</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">changeme</span>(<span class="hljs-params"> mylist </span>): <span class="hljs-comment"># 则是将 mylist 真正的传过去，修改后 fun 外部的 mylist 也会受影响</span><br>   <span class="hljs-string">&quot;修改传入的列表&quot;</span><br>   mylist.append([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>   <span class="hljs-built_in">print</span> (mylist) <span class="hljs-comment"># [10, 20, 30, [1, 2, 3, 4]]</span><br>   <span class="hljs-keyword">return</span><br> <br><span class="hljs-comment"># 调用changeme函数</span><br>mylist = [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>]<br>changeme( mylist )<br><span class="hljs-built_in">print</span> (mylist) <span class="hljs-comment"># [10, 20, 30, [1, 2, 3, 4]], 已被修改!</span><br></code></pre></td></tr></table></figure><h2 id="lambda-匿名函数"><a href="#lambda-匿名函数" class="headerlink" title="lambda 匿名函数"></a>lambda 匿名函数</h2><p>虽然 lambda 函数看起来只能写一行，却不等同于 C 或 C++ 的内联函数，内联函数的目的是调用小函数时不占用栈内存从而减少函数调用的开销，提高代码的执行速度。</p><ol><li><strong>lambda</strong> 只是一个表达式，而不是一个代码块，函数体比 <strong>def</strong> 简单很多。仅仅能在 lambda 表达式中封装有限的逻辑进去。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-keyword">return</span> a+b<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><p>翻译成 lambda 表达式就是：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">add_lambda = <span class="hljs-keyword">lambda</span> a, b=<span class="hljs-number">1</span>: a+b <span class="hljs-comment"># &quot;:&quot;前面是函数参数, &quot;:&quot;后面是函数体</span><br><span class="hljs-built_in">print</span>(add_lambda(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>))<br><span class="hljs-built_in">print</span>(add_lambda(<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><ol start="2"><li>使用if条件文</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">get_odd_even = <span class="hljs-keyword">lambda</span> x:<span class="hljs-string">&#x27;even&#x27;</span> <span class="hljs-keyword">if</span> x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;odd&#x27;</span><br><span class="hljs-built_in">print</span>(get_odd_even(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(get_odd_even(<span class="hljs-number">9</span>))<br></code></pre></td></tr></table></figure><ol start="3"><li>无参数表达式</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> random<br>ran_lambda = <span class="hljs-keyword">lambda</span>: random.random() <span class="hljs-comment"># 返回0-1的随机数</span><br><span class="hljs-built_in">print</span>(ran_lambda)<br><span class="hljs-built_in">print</span>(ran_lambda)<br><span class="hljs-built_in">print</span>(ran_lambda)<br></code></pre></td></tr></table></figure><ol start="4"><li>map函数使用方法</li></ol><p>使用map函数会对一个序列对象中的每一个元素应用被传入的函数，并且返回一个包含了所有函数调用结果的一个列表。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># map实现数组元素平方, 第一种方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x**<span class="hljs-number">2</span><br>a = <span class="hljs-built_in">map</span>(add, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]) <br><span class="hljs-comment"># 有一个数组[1,2,3,4]; 通过调用map, map会循环数组里面的每一个元素; 每次循环的元素作为 add() 函数的参数传进去.</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(a)) <span class="hljs-comment"># [1, 4, 9, 16]</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># map实现数组元素平方, 第二种方法 lambda</span><br>b = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">2</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(b)) <span class="hljs-comment"># [1, 4, 9, 16, 25]</span><br></code></pre></td></tr></table></figure><ol start="5"><li>filter和reduce函数使用方法</li></ol><p>filter函数主要作用是基于某一测试函数过滤出一些元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#在数组中挑出大于0的元素</span><br>a=<span class="hljs-built_in">range</span>(-<span class="hljs-number">5</span>,<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x:x&gt;<span class="hljs-number">0</span>,a))) <span class="hljs-comment"># [1, 2, 3, 4]</span><br></code></pre></td></tr></table></figure><p>reduce 每一步传递当前的和或乘积以及列表中下一个的元素，传给列出的lambda函数。默认序列中的第一个元素初始化了起始值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br>a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-comment">#计算所有序列之和</span><br><span class="hljs-built_in">print</span>(reduce(<span class="hljs-keyword">lambda</span> x,y:x+y,a)) <span class="hljs-comment"># 10</span><br><span class="hljs-comment">#计算所有序列之积</span><br><span class="hljs-built_in">print</span>(reduce(<span class="hljs-keyword">lambda</span> x,y:x*y,a)) <span class="hljs-comment"># 24</span><br></code></pre></td></tr></table></figure><h2 id="File-Processing"><a href="#File-Processing" class="headerlink" title="File Processing"></a>File Processing</h2><p>Python <strong>open()</strong> 方法用于打开一个文件，并返回文件对象。</p><p>在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 <strong>OSError</strong>。</p><p><strong>注意：</strong>使用 <strong>open()</strong> 方法一定要保证关闭文件对象，即调用 <strong>close()</strong> 方法。</p><p><strong>open()</strong> 函数常用形式是接收两个参数：文件名(file)和模式(mode)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">open</span>(file, mode=<span class="hljs-string">&#x27;r&#x27;</span>)<br></code></pre></td></tr></table></figure><p>完整的语法格式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">open</span>(file, mode=<span class="hljs-string">&#x27;r&#x27;</span>, buffering=-<span class="hljs-number">1</span>, encoding=<span class="hljs-literal">None</span>, errors=<span class="hljs-literal">None</span>, newline=<span class="hljs-literal">None</span>, closefd=<span class="hljs-literal">True</span>, opener=<span class="hljs-literal">None</span>)<br><span class="hljs-comment"># file: 必需，文件路径（相对或者绝对路径）。</span><br><span class="hljs-comment"># mode: 可选，文件打开模式</span><br><span class="hljs-comment"># buffering: 设置缓冲</span><br><span class="hljs-comment"># encoding: 一般使用utf8</span><br><span class="hljs-comment"># errors: 报错级别</span><br><span class="hljs-comment"># newline: 区分换行符</span><br><span class="hljs-comment"># closefd: 传入的file参数类型</span><br><span class="hljs-comment"># opener: 设置自定义开启器，开启器的返回值必须是一个打开的文件描述符。</span><br></code></pre></td></tr></table></figure><p>mode 参数有 (默认为文本模式，如果要以二进制模式打开，加上 <strong>b</strong>)：</p><table><thead><tr><th align="left">mode</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">t</td><td align="left">文本模式 (默认)。</td></tr><tr><td align="left">x</td><td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td align="left">b</td><td align="left">二进制模式。</td></tr><tr><td align="left">+</td><td align="left">打开一个文件进行更新(可读可写)。</td></tr><tr><td align="left">U</td><td align="left">通用换行模式（<strong>Python 3 不支持</strong>）。</td></tr><tr><td align="left">r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="left">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="left">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>file 对象使用 open 函数来创建，下表列出了 file 对象常用的函数：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">file.close()</td><td align="left">关闭文件。关闭后文件不能再进行读写操作。</td></tr><tr><td align="left">file.flush()</td><td align="left">刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</td></tr><tr><td align="left">file.fileno()</td><td align="left">返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。</td></tr><tr><td align="left">file.isatty()</td><td align="left">如果文件连接到一个终端设备返回 True，否则返回 False。</td></tr><tr><td align="left">file.next()</td><td align="left"><strong>Python 3 中的 File 对象不支持 next() 方法</strong>，返回文件下一行。</td></tr><tr><td align="left">file.read([size])</td><td align="left">从文件读取指定的字节数，如果未给定或为负则读取所有。</td></tr><tr><td align="left">file.readline([size])</td><td align="left">读取整行，包括 “\n” 字符。</td></tr><tr><td align="left">file.readlines([sizeint])</td><td align="left">读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。</td></tr><tr><td align="left">file.seek(offset[, whence])</td><td align="left">移动文件读取指针到指定位置</td></tr><tr><td align="left">file.tell()</td><td align="left">返回文件当前位置。</td></tr><tr><td align="left">file.truncate([size])</td><td align="left">从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；截断之后后面的所有字符被删除，其中 windows 系统下的换行代表2个字符大小。</td></tr><tr><td align="left">file.write(str)</td><td align="left">将字符串写入文件，返回的是写入的字符长度。</td></tr><tr><td align="left">file.writelines(sequence)</td><td align="left">向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td></tr></tbody></table><hr><div class="note note-success">            <p>部分内容引用自 <strong>Mike_Zhang</strong> 的 <a href="https://ultrafish.io/post/Python-basic-note/#2-4-Data-types">Python Basic Note</a>, 菜鸟教程的 <a href="https://www.runoob.com/python3/python3-tutorial.html">Python 3 教程</a></p>          </div>]]></content>
    
    
    <categories>
      
      <category>Intro to Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Making peace with your death</title>
    <link href="/2023/07/22/Making%20peace%20with%20your%20death/"/>
    <url>/2023/07/22/Making%20peace%20with%20your%20death/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><h3 id="Epicurus-伊壁鸠鲁"><a href="#Epicurus-伊壁鸠鲁" class="headerlink" title="Epicurus 伊壁鸠鲁"></a>Epicurus 伊壁鸠鲁</h3><p><strong>The no-subject argument</strong> 无主体论证：只有两种可能：活着，不存在</p><hr><ol><li>如果你还活着，你就是一个活着的主体，可能会害怕很多事情，比如死亡。</li></ol><ul><li>然而，你不应该害怕死亡，<strong>因为死亡在你的一生中永远不会发生。</strong></li><li>从逻辑上讲，当你还活着时（即使是在最后一秒），你的死亡是不存在的。 你一生中永远不会遇到死亡。</li><li><strong>死亡只有在你一生之后才会发生在你身上。</strong> 从逻辑上讲，只要还活着，每个人都可以免于死亡。</li><li><strong>在你的一生中害怕死亡，就是害怕在你的一生中永远不会发生的事情。</strong> 这就像担心一个圆三角形，它在你的生命中任何时候都不会出现。</li><li>在一生中对死亡的恐惧是不合理的。</li></ul><p>在我活着的时候，死亡永远不会发生在我身上。当我活着的时候，我自己的死亡是不存在的。</p><ol start="2"><li>如果你死了，你就不再活着了。</li></ol><ul><li>你<strong>不会有意识</strong>（假设这里没有来世）没有意识，你就无法恐惧任何事情。</li><li>当你死去时，你所想象的对死亡的恐惧根本不存在。 没有主体，没有恐惧！</li><li>总之，死后你根本就不能害怕死亡。</li></ul><p>我死后，我的恐惧将不复存在。没有“我”拥有任何恐惧!!</p><p>结论：无论你还活着还是死了，你都不应该并不能害怕死亡。</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Screenshot%202023-07-22%20at%2018.00.14.png" style="zoom:50%;" /><h3 id="Lucretius-卢克莱修"><a href="#Lucretius-卢克莱修" class="headerlink" title="Lucretius 卢克莱修"></a>Lucretius 卢克莱修</h3><p><strong>The symmetry argument</strong> 对称性论证：考虑一下你一生之前和之后的时间，在我出生之前，我不应该担心我的不存在。</p><hr><p>假设没有来世，那么……在你出生之前，你并不存在。你死后，你就不存在了。</p><p>你出生之前和死后的时间是对称的:你不存在!!</p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Screenshot%202023-07-22%20at%2018.01.36.png"></p><p>你不担心自己在出生之前的不存在了<br>✓ 假设你出生于 2003 年。在 2003 年之前你从未存在过。你是否会对 2003 年之前你的不存在感到悲伤？ 嗯，从诗意的角度来看，也许吧。 但从逻辑上来说，不是。<br>✓ 从逻辑上讲，在你存在之前你不可能存在。 当你不存在时，你不应该因为你的不存在而感到难过，因为这只是一个逻辑条件：如果你不存在，你就不存在。<br>✓ 如果你想在存在之前就存在，那么你就是在要求一些不合逻辑、不合理的东西。</p><p>当人们遭遇挫折或失败时，他们很容易感到失望或沮丧，因为他们认为厄运的趋势是持续不断的。</p>]]></content>
    
    
    <categories>
      
      <category>Philosophy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Philosophy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>英语口语短语句子 | Spoken English phrases and sentences</title>
    <link href="/2023/07/13/eng1/"/>
    <url>/2023/07/13/eng1/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><p>screw Paris 去他的巴黎</p><p>So I really don’t wanna screw this one up 所以我真的不想把这个事情搞砸了</p><p>so annoying 好讨厌，太气人了</p><p>stopover 停留</p><p>That’s why “Always Exploring” is my life motto &#x2F;ˈmɑːtoʊ&#x2F;. I really believe in having a real personal experience instead of reading things from the news. If the news doesn’t make it explosive and eye-catching. You’re going to click away.</p><p>So I urge all of my viewers to go and see the world by yourself.</p><p>We always have been positive in life, so things are getting better.</p><p>All right my flight is boarding.</p><p>Guys it’s hilarious. I’m supposed to meet Georgia in Bali.</p><p>A rookie mistake.</p><p>but we have made a commitment to definitely see each other today</p><p>I basically got a private jet</p><p>blessing in disguise 因祸得福</p><p>quarantine 隔离</p><p>poking my nose 戳我的鼻子</p><p>These things are so fragile and rusty that I feel like the whole floor might crumble if I start jumping 很脆弱而且生锈了， 感觉我只要一跳 整层楼都会塌下来</p><p>Boys will be boys 男孩本色，男人的快乐就是这么简单</p><p>Don’t let these buildings fool you</p><p>The two girls we spoke with, they look quintessentially(typical) Hungarian, Like blue eyes, blonde hair与我们交谈的两个女孩，她们看起来是典型的匈牙利人 蓝眼睛 金头发</p><p>So comforting 很治愈</p><p>Like a baby’s cheek, so soft 好像婴儿的脸颊一样, 超粉嫩</p><p>Hungarian food is heavy 匈牙利菜分量好重呀</p><p>It’s like sort of warmish as well 而且好像還暖暖的     No, it’s  应该是尿吧</p><p>First one to get off the plane 第一个下飞机的</p><p>In the time span of 在多久时间内</p><p>So never mind 算了</p><p>It’s quite nerve-racking 还蛮令人紧张的</p><p>Do you guys notice that I’ve got so tanned Since I got to South Africa你们有发现我来到南非晒黑了吗</p><p>I have been walking up and down for an hour right now 我在这儿来来回回，大概一个小时</p><p>I can feel like I’m getting burned 我感觉快要晒伤了</p><p>“You are 10 out of 10” 你简直是满分</p><p>Is that a compliment to me? 这是在夸我吗</p><p>I’ll walk him through a model that I just built this week 我将带领他参观我本周刚刚建造的一个模型</p><p>Hopefully it goes well 希望一切顺利</p><p>That went much better than I thought 这比我想象的要顺利得多</p><p>He didn’t give me a hard time at all 他一点也没难为我</p><p>In fact, he offered a lot of constructive suggestions that I can really feed on 事实上，他提供了很多建设性的建议，我真的可以借鉴</p><p>SO… Many of you applauded me for using a thermal bottle to drink hot water in the office 对了，上次很多人都夸我在办公室用保温杯喝热水</p><p>I hate to break the spell on this one 我很不想做让人幻灭的事</p><p>but I might have to disappoint you 但是这次，我可能要让你失望了</p><p>Pun intended, in both cases 这两处都是双关，我故意的</p><p>Lunch time. We’re gonna go downstairs to grab a bite. 午餐时间。我们要下楼去吃点东西。</p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/img1.png"></p><p>It’s some steak over rice. 这个是牛扒盖饭</p><p>The food cart 食品推车</p><p>broccoli 西兰花</p><p>We’re about to jump on another call</p><p>现在要打另一个电话了</p><p>I’ll make a note of that 我会记下来的</p><p>I am signing off work now. 我现在要下班了</p><p>It’s been a long day. 漫长的一天</p><p>but I got a lot of stuff done 但我完成了很多事情。</p><p>You gotta do what you gotta do. 该干嘛干嘛</p><p>Today I want to talk about how to elevate your English speaking to a close to native level</p><p>今天来聊聊如何把你的英语口语提高到接近母语的水平</p><p>It’s not gonna be a tremendous amount of redo, in terms of workload </p><p>就工作量而言，也不会有太多重做的部分</p><p>Here’s a clip of the 17-year-old me speaking English a year before I went abroad</p><p>这是我出国前一年，17岁时候说英语的片段</p><p>cringe alert 尴尬预警</p><p>by practicing faithfully the four strategies that I’m about to share with you</p><p>如果能认真实践我下面分享的四个策略</p><p>You’re gonna be talking at least as 900d as that 17-year-old kid.</p><p>你至少能说得和这个17岁的朋友一个水平</p><p>speaking their minds out 大声说出他们的想法</p><p>Hey what are we having for dinner? 嘿，我们晚餐吃什么？</p><p>Come on, dawg, live a little. We’ll worry about that next time</p><p>Come on 对自己好一点 我们下次再担心这个问题</p><p>Let’s face it, vocalize or not, you’re wired to have these thoughts going on in your head anyways 所以 不管出不出声 你脑子里都会有这些想法</p><p>It doesn’t bother nobody. 谁也不影响</p><p>Just to flirt with the girl he’s hitting on? 就为了去撩他看上的那个？</p><p>Dude, that is such an obnoxious display of class 这也太没品了吧</p><p>He’s totally a womanizer in real Iife 这人生活中肯定是个海王</p><p>shadow a native speaker 跟读母语者</p><p>which I think is something that us non-native speakers struggle the most with</p><p>我觉这俩是我们这些非母语者，最难以克服的问题</p><p>or something that’s dragging your feet 或者是拖后腿的东西</p><p>so we’re now heading to 旺角. 我们现在去旺角</p>]]></content>
    
    
    <categories>
      
      <category>English Speaking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Speaking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港散步攻略 | Hong Kong strolling Guide</title>
    <link href="/2023/07/01/travel3/"/>
    <url>/2023/07/01/travel3/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><h1 id="中环"><a href="#中环" class="headerlink" title="中环"></a>中环</h1><h2 id="Part-01"><a href="#Part-01" class="headerlink" title="Part 01:"></a>Part 01:</h2><pre><code class=" mermaid">graph TB;    A[Part 1: 中环地铁站 K 出口] --&gt;Z[皇后像广场 #昃臣爵士鋼像 &amp; 花坛水池];    Z --&gt; B[仿古罗马和希腊建筑的终审法院大厦];    B --&gt; C[渣打银行大楼, 中银大厦, 汇丰银行];    B --&gt; D[汇丰银行门回的铜狮子, 历史街道图];    D --&gt; E[穿过汇丰银行大厦的地面广场];    E --&gt; X[向左走就到了长江集团大厦楼下];    X --&gt; F[延阶而上就是李嘉诚的长江花园];    F --&gt; G[沿着长江花园再往上走];    G --&gt; S[圣约翰主教座堂 #香港最古老的西式教会建筑];        E--&gt; H[往右边走就是皇后大道 #也可以左边流程走完回到这里];    H --&gt; R[继续沿着两边的水泥森林, 不过两个街口];    R --&gt; I[都爹利街 #花岗岩石阶 &amp; 4只煤气灯];    I --&gt; J[走上台阶, 穿过雪场街的一条台阶小道];    J --&gt; T[再往前走不远就到了以夜生活闻名的兰桂坊];    T --&gt; U[不远处的砵典乍街 #由石板铺成的小街道];</code></pre><h2 id="Part-02"><a href="#Part-02" class="headerlink" title="Part 02:"></a>Part 02:</h2><pre><code class=" mermaid">graph TB;       K[Part 2: 中环旁边找到半山电梯] --&gt; L[电梯中途有一家兰桂圆 #丝袜奶茶];    L --&gt; M[顺着电梯继续朝半山进发就到了大馆];    M --&gt; N[继续沿着电梯前行, 就来到些利街];    N --&gt; V[些利街里就是苏豪区SOHO美食区];    N --&gt; O[些利街的尽头 - 清真寺];    M --&gt; P[沿着大馆前面的荷里活道西行];    P --&gt; W[旁边就是摩罗上街古董露天市场];    W --&gt; Q[水坑口街 - 香港历史的开端];</code></pre><h1 id="湾仔"><a href="#湾仔" class="headerlink" title="湾仔"></a>湾仔</h1><p>修顿游乐场🎠   轩尼诗道130-150号         </p><p>利东街-喜帖街   地铁C3出口过马路往右走两百米 最佳时间:中午十二点半到一点半 </p><p>汕头街-适合饮酒 LQV</p><p>Bakehouse  大王东街14号   蛋挞好好味</p><p>和昌大押  庄士敦道62号         </p><p>FEATHER&amp;BONE   卢押道5号  牛排超正</p>]]></content>
    
    
    <categories>
      
      <category>Travel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Travel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blockchain</title>
    <link href="/2023/06/26/Blockchain/"/>
    <url>/2023/06/26/Blockchain/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><p>A blockchain is a chain of blocks that contains information.</p><p>intended to timestamp digital documents so that it’s not possible to backdate them or to tamper with them.</p><p>旨在为数字文件打上时间戳，使其无法追溯或篡改。</p><p>A blockchain is a distributed ledger that is completely open to anyone.</p><p>区块链是一个分布式账本，它对任何人完全开放。</p><ul><li><p><strong>Data:</strong> store the details about a transaction</p></li><li><p><strong>Hash:</strong> </p><ul><li>fingerprint, identifies a block &amp; content, unique; </li><li>Once a block is created, hash is being calculated; </li><li>Changing sth. in block, hash will change</li></ul></li><li><p><strong>Hash of the previous block:</strong> </p></li><li><p><strong>Proof-of-work:</strong> mitigate super computer could effectively tamper with a block and recalculate all the hashes of other blocks</p><ul><li>a mechanism that slows down the creation of new blocks.</li><li>Bitcoins case: 10 minutes to calculate the required proof-of-work and add a new block to the chain.</li><li>if temper - need to recalculate the proof-of-work for all the following blocks.</li></ul></li></ul><p>区块链还有一种 secure themselves 的方式那就是 distributed. Instead of using a central entity to manage the chain, blockchains use a peer-to-peer network and anyone is allowed to join. When someone joins this network, he gets the full copy of the blockchain. The node can use this to verify that everything is still in order.</p><p>Adding a new block: That new block is send to everyone on the network. Each node then verifies the block to make sure that it hasn’t been tampered with. If everything checks out, each node adds this block to their own blockchain.</p><p>All the nodes in this network create consensus.</p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Screenshot%202023-01-17%20at%2014.43.36.png"></p><p>比特币每10分钟会产生一个新的区块，这个新的区块里记录了这10分钟里的所有交易，这些交易就是人们每时每刻在进行比特币的转账交易，每个区块的容量是 1MB，由于每个区块的容量较小，所以以前有时并不能记录所有的交易，并且造成比特币拥堵。</p><p>现在的解决办法就是 hard fork，分叉&#x2F; 建立的一条新链：Bitcoin cash BCH。 所以现在比特币就是有新老两条链，旧的链和新的链没有任何关系，也不能互通。</p><h3 id="共识机制-consensus-x2F-kənˈsensəs-x2F-mechanism-x2F-ˈmekənɪzəm-x2F"><a href="#共识机制-consensus-x2F-kənˈsensəs-x2F-mechanism-x2F-ˈmekənɪzəm-x2F" class="headerlink" title="共识机制 consensus &#x2F;kənˈsensəs&#x2F; mechanism &#x2F;ˈmekənɪzəm&#x2F;"></a>共识机制 consensus &#x2F;<em>kənˈsensəs</em>&#x2F; mechanism &#x2F;<em>ˈmekənɪzəm</em>&#x2F;</h3><p>每添加一页的时候都要达成这两条共识：</p><ul><li>区块链添加区块时候都添加在最长的那条链的尾部</li><li>工作量证明机制（POW），第一位抢先证明了自己的工作能力的那个人才能添加这个区块</li></ul><h4 id="Difficult-amp-Nonse"><a href="#Difficult-amp-Nonse" class="headerlink" title="Difficult &amp; Nonse"></a>Difficult &amp; Nonse</h4><h4 id="比特币对矿工的两大激励作用："><a href="#比特币对矿工的两大激励作用：" class="headerlink" title="比特币对矿工的两大激励作用："></a>比特币对矿工的两大激励作用：</h4><p>如果矿工想要添加一个块，那么他就要算出满足这块的Nonse，这个Nonse满足的条件就是小于系统给出的值，第一个算出来的人将可以获得一个块的奖励（这个奖励从2009年开始一个快生产50个比特币，每隔4年，激励减少一半）。也就是说，这个奖励会随着时间的变化越来越少，预计到2140年发行完毕，这个时候中本聪 设计的第二个激励矿工的奖励：交易手续费。每当有人想要用比特币进行交易的时候，他都需要给矿工手续费，因为他需要矿工把他的交易放在那个区块中。也就是说，如果这个矿工算出了这个区块的Nonse还可以得到这个区块里面所有的手续费。 作为交易比特币的使用者，如果你的比特币，如果你的交易手续费给的多的话，那么矿工就会优先帮你放到区块中，如果给的少甚至不给的话，那么矿工就会不把你放在区块中。因为每个区块的容量是非常有限的，每10分钟只能记录容量为1MB的交易量，所以说矿工会把手续费高的交易放进去。</p><h3 id="账本隐私和快速对账"><a href="#账本隐私和快速对账" class="headerlink" title="账本隐私和快速对账"></a>账本隐私和快速对账</h3><p>比特币系统是通过密码学中的<strong>Hash算法（哈希值）</strong>来解决个人隐私和快速对账2个问题</p><ul><li>对交易信息进行加密，提取实物的特征。看到Hash结果是一串数字，没法反推；</li><li>通过比对hash值是否一致，就可以知道账本是否一致（对账）：如果前面交易信息不同，就会导致<strong>hash值（哈希值）</strong>不一致</li></ul><p><strong>账本一致性&#x2F;共识机制：</strong>用以下2种规则解决<strong>双花问题</strong>（同样一笔数字资产被重复支付，即同样一笔钱被花掉两次或多次）</p><p><strong>比特币系统的规则1：最长链为可信任的链条来保持一致性</strong></p><p><strong>比特币记录交易的原理</strong></p><p>系统内的计算机开始比赛，争取又快又准的算出这倒题目，比拼的是<strong>计算机算力</strong></p><p>胜出的计算机将拥有<strong>记账权成为矿工</strong>，矿工取得一定奖励（6.25比特币）</p><p>胜出的计算机将交易信息打造成新的区块，并将新的区块信息广播出去，使链增长. 每一个计算机都是分布式账本的结点。</p><p>如果有小D伪造账本，这个小D需要不停的成为之后拥有记账权的那个人、才能创造新的区块、并拉长另外一条分叉的链条，让小D伪造的链条成为最长的链条。但分叉的那条链是小D一个人去维护的，是拼不过全网中所有矿工一起创造的主链。</p><p><strong>比特币系统的规则2: 用POW获取记账权来保证账本的一致性</strong></p><p>工作量证明（Proof of Work, POW）</p><p>Nance: 会一直试的计算次数</p><p>寻找小于系统给定的目标值的Hash值：the way that users detect tampering in practice is through hashes, long strings of numbers that serve as proof of work. </p><p>最后找到符合条件的Hash值和Nance</p><p>所以算力越强的电脑，更容易拿到记账权，从而增加区块，拉长链条</p><p>Setting difficulty is accomplished by establishing a “target” for the hash: the lower the target, the smaller the set of valid hashes（是人为设计的一种运算方式，伪造账本只有在长时间保持算力优先才有可能伪造账本，但不可能）</p><p><strong>比特币的分叉</strong></p><p>比特币系统协议层面出现了分歧</p><ul><li>硬分叉（不可合并）：系统更新产生硬分叉，e.g. 比特币区块的扩容：旧比特币单秒交易笔数7笔（1MB对应的字节），但如果不同矿工使用不同版本的比特币系统进行挖矿，一些区块扩容而一些没有，旧矿工无法接受扩容后的区块，就形成分叉</li><li>软分叉（可合并）：如果短暂出现但最后可以并回主链，e.g. 篡改数据</li></ul><p><strong>总结</strong></p><p><strong>比特币不是一种货币，而是一种分布式账务系统。</strong>账本在每个参与者的电脑上备份，并且实时同步和对账；账本记录了一定数量的比特币交易的过程，每次记录下的交易过程和结果都会广播到网络，让所有节点都保持一致</p><p><strong>比特币系统采用了去中心化的方式。</strong>不是没有中心, 而是中心不停变化，每一次中心由节点竞争而得出记账权，记录交易打造成新的区块（每一笔交易中挖矿成功的矿工就是中心）</p><p><strong>区块链1.0技术</strong>（所有比特币中应用到的技术）：分布式数据存储，点对点传输，共识机制（POW），加密算法</p><h3 id="Ethereum-以太坊-representative"><a href="#Ethereum-以太坊-representative" class="headerlink" title="Ethereum 以太坊 (representative)"></a>Ethereum 以太坊 (representative)</h3><p>比特币的不足</p><ul><li>POW算法出块速度慢（10分钟），比特币矿场消耗大量电能</li><li>仅完成了货币的去中心化</li></ul><p><strong>以太坊的改进（V神发明）</strong></p><ul><li>出块速度提升（15秒）：以太坊区块链中将出块时间从10分钟提升到15秒</li><li>修改挖矿机制，POW+POS算法，逐步向POS算法过渡</li><li>智能合约：合同的去中心化，不仅限于货币的去中心化。公开透明无黑幕，违反规则，直接扣除保证金，不可停止</li></ul><p><strong>以太坊平台专业词汇</strong></p><p>MetaMask插件：第三方的虚拟钱包，方便买卖</p><p>账户地址：付款或收款的地址，类似银行卡号</p><p>以太币：基于以太坊的虚拟货币</p><p><strong>手续费（nickname：油费）</strong>: 查看智能合约不需要支付手续费，但是修改智能合约需要支付；付的手续费是以太币</p><ul><li>gas price：油单价</li><li>gas limit：油数量</li><li>计算公式：gas price x gas limit</li></ul><p>查看智能合约不需要支付手续费，但修改智能合约需要支付；为了屏蔽恶意攻击，要支付手续费（油费）；根据网络拥堵情况，决定手续费高低；</p><h3 id="智能合约-Smart-contract-Solidity-ifs-thens"><a href="#智能合约-Smart-contract-Solidity-ifs-thens" class="headerlink" title="智能合约 Smart contract (Solidity) ifs - thens"></a>智能合约 Smart contract (Solidity) ifs - thens</h3><p>Blockchains are also constantly evolving. One of the more recent developments is the creation of smart contracts.</p><ul><li><strong>Self Executing:</strong> Can be used to automatically exchange coins based on certain conditions.</li><li><strong>Uncompromisingly &#x2F;ʌnˈkɑːmprəmaɪzɪŋli&#x2F; Letter Strict</strong>: impersonal, 跑在以太坊系统中的代码合同，本质是一串代码。目前已经存在180w智能合约；</li><li><strong>Immutable:</strong> 智能合约适合表达规则明确且不轻易修改，不受人为主观因素影响；</li></ul><p><strong>以太坊中的Ghost协议（解决Centralization Bias）</strong>：尽快招安分叉区块&#x2F;分支链的尽快合并，以促成统一的区块链</p><blockquote><p>如果继续沿用比特币中的区块奖励方法，假如几乎在同时有多个矿工挖出了一个区块，此时网络中占据较大算力的矿池其算力巨大，而且通常地理位置优越，其网络与更多的节点相连，它发布的区块能跟更快的在网络中传播，因此在出现区块链分叉时，其所在的分叉更有可能成为主链。这种情况下，其他算力较低的矿池或者个体节点就不能得到出块奖励，在以太坊中经常发生区块链分叉的情况，但最后区块链的出块奖励大部分情况下都被大型矿池拿走，而算力小的节点通常很少拿到奖励，这种情况叫做“Centralization Bias”。 如果以太坊沿用比特币中的出块奖励方式，算力较小的矿池几乎拿不到出块奖励，这个看起来不太公平，长此以往，算力小的矿工挖出区块之后就不愿意合并到算力强的矿工挖出的区块链中，因为合并就意味着前面的劳动全部白费了，还不如不要合并，继续在自己挖出的区块上继续挖矿，说不定运气好能超过算力强的区块呢。很明显，这样下去不利于区块链出现分叉后快速合并，会影响到区块链的共识，基于上述原因，以太坊的设计中引入了Ghost协议。</p></blockquote><blockquote><p>————————————————</p></blockquote><blockquote><p>原文链接：<a href="https://blog.csdn.net/t46414704152abc/article/details/81191804">https://blog.csdn.net/t46414704152abc/article/details/81191804</a></p></blockquote><p>以太坊规定每个区块最多包含2个对叔父区块的奖励，以招安分支链的区块，以太坊会给在每次主链矿工的下一代新区块产生时，分出2份奖励来招安，奖励2份7&#x2F;8的出块奖励（每次出块奖励是3个以太币）；同时，招安的主链上的区块，也可以得到2*（1&#x2F;32）的出块奖励；</p><p>每隔一代，区块奖励就会减少：最近的一代uncle区块，可以得到7&#x2F;8的出块奖励作为招安；再隔远一层的uncle区块，则是6&#x2F;8的出块奖励作为招安；间隔8代及以后的uncle区块，则不会得到任何出块奖励。uncle区块的后续分支链上不会得到任何奖励，以激励其尽快进行合并</p><p><strong>以太坊挖矿算法</strong></p><p><strong>POS（Proof of Stake，权益证明）算法</strong>，这种挖矿方式叫虚拟挖矿（virtual mining）</p><p>每一个区块的产出，比拼的不是矿工所有的货币，而是每次挖矿出的保证金。而且这部分保证金会被冻结，会在一定交易笔数之后被解冻，</p><p>目前以太坊用的是<strong>Casper协议，将POW算法和POS算法混合使用</strong>：</p><ul><li>POW算法来进行挖矿得出区块；</li><li>POS算法进行校验：引入了校验者Validator，投票选举区块是否可以称为主链上的区块。校验者必须投入一定数量的以太币作为保证金，投入保证金的多决定了投票的权重；成为校验者，不投票不作为，被举报，也会被没收保证金；每个校验者都有任期，任期结束后也有等待期，可能被检举，等待期后，下注正确的校验者可以收回原来的保证金和校验收益；</li></ul><p>POS算法和POW算法比较</p><ul><li>省掉挖矿过程，减少大量能源损耗；</li><li>通过闭环维护系统安全（POW算法可以通过砸钱买算力支配，转化为对比特币系统的攻击能力；POS算法，则有点类似于股东制公司，我先要成为成为公司的大股东，才能攻击这个公司）</li></ul><p><strong>以太坊的分叉</strong></p><p>硬分叉：分支链和主链无法合并</p><ul><li>比特币因为扩容</li><li>以太坊因为黑客攻击</li></ul><p>黑客攻击case study</p><p>The Dao智能合约：是一个众筹的项目，可以投资某个公司的项目成为投资人。这是最民主的投资，每次投资金额的支出，都需要所有投资人同意才能执行。合同规定有28天资金锁定时间；</p><p>The Dao智能合约允许成员成立子基金，黑客通过bug从其成立的子基金中转账盗取5000w美金到黑客子基金；</p><p>以太坊平台开发团队内部进行了讨论，最后决定要就这次错误进行干预；</p><ul><li>方案一：暴力分叉，约定好上面有黑客攻击的链是不合法的，从分叉链开始挖，但问题是影响到后续区块的合法性；</li><li>方案二：软分叉策略：通过发布升级的平台，让区块不包含the Dao地址的交易（区块中包含the DAO的交易，就认为是非法区块）。新矿工（升级了平台）挖出的区块不包含the Dao地址的交易，而能接在新矿工后面的老矿工是认可上一个区块的，所以也不包含the Dao交易。但当时除了一个bug，就没有收取所有包含the Dao交易的汽油费，结果导致非法交易没法挖矿。</li><li>方案三：硬分叉策略：再一次发布软件升级，让更新了软件后所有the Dao智能合约的人都被强制转移到退款的智能合约，当主链上挖到第192w个区块时，自动会转走the Dao中的黑客基金。因此，所有更新了软件升级的新矿工是有资格跟在第192w个区块之后的（相当于是erase掉黑客交易），这条主链是ETH。但没有更新软件的矿工，其合约不同意第192w个区块进行的转账，所以是无法接在这个非法的第192w个区块后的，因此会在第192w个区块前一个接口发生分叉，叫ETC classic。因此ETH和ETC产生了永久的分叉；</li></ul><p><strong>以太坊总结</strong></p><ol><li>缩短出块时间</li><li>Ghost协议：本质是重金收买分支的策略，防止centralizationi bias</li><li>Casper协议：POS和POW协议的混合体，让校验者保证金的额占比，换算成票数，然后投票选举；</li><li>增加智能合约</li><li>硬分叉</li></ol>]]></content>
    
    
    <categories>
      
      <category>Web3.0</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web3.0</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>All My Projects Description</title>
    <link href="/2023/06/26/ProjectsDescription/"/>
    <url>/2023/06/26/ProjectsDescription/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><h2 id="CV-Chain-Blockchain-Developer-HTML-CSS-JS-Python3"><a href="#CV-Chain-Blockchain-Developer-HTML-CSS-JS-Python3" class="headerlink" title="CV Chain(Blockchain) Developer (HTML + CSS + JS + Python3)"></a>CV Chain(Blockchain) Developer (HTML + CSS + JS + Python3)</h2><p>- Made platform schools or companies can store and check applier or worker CVs on the CV Chain Platform<br>- Backend Technology using Blockchain &amp; Web Development</p><p>Github: <a href="https://github.com/Team-Unhackable/CV-Chain">https://github.com/Team-Unhackable/CV-Chain</a></p><p>Website: <a href="https://cvchain.skyproton.org/">https://cvchain.skyproton.org/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># This Python script is a simple implementation of a blockchain using the Flask web framework. It also interacts with the LeanCloud platform, a backend as a service provider, to handle user data.</span><br><span class="hljs-comment"># 此 Python 脚本是使用 Flask Web 框架的区块链的简单实现。 它还与作为服务提供商的后端 LeanCloud 平台进行交互，以处理用户数据。</span><br><br><span class="hljs-comment"># Imports necessary modules: The script begins by importing various Python modules such as datetime, json, hashlib, os, and flask. It also imports the leancloud module to interact with LeanCloud. </span><br><span class="hljs-comment"># 导入必要的模块：该脚本首先导入各种 Python 模块，例如 datetime、json、hashlib、os 和flask。 它还导入leancloud模块来与LeanCloud交互。</span><br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, jsonify<br><span class="hljs-keyword">import</span> leancloud<br><br><span class="hljs-comment"># Initializes LeanCloud: The leancloud.init() function is called with two empty strings as arguments. Normally, you should replace the &quot;&quot; with your LeanCloud Application ID and Master Key.</span><br><span class="hljs-comment"># 初始化LeanCloud：使用两个空字符串作为参数调用leancloud.init()函数。 通常，这些将是您的 LeanCloud 应用程序 ID 和主密钥。</span><br>leancloud.init(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># Blockchain class: A Blockchain class is defined which has various methods associated with it such as __init__, create_blockchain, get_previous_block, proof_of_work, hash, and is_chain_valid. These methods are used to create a new blockchain, add blocks to the chain, validate the blockchain, and perform other related functions.</span><br><span class="hljs-comment"># 区块链类：定义了一个区块链类，它具有与其关联的各种方法，例如 __init__、create_blockchain、get_previous_block、proof_of_work、hash 和 is_chain_valid。 这些方法用于创建新的区块链、向链添加区块、验证区块链以及执行其他相关功能。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Blockchain</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.chain = []<br>        self.create_blockchain(proof=<span class="hljs-number">1</span>, previous_hash=<span class="hljs-string">&#x27;0&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_blockchain</span>(<span class="hljs-params">self, proof, previous_hash</span>):<br>        block = &#123;<br>            <span class="hljs-string">&#x27;index&#x27;</span>: <span class="hljs-built_in">len</span>(self.chain) + <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&#x27;timestamp&#x27;</span>: <span class="hljs-built_in">str</span>(datetime.datetime.now()),<br>            <span class="hljs-string">&#x27;proof&#x27;</span>: proof,<br>            <span class="hljs-string">&#x27;previous_hash&#x27;</span>: previous_hash<br>        &#125;<br>        self.chain.append(block)<br>        <span class="hljs-keyword">return</span> block<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_previous_block</span>(<span class="hljs-params">self</span>):<br>        last_block = self.chain[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> last_block<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>(<span class="hljs-params">self, previous_proof</span>):<br>        new_proof = <span class="hljs-number">1</span><br>        check_proof = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">while</span> check_proof <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>            hash_operation = hashlib.sha256(<br>                <span class="hljs-built_in">str</span>(new_proof ** <span class="hljs-number">2</span> - previous_proof ** <span class="hljs-number">2</span>).encode()).hexdigest()<br>            <span class="hljs-keyword">if</span> hash_operation[:<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;0000&#x27;</span>:<br>                check_proof = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                new_proof += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> new_proof<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hash</span>(<span class="hljs-params">self, block</span>):  <span class="hljs-comment"># generate a hash of an entire block</span><br>        encoded_block = json.dumps(block, sort_keys=<span class="hljs-literal">True</span>).encode()<br>        <span class="hljs-keyword">return</span> hashlib.sha256(encoded_block).hexdigest()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_chain_valid</span>(<span class="hljs-params">self, chain</span>):  <span class="hljs-comment"># check if the blockchain is valid</span><br>        previous_block = chain[<span class="hljs-number">0</span>]<br>        block_index = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> block_index &lt; <span class="hljs-built_in">len</span>(chain):<br>            block = chain[block_index]<br>            <span class="hljs-keyword">if</span> block[<span class="hljs-string">&quot;previous_hash&quot;</span>] != self.<span class="hljs-built_in">hash</span>(previous_block):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            previous_proof = previous_block[<span class="hljs-string">&#x27;proof&#x27;</span>]<br>            current_proof = block[<span class="hljs-string">&#x27;proof&#x27;</span>]<br>            hash_operation = hashlib.sha256(<br>                <span class="hljs-built_in">str</span>(current_proof ** <span class="hljs-number">2</span> - previous_proof ** <span class="hljs-number">2</span>).encode()).hexdigest()<br>            <span class="hljs-keyword">if</span> hash_operation[:<span class="hljs-number">4</span>] != <span class="hljs-string">&#x27;0000&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            previous_block = block<br>            block_index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># Flask application setup: A Flask application is instantiated and a new Blockchain object is created.</span><br><span class="hljs-comment"># Flask 应用程序设置：实例化 Flask 应用程序并创建新的区块链对象。</span><br>app = Flask(__name__)<br><br>blockchain = Blockchain()<br><br><span class="hljs-comment"># def cache_read():</span><br><span class="hljs-comment">#     url = &quot;https://skyproton.org/save/cache.txt&quot;</span><br><span class="hljs-comment">#     file = urllib.request.urlopen(url)</span><br><span class="hljs-comment">#     name = file.readlines()[0].decode(&quot;utf-8&quot;)</span><br><span class="hljs-comment">#     name = name.strip(&#x27;\n&#x27;)</span><br><span class="hljs-comment">#     return name</span><br><br><br><span class="hljs-comment"># LeanCloud interaction functions: Several functions are defined to interact with LeanCloud, including getCacheUserNameList, updateUserNameIndex, hasIndex, and getUserName. These functions retrieve user data from LeanCloud, update user data, and perform other related operations.</span><br><span class="hljs-comment"># LeanCloud交互函数：定义了几个与LeanCloud交互的函数，包括getCacheUserNameList、updateUserNameIndex、hasIndex和getUserName。 这些函数从 LeanCloud 检索用户数据、更新用户数据并执行其他相关操作。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getCacheUserNameList</span>():<br>    leancloud.init(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">list</span> = []<br>    query = leancloud.Query(<span class="hljs-string">&#x27;UserData&#x27;</span>)<br>    query.equal_to(<span class="hljs-string">&#x27;blockIndex&#x27;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    query.descending(<span class="hljs-string">&#x27;createdAt&#x27;</span>)<br>    user_list = query.find()<br>    <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> user_list:<br>        <span class="hljs-built_in">list</span>.append(user.get(<span class="hljs-string">&#x27;nameOnBlk&#x27;</span>))<br>        user.save()<br>    <span class="hljs-comment"># if len(user_list) &gt; 0:</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">updateUserNameIndex</span>(<span class="hljs-params">inUserName, inIndex</span>):<br>    leancloud.init(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    query = leancloud.Query(<span class="hljs-string">&#x27;UserData&#x27;</span>)<br>    query.equal_to(<span class="hljs-string">&#x27;username&#x27;</span>, inUserName)<br>    flag = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> (query.count()&gt;<span class="hljs-number">0</span>):<br>        user_list = query.find()<br>        <span class="hljs-comment"># for user in user_list:</span><br>        user = user_list[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> (user.get(<span class="hljs-string">&#x27;username&#x27;</span>) == inUserName <span class="hljs-keyword">and</span> user.get(<span class="hljs-string">&#x27;blockIndex&#x27;</span>) == <span class="hljs-string">&quot;&quot;</span>):<br>            user.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;blockIndex&#x27;</span>,<span class="hljs-built_in">str</span>(inIndex))<br>            user.save()<br>            flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hasIndex</span>(<span class="hljs-params">inUserName</span>):<br>    leancloud.init(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    query = leancloud.Query(<span class="hljs-string">&#x27;UserData&#x27;</span>)<br>    query.equal_to(<span class="hljs-string">&#x27;username&#x27;</span>, inUserName)<br>    flag = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> (query.count()&gt;<span class="hljs-number">0</span>):<br>        user_list = query.find()<br>        user = user_list[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> (user.get(<span class="hljs-string">&#x27;blockIndex&#x27;</span>) != <span class="hljs-string">&quot;&quot;</span>):<br>            flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getUserName</span>(<span class="hljs-params">inRealName</span>):<br>    leancloud.init(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    outName = <span class="hljs-string">&#x27;&#x27;</span><br>    flag = <span class="hljs-literal">False</span><br>    query = leancloud.Query(<span class="hljs-string">&#x27;UserData&#x27;</span>)<br>    query.equal_to(<span class="hljs-string">&#x27;nameOnBlk&#x27;</span>, <span class="hljs-built_in">str</span>(inRealName))<br>    <span class="hljs-keyword">if</span> (query.count()&gt;<span class="hljs-number">0</span>):<br>        user_list = query.find()<br>        <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> user_list:<br>            <span class="hljs-keyword">if</span> (user.get(<span class="hljs-string">&#x27;nameOnBlk&#x27;</span>) == inRealName):<br>                outName = user.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>                flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">if</span> (flag):<br>        <span class="hljs-keyword">return</span> outName<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> flag<br><br><br><span class="hljs-comment"># def addUsersIntoBlock():</span><br><span class="hljs-comment">#     userList = []</span><br><span class="hljs-comment">#     # while (len(userList)==0):</span><br><span class="hljs-comment">#     userList = getCacheUserNameList()</span><br><span class="hljs-comment">#     if (len(userList)!=0):</span><br><span class="hljs-comment">#         for user in userList:</span><br><span class="hljs-comment">#             return block_data(user)</span><br><br><span class="hljs-comment"># Flask routes: Two Flask routes are defined, /block_data and /get_chain. The /block_data route is a GET route that retrieves a list of usernames from LeanCloud, adds them to the blockchain, and writes the blockchain data to JSON files. The /get_chain route is also a GET route that returns the entire blockchain and its length.</span><br><span class="hljs-comment"># Flask 路由：定义了两个 Flask 路由，/block_data 和 /get_chain。 /block_data 路由是一个 GET 路由，它从 LeanCloud 检索用户名列表，将它们添加到区块链，并将区块链数据写入 JSON 文件。 /get_chain 路由也是一个 GET 路由，它返回整个区块链及其长度。</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/block_data&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">block_data</span>():<br>    inNameList = getCacheUserNameList()<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">len</span>(inNameList)&gt;<span class="hljs-number">0</span>):<br>        inName = inNameList.pop()<br>        previous_block = blockchain.get_previous_block()<br>        previous_proof = previous_block[<span class="hljs-string">&#x27;proof&#x27;</span>]<br>        proof = blockchain.proof_of_work(previous_proof)<br>        previous_hash = blockchain.<span class="hljs-built_in">hash</span>(previous_block)<br>        block = blockchain.create_blockchain(proof, previous_hash)<br>        response = &#123;<span class="hljs-string">&#x27;data&#x27;</span>: inName,<br>                    <span class="hljs-string">&#x27;index&#x27;</span>: block[<span class="hljs-string">&#x27;index&#x27;</span>],<br>                    <span class="hljs-string">&#x27;timestamp&#x27;</span>: block[<span class="hljs-string">&#x27;timestamp&#x27;</span>],<br>                    <span class="hljs-string">&#x27;proof&#x27;</span>: block[<span class="hljs-string">&#x27;proof&#x27;</span>],<br>                    <span class="hljs-string">&#x27;previous_hash&#x27;</span>: block[<span class="hljs-string">&#x27;previous_hash&#x27;</span>]&#125;<br>        <br>        username = getUserName(inName)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> hasIndex(username)):<br>            updateUserNameIndex(username, block[<span class="hljs-string">&#x27;index&#x27;</span>])<br><br>        json_object = json.dumps(response, indent = <span class="hljs-number">5</span>)<br>    <br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./data/main/main_block_&quot;</span> + <span class="hljs-built_in">str</span>(block[<span class="hljs-string">&#x27;index&#x27;</span>]) + <span class="hljs-string">&quot;.json&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> outfile:<br>            outfile.write(json_object)<br>        <br>        os.mkdir(<span class="hljs-string">&quot;./data/&quot;</span> + <span class="hljs-built_in">str</span>(block[<span class="hljs-string">&#x27;index&#x27;</span>]))<br><br>        count = &#123;<span class="hljs-string">&#x27;num&#x27;</span>: <span class="hljs-built_in">len</span>(blockchain.chain)<br>        &#125;<br>        json_count = json.dumps(count, indent = <span class="hljs-number">1</span>)<br>    <br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./count/main.json&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> outfile:<br>            outfile.write(json_count)<br>        <br><br>        <span class="hljs-comment">#return jsonify(response), 200</span><br>    <span class="hljs-keyword">return</span> jsonify(response = &#123;<span class="hljs-string">&#x27;data&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;index&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;timestamp&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;proof&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;previous_hash&#x27;</span>: <span class="hljs-literal">None</span>&#125;), <span class="hljs-number">200</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/get_chain&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_chain</span>():<br>    response = &#123;<span class="hljs-string">&#x27;chain&#x27;</span>: blockchain.chain,<br>                <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-built_in">len</span>(blockchain.chain)&#125;<br>    <span class="hljs-keyword">return</span> jsonify(response), <span class="hljs-number">200</span><br><br><span class="hljs-comment"># Application run: Finally, the Flask application is run on host &#x27;0.0.0.0&#x27; and port 5001.</span><br><span class="hljs-comment"># 应用程序运行：最后，Flask 应用程序在主机“0.0.0.0”和端口 5001 上运行。</span><br>app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5001</span>)<br></code></pre></td></tr></table></figure><p>The script is part of a larger system. It is designed to create a blockchain, add blocks to the chain when new users are added to the LeanCloud service, and provide a way to retrieve the entire blockchain via a web API. It also creates a new directory for each block and two JSON <em>&#x2F;<em>ˈdʒeɪsn</em>&#x2F;</em> files: one that contains the block data and another that contains the current length of the chain.<br>该脚本是更大系统的一部分。 它旨在创建一个区块链，当新用户添加到 LeanCloud 服务时将区块添加到链中，并提供一种通过 Web API 检索整个区块链的方法。 它还为每个块创建一个新目录和两个 JSON 文件：一个包含块数据，另一个包含链的当前长度。</p><p>This is a very basic implementation of a blockchain. It lacks elements like peer-to-peer network, consensus algorithm for resolving conflicts, transaction handling, etc. that you would find in a full-fledged blockchain system like Bitcoin or Ethereum.<br>这是区块链的一个非常基本的实现。它缺乏点对点网络、解决冲突的共识算法、交易处理等元素，而这些元素你会在比特币或以太坊等成熟的区块链系统中找到。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> leancloud<br><br><span class="hljs-comment"># 定义了一个名为getCacheUserNameListLen()的函数，该函数使用LeanCloud的SDK连接到云端数据库，并查询名为UserData的表格中，blockIndex字段为空的记录的数量，并返回该数量。</span><br><span class="hljs-comment"># A function named getCacheUserNameListLen() is defined that uses LeanCloud&#x27;s SDK to connect to the cloud database and query the number of records in a table named UserData with the blockIndex field empty and return that number.</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getCacheUserNameListLen</span>():<br>    leancloud.init(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">list</span> = []<br>    query = leancloud.Query(<span class="hljs-string">&#x27;UserData&#x27;</span>)<br>    query.equal_to(<span class="hljs-string">&#x27;blockIndex&#x27;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    user_list = query.find()<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(user_list)<br>  <br><span class="hljs-comment"># 使用一个while循环，不断地向URL http://127.0.0.1:5001/block_data 发送GET请求，每隔5秒钟进行一次请求。</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    URL = <span class="hljs-string">&quot;http://127.0.0.1:5001/block_data&quot;</span><br>    <span class="hljs-keyword">if</span> (getCacheUserNameListLen()&gt;<span class="hljs-number">0</span>): <span class="hljs-comment"># 在每次循环中，如果getCacheUserNameListLen()函数返回的值大于0</span><br>        r = requests.get(url = URL)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Get&quot;</span>) <span class="hljs-comment"># 则打印&quot;Get&quot;，表示可以发送请求；</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wait&quot;</span>) <span class="hljs-comment"># 否则打印&quot;Wait&quot;，表示需要等待。</span><br>    time.sleep(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> leancloud<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 定义了一个名为getCacheBusinessListLen()的函数，该函数使用LeanCloud的SDK连接到云端数据库，并查询名为UserData的表格中，isAdded字段为&quot;f&quot;的记录的数量，并返回该数量。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getCacheBusinessListLen</span>():<br>    leancloud.init(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    bList = []<br>    query = leancloud.Query(<span class="hljs-string">&#x27;UserData&#x27;</span>)<br>    query.equal_to(<span class="hljs-string">&#x27;isAdded&#x27;</span>, <span class="hljs-string">&quot;f&quot;</span>)<br>    user_list = query.find()<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(user_list)<br>  <br><span class="hljs-comment"># 使用一个while循环，不断地向URL http://127.0.0.1:5002/block_data 发送GET请求，每隔5秒钟进行一次请求。</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    URL = <span class="hljs-string">&quot;http://127.0.0.1:5002/block_data&quot;</span><br>    <span class="hljs-keyword">if</span> (getCacheBusinessListLen()&gt;<span class="hljs-number">0</span>): <span class="hljs-comment"># 在每次循环中，如果getCacheBusinessListLen()函数返回的值大于0</span><br>        r = requests.get(url = URL)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Get&quot;</span>) <span class="hljs-comment"># 则打印&quot;Get&quot;，表示可以发送请求</span><br>        <br>        <span class="hljs-comment"># 在请求成功后，程序会扫描指定目录下的文件，获取文件数量并将文件序号存储到JSON文件中。</span><br>        <span class="hljs-comment"># 具体来说，程序会遍历目录&quot;/var/www/html/blockchain/data&quot;下的所有文件夹。</span><br>        <span class="hljs-comment"># 对于每个文件夹，如果它包含文件，则程序会找到该文件夹中编号最大的文件，</span><br>        <span class="hljs-comment"># 并将该文件的序号减1写入一个名为&quot;&#123;文件夹编号&#125;.json&quot;的JSON文件中，存储在&quot;./count&quot;目录下。</span><br>        path = <span class="hljs-string">&quot;/var/www/html/blockchain/data&quot;</span><br>        <span class="hljs-built_in">list</span> = os.listdir(path)<br>        number_files = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, number_files+<span class="hljs-number">1</span>):<br>            path = <span class="hljs-string">&quot;/var/www/html/blockchain/data/&quot;</span> + <span class="hljs-built_in">str</span>(i)<br>            subdata_file = os.listdir(path)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(subdata_file) &gt; <span class="hljs-number">0</span>:<br>                index = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">max</span>(subdata_file)[<span class="hljs-number">0</span>]) - <span class="hljs-number">1</span><br>                num = &#123;<span class="hljs-string">&#x27;num&#x27;</span>: index&#125;<br>                json_object = json.dumps(num, indent = <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./count/&quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;.json&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> outfile:<br>                    outfile.write(json_object)<br>        <br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wait&quot;</span>) <span class="hljs-comment"># 否则打印&quot;Wait&quot;，表示需要等待。</span><br>    time.sleep(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, jsonify<br><span class="hljs-keyword">import</span> leancloud<br><br><span class="hljs-comment"># 区块链类：该类是区块链系统的核心。 它包含处理区块链操作的各种方法，例如创建新区块 (create_blockchain)、获取前一个区块 (get_previous_block)、执行工作证明 (proof_of_work)、为区块生成哈希 (hash) 以及验证区块链 (is_chain_valid)。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Blockchain</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.chain = []<br>        self.create_blockchain(proof=<span class="hljs-number">1</span>, previous_hash=<span class="hljs-string">&#x27;0&#x27;</span>, UID=<span class="hljs-string">&#x27;0&#x27;</span>, index=<span class="hljs-string">&#x27;1&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_blockchain</span>(<span class="hljs-params">self, proof, previous_hash, UID, index</span>):<br>        <span class="hljs-comment">#index_1 = os.path.splitext(&quot;./data/&quot; + str(UID) + &quot;/&quot; + str(index) + &quot;.json&quot;)[0]</span><br>        block = &#123;<br>            <span class="hljs-comment">#&#x27;index&#x27;: int(index_1[-1:]) + 1,</span><br>            <span class="hljs-string">&#x27;index&#x27;</span>: <span class="hljs-built_in">int</span>(index) + <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&#x27;timestamp&#x27;</span>: <span class="hljs-built_in">str</span>(datetime.datetime.now()),<br>            <span class="hljs-string">&#x27;proof&#x27;</span>: proof,<br>            <span class="hljs-string">&#x27;previous_hash&#x27;</span>: previous_hash<br>        &#125;<br>        self.chain.append(block)<br>        <span class="hljs-keyword">return</span> block<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_previous_block</span>(<span class="hljs-params">self</span>):<br>        last_block = self.chain[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> last_block<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>(<span class="hljs-params">self, previous_proof</span>):<br>        new_proof = <span class="hljs-number">1</span><br>        check_proof = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">while</span> check_proof <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>            hash_operation = hashlib.sha256(<br>                <span class="hljs-built_in">str</span>(new_proof ** <span class="hljs-number">2</span> - previous_proof ** <span class="hljs-number">2</span>).encode()).hexdigest()<br>            <span class="hljs-keyword">if</span> hash_operation[:<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;0000&#x27;</span>:<br>                check_proof = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                new_proof += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> new_proof<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hash</span>(<span class="hljs-params">self, block</span>):  <span class="hljs-comment"># generate a hash of an entire block</span><br>        encoded_block = json.dumps(block, sort_keys=<span class="hljs-literal">True</span>).encode()<br>        <span class="hljs-keyword">return</span> hashlib.sha256(encoded_block).hexdigest()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_chain_valid</span>(<span class="hljs-params">self, chain</span>):  <span class="hljs-comment"># check if the blockchain is valid</span><br>        previous_block = chain[<span class="hljs-number">0</span>]<br>        block_index = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> block_index &lt; <span class="hljs-built_in">len</span>(chain):<br>            block = chain[block_index]<br>            <span class="hljs-keyword">if</span> block[<span class="hljs-string">&quot;previous_hash&quot;</span>] != self.<span class="hljs-built_in">hash</span>(previous_block):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            previous_proof = previous_block[<span class="hljs-string">&#x27;proof&#x27;</span>]<br>            current_proof = block[<span class="hljs-string">&#x27;proof&#x27;</span>]<br>            hash_operation = hashlib.sha256(<br>                <span class="hljs-built_in">str</span>(current_proof ** <span class="hljs-number">2</span> - previous_proof ** <span class="hljs-number">2</span>).encode()).hexdigest()<br>            <span class="hljs-keyword">if</span> hash_operation[:<span class="hljs-number">4</span>] != <span class="hljs-string">&#x27;0000&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            previous_block = block<br>            block_index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># Flask 应用程序：Flask 应用程序提供与区块链系统交互的接口。 路由 /block_data 是处理区块链操作的端点。 它从 LeanCloud 获取业务列表，对于每个业务，它执行工作量证明，在区块链中创建一个新块，然后将此块数据作为 json 文件保存在特定目录中。</span><br><span class="hljs-comment"># Flask app: The Flask application provides an interface to interact with the blockchain system. The route /block_data is the endpoint where the blockchain operations are handled. It fetches the business list from LeanCloud, and for each business, it performs a proof of work, creates a new block in the blockchain and then saves this block data as a json file in a specific directory.</span><br>app = Flask(__name__)<br><br>blockchain = Blockchain()<br><br><span class="hljs-comment"># def cache_read(): 被注释掉，与缓存和更新用户数据等附加功能有关，但当前代码中并未使用它们。</span><br><span class="hljs-comment">#     url = &quot;https://skyproton.org/save/cache.txt&quot;</span><br><span class="hljs-comment">#     file = urllib.request.urlopen(url)</span><br><span class="hljs-comment">#     name = file.readlines()[0].decode(&quot;utf-8&quot;)</span><br><span class="hljs-comment">#     name = name.strip(&#x27;\n&#x27;)</span><br><span class="hljs-comment">#     return name</span><br><br><span class="hljs-comment"># LeanCloud 操作：该代码包含多个与 LeanCloud 服务交互以存储和获取数据的函数。 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getCacheUserNameList</span>():<br>    leancloud.init(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">list</span> = []<br>    query = leancloud.Query(<span class="hljs-string">&#x27;UserData&#x27;</span>)<br>    query.equal_to(<span class="hljs-string">&#x27;blockIndex&#x27;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    query.descending(<span class="hljs-string">&#x27;createdAt&#x27;</span>)<br>    user_list = query.find()<br>    <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> user_list:<br>        <span class="hljs-built_in">list</span>.append(user.get(<span class="hljs-string">&#x27;nameOnBlk&#x27;</span>))<br>        user.save()<br>    <span class="hljs-comment"># if len(user_list) &gt; 0:</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">updateUserNameIndex</span>(<span class="hljs-params">inUserName, inIndex</span>):<br>    leancloud.init(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    query = leancloud.Query(<span class="hljs-string">&#x27;UserData&#x27;</span>)<br>    query.equal_to(<span class="hljs-string">&#x27;username&#x27;</span>, inUserName)<br>    flag = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> (query.count()&gt;<span class="hljs-number">0</span>):<br>        user_list = query.find()<br>        <span class="hljs-comment"># for user in user_list:</span><br>        user = user_list[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> (user.get(<span class="hljs-string">&#x27;username&#x27;</span>) == inUserName <span class="hljs-keyword">and</span> user.get(<span class="hljs-string">&#x27;blockIndex&#x27;</span>) == <span class="hljs-string">&quot;&quot;</span>):<br>            user.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;blockIndex&#x27;</span>,<span class="hljs-built_in">str</span>(inIndex))<br>            user.save()<br>            flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hasIndex</span>(<span class="hljs-params">inUserName</span>):<br>    leancloud.init(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    query = leancloud.Query(<span class="hljs-string">&#x27;UserData&#x27;</span>)<br>    query.equal_to(<span class="hljs-string">&#x27;username&#x27;</span>, inUserName)<br>    flag = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> (query.count()&gt;<span class="hljs-number">0</span>):<br>        user_list = query.find()<br>        user = user_list[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> (user.get(<span class="hljs-string">&#x27;blockIndex&#x27;</span>) != <span class="hljs-string">&quot;&quot;</span>):<br>            flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getUserName</span>(<span class="hljs-params">inRealName</span>):<br>    leancloud.init(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    outName = <span class="hljs-string">&#x27;&#x27;</span><br>    flag = <span class="hljs-literal">False</span><br>    query = leancloud.Query(<span class="hljs-string">&#x27;UserData&#x27;</span>)<br>    query.equal_to(<span class="hljs-string">&#x27;nameOnBlk&#x27;</span>, <span class="hljs-built_in">str</span>(inRealName))<br>    <span class="hljs-keyword">if</span> (query.count()&gt;<span class="hljs-number">0</span>):<br>        user_list = query.find()<br>        <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> user_list:<br>            <span class="hljs-keyword">if</span> (user.get(<span class="hljs-string">&#x27;nameOnBlk&#x27;</span>) == inRealName):<br>                outName = user.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>                flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">if</span> (flag):<br>        <span class="hljs-keyword">return</span> outName<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> flag<br><br><span class="hljs-comment"># 例如，getCacheBusinessList 获取尚未添加到区块链的企业列表（其中“isAdded”等于“f”）。 然后，这些业务将被添加到区块链中并标记为已添加（将“isAdded”设置为“t”）。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getCacheBusinessList</span>():<br>    leancloud.init(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    bList = <span class="hljs-built_in">list</span>()<br>    query = leancloud.Query(<span class="hljs-string">&#x27;UserData&#x27;</span>)<br>    query.equal_to(<span class="hljs-string">&#x27;isAdded&#x27;</span>, <span class="hljs-string">&quot;f&quot;</span>)<br>    query.descending(<span class="hljs-string">&#x27;createdAt&#x27;</span>)<br>    user_list = query.find()<br>    <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> user_list:<br>        inList = <span class="hljs-built_in">list</span>()<br>        inList.append(user.get(<span class="hljs-string">&#x27;UID&#x27;</span>))<br>        inList.append(user.get(<span class="hljs-string">&#x27;companyType&#x27;</span>))<br>        inList.append(user.get(<span class="hljs-string">&#x27;companyName&#x27;</span>))<br>        inList.append(user.get(<span class="hljs-string">&#x27;DegreeOrJob&#x27;</span>))<br>        inList.append(user.get(<span class="hljs-string">&#x27;ClassOrYear&#x27;</span>))<br>        bList.append(inList)<br>        user.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;isAdded&quot;</span>,<span class="hljs-string">&quot;t&quot;</span>)<br>        user.save()<br>    <span class="hljs-keyword">return</span> bList<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/block_data&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">block_data</span>():<br>    inNameList = getCacheBusinessList()<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">len</span>(inNameList)&gt;<span class="hljs-number">0</span>):<br>        inName = inNameList.pop()<br>        UID = inName[<span class="hljs-number">0</span>]<br>        inType = inName[<span class="hljs-number">1</span>]<br>        inBName = inName[<span class="hljs-number">2</span>]<br>        inData_1 = inName[<span class="hljs-number">3</span>]<br>        inData_2 = inName[<span class="hljs-number">4</span>]<br>        previous_block = blockchain.get_previous_block()<br>        previous_proof = previous_block[<span class="hljs-string">&#x27;proof&#x27;</span>]<br>        proof = blockchain.proof_of_work(previous_proof)<br>        previous_hash = blockchain.<span class="hljs-built_in">hash</span>(previous_block)<br><br>        path = <span class="hljs-string">&quot;/var/www/html/blockchain/data/&quot;</span> + <span class="hljs-built_in">str</span>(UID)<br>        subdata_file = os.listdir(path)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(subdata_file) &gt; <span class="hljs-number">0</span>:<br>            index = <span class="hljs-built_in">max</span>(subdata_file)[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">else</span>:<br>            index = <span class="hljs-number">1</span><br><br>        block = blockchain.create_blockchain(proof, previous_hash, UID, index)<br>        response = &#123;<span class="hljs-string">&#x27;type&#x27;</span>: inType,<br>                    <span class="hljs-string">&#x27;data&#x27;</span>: &#123;<br>                        <span class="hljs-string">&#x27;Name_of_Work_or_Study&#x27;</span>: inBName,<br>                        <span class="hljs-string">&#x27;data_1&#x27;</span>: inData_1,<br>                        <span class="hljs-string">&#x27;data_2&#x27;</span>: inData_2,<br>                    &#125;,<br>                    <span class="hljs-string">&#x27;index&#x27;</span>: block[<span class="hljs-string">&#x27;index&#x27;</span>],<br>                    <span class="hljs-string">&#x27;timestamp&#x27;</span>: block[<span class="hljs-string">&#x27;timestamp&#x27;</span>],<br>                    <span class="hljs-string">&#x27;proof&#x27;</span>: block[<span class="hljs-string">&#x27;proof&#x27;</span>],<br>                    <span class="hljs-string">&#x27;previous_hash&#x27;</span>: block[<span class="hljs-string">&#x27;previous_hash&#x27;</span>]&#125;<br>        <br>        <span class="hljs-comment"># username = getUserName(inName)</span><br>        <span class="hljs-comment"># if (not hasIndex(username)):</span><br>        <span class="hljs-comment">#     updateUserNameIndex(username, block[&#x27;index&#x27;])</span><br><br>        json_object = json.dumps(response, indent = <span class="hljs-number">5</span>)<br>    <br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./data/&quot;</span> + <span class="hljs-built_in">str</span>(UID) + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-built_in">str</span>(block[<span class="hljs-string">&#x27;index&#x27;</span>]) + <span class="hljs-string">&quot;.json&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> outfile:<br>            outfile.write(json_object)<br><br>        <span class="hljs-comment">#return jsonify(response), 200</span><br>    <span class="hljs-keyword">return</span> jsonify(response = &#123;<span class="hljs-string">&#x27;data&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;index&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;timestamp&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;proof&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;previous_hash&#x27;</span>: <span class="hljs-literal">None</span>&#125;), <span class="hljs-number">200</span><br><br>app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5002</span>) <span class="hljs-comment"># 应用程序运行：最后一行在主机“0.0.0.0”和端口 5002 上运行 Flask 应用程序。</span><br></code></pre></td></tr></table></figure><h2 id="A-Blockchain-Implementation-C"><a href="#A-Blockchain-Implementation-C" class="headerlink" title="A Blockchain Implementation (C++)"></a>A Blockchain Implementation (C++)</h2><p>- This program is about Blockchain which is a cryptographic tool. The goal is to be used in Fintech to protect the chronological order of transactions. The user can use this program to store the information that he wants to save, the information can neither be deleted nor modified. And provide the function of displaying chain data to facilitate user queries. If there are malicious changes to transaction data, the program detects and reflects them.<br>- 这个是一个关于加密工具区块链的程序。目标是在金融科技中使用，以保护交易的时间顺序。用户可以使用这个程序来存储他想要保存的信息，这些信息既不能删除也不能修改。并提供链数据显示功能，方便用户查询。如果存在对事务数据的恶意更改，程序将检测并反映这些更改。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// First of all, here is the library of the program. It includes 3 libraries and given files hpp. and a cpp.</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;SHA1.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;SHA1.cpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 1000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// The program designs two structures, namely Block and Blockchain. Among them, the Block structure contains the data, number, hash value, and previous hash value of the Block. In order to facilitate the calculation, when we designed the Blockchain structure, we maintained an array of Blocks with a capacity of 1000 and recorded the number of Blocks in the current Blockchain.</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Block</span> &#123; <span class="hljs-comment">// here is the structure of block</span><br>    string Data;  <span class="hljs-comment">// The data that the user wants to enter(store)</span><br>    <span class="hljs-type">int</span> Number; <span class="hljs-comment">// the index of the blocks</span><br>    string p_hash; <span class="hljs-comment">// previous hash value</span><br>    string hash; <span class="hljs-comment">// hash value</span><br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Blockchain</span>&#123; <span class="hljs-comment">// here is the structure of blockchain which is including blocks</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Block</span> BlockArray[MAX]; <span class="hljs-comment">// By default, 1000 blocks can be added</span><br>    <span class="hljs-type">int</span> m_Size;<br>&#125;;<br><br><span class="hljs-comment">// The project is built on the blockchain. This program allows the user to perform four operations: 1. Add a new block 2. Display the chain data 3. Check the integrity of the data 0. Exit the program If the user writes numbers other than these four, such as 4, 5, 6. The system redisplays the menu and asks the user to retype. When the user enters 0 to exit the program.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showMenu</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// display the menu</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;******************************************************************************************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;**************************************** Blockchain **************************************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;********* This is the blockchain menu, you can run related functions by number ***********&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*                                  1. Add a new block                                    *&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*                                  2. Search block by given information                  *&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*                                  3. Check the integrity of the data                    *&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*                                  0. Exit the program                                   *&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;******************************************************************************************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// Regarding the first operation, the user can add blocks by himself, store the information (data) that the user wants to store into the blocks, and generate a hash value to ensure security. First, the program checks whether the blockchain&#x27;s memory is full and if not, the following operations are performed.</span><br><span class="hljs-comment">// The system will ask the number of blocks the user wants to add. And then the user could enter the information(data) into it. If x blocks are added successfully, the system will display &quot;You have added x block(s) successfully!!! &quot;. After the user enters the information, the system will automatically calculate its hash value. And store the information of the block in the corresponding structure.</span><br><span class="hljs-comment">// After the first function completes, the system displays the menu again to the user, allowing the user to choose the next step.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addBlocks</span><span class="hljs-params">(Blockchain * blo)</span></span>&#123; <span class="hljs-comment">// This is the function to add blocks</span><br>    <span class="hljs-keyword">if</span> (blo -&gt; m_Size == MAX) &#123; <span class="hljs-comment">// Blocks cannot be added if they reach 1000</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Adding failure!&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Enter the number of blocks you want to add: &quot;</span>;<br>        <span class="hljs-type">int</span> addNum = <span class="hljs-number">0</span>; <span class="hljs-comment">// Initialize the number of blocks that user want to add</span><br>        cin &gt;&gt; addNum;<br>        <span class="hljs-keyword">if</span> (addNum &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// Calculate the new space size, the adding number should not be negative</span><br>            <span class="hljs-type">int</span> newSize; <span class="hljs-comment">// 0</span><br>            newSize = blo-&gt;m_Size + addNum;<br>            string data = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// Initialize the data of block</span><br>            string p_hash = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// Initialize the previous hash of block</span><br>            <br>            <span class="hljs-keyword">if</span> (blo-&gt;m_Size != <span class="hljs-number">0</span>)&#123;<br>                p_hash = blo-&gt;BlockArray[blo-&gt;m_Size - <span class="hljs-number">1</span>].hash; <span class="hljs-comment">// in case previous hash become the initialize value</span><br>            &#125;<br>            <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = blo-&gt;m_Size; i &lt; newSize; i++) &#123; <span class="hljs-comment">// i = 0, i &lt; 2</span><br>                cout &lt;&lt; endl;<br>                cout&lt;&lt;<span class="hljs-string">&quot;***** Please enter the information of block No.&quot;</span>&lt;&lt;i+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">&quot; *****&quot;</span>&lt;&lt;endl;<br>                cout&lt;&lt;<span class="hljs-string">&quot;\tPlease enter the data: &quot;</span>; cin &gt;&gt; data;<br>                cout &lt;&lt; endl;<br>                <br>                <span class="hljs-function">string <span class="hljs-title">input</span><span class="hljs-params">(data)</span></span>;<br>                SHA1 checksum;<br>                checksum.<span class="hljs-built_in">update</span>(input);<br>                <span class="hljs-type">char</span> hash[<span class="hljs-number">41</span>];<br>                <span class="hljs-built_in">strcpy</span>(hash, checksum.<span class="hljs-built_in">final</span>().<span class="hljs-built_in">c_str</span>());<br>                <br>                blo -&gt; BlockArray[i].Data = data;<br>                blo -&gt; BlockArray[i].Number = i+<span class="hljs-number">1</span>;<br>                blo -&gt; BlockArray[i].p_hash = p_hash;<br>                blo -&gt; BlockArray[i].hash = hash;<br>                <br>                p_hash = hash;<br>                blo -&gt; m_Size++; <span class="hljs-comment">// the size of block could plus 1 after adding 1 block.</span><br>            &#125;<br>            cout &lt;&lt; <span class="hljs-string">&quot;You have added &quot;</span> &lt;&lt; addNum &lt;&lt; <span class="hljs-string">&quot; block(s) successfully!!!&quot;</span> &lt;&lt; endl;<br>            <br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Incorrect input!&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// First, the second operation checks if there are blocks in it. If the user directly selects this action without entering a new block, the system will display Empty, the system will redisplay the menu and let the user re-enter.</span><br><span class="hljs-comment">// If there is the block(s), the second operation can display the data of the chain in three ways: 1. the user can display the data of the whole chain by entering the block number. 2. the data of the whole chain. 3. the hash value of a specific block.</span><br><span class="hljs-comment">// If the user enters another number, the program will display: &quot;Input wrong or empty information!&quot;. The And then program redisplays the three query methods.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">findBlock</span><span class="hljs-params">(Blockchain * blo)</span></span>&#123;   <span class="hljs-comment">// display the chain data in a number of ways</span><br>                                    <span class="hljs-comment">// by block number</span><br>                                    <span class="hljs-comment">// the data of the whole chain</span><br>                                    <span class="hljs-comment">// the hash values of a particular block</span><br>    <br>  <span class="hljs-comment">// Take case 1 as an example. When the &quot;select&quot; input by the user is 1, execute case 1. Check if the block is not empty, then compare the &quot;Number&quot; stored in the structure with the number that the user wants to find for traversal and comparison. If found, output the information of the entire chain. The program also designs a Boolean variable check, which is used if the data entered by the user matches, if not found, the program outputs &quot;No corresponding block was found!&quot;. And asked to re-enter the numbers. If the data entered when querying the method is incorrect, the function will exit, and the menu will be redisplayed.</span><br>    <span class="hljs-keyword">if</span> (blo-&gt;m_Size == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// if the size of block is zero, output Empty!</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Empty!!&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;1.Search by block number&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;2.Search by the data of the whole chain&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;3.Search by the hash values of a particular block&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Please enter the search method: &quot;</span>;<br>        <span class="hljs-type">int</span> select;<br>        <span class="hljs-type">int</span> S_number; <span class="hljs-comment">// initialize the block number that user will input</span><br>        string data;<br>        string hash;<br>        cin &gt;&gt; select;<br>        <span class="hljs-keyword">if</span> (select == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// Search by block number</span><br>            cout &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Please enter the block number you are looking for: &quot;</span>;<br>            cin &gt;&gt; S_number; <span class="hljs-comment">// let user input the block number they want to search</span><br>            <span class="hljs-keyword">if</span> (blo-&gt;m_Size == <span class="hljs-number">0</span>)&#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;Empty!!&quot;</span> &lt;&lt; endl;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// Display the informations of the block that the user wants to see according to the block number entered by the user</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;************************************************************************&quot;</span> &lt;&lt; endl;<br>                cout &lt;&lt; <span class="hljs-string">&quot;***************** Here is the information of block &quot;</span> &lt;&lt; S_number &lt;&lt; <span class="hljs-string">&quot; *****************&quot;</span> &lt;&lt; endl;<br>                cout &lt;&lt; <span class="hljs-string">&quot;*                                                                      *&quot;</span> &lt;&lt; endl;<br>                cout &lt;&lt; <span class="hljs-string">&quot;\tNumber: &quot;</span> &lt;&lt; blo-&gt;BlockArray[S_number<span class="hljs-number">-1</span>].Number &lt;&lt; endl;<br>                cout &lt;&lt; <span class="hljs-string">&quot;\tData: &quot;</span> &lt;&lt; blo-&gt;BlockArray[S_number<span class="hljs-number">-1</span>].Data &lt;&lt; endl;<br>                cout &lt;&lt; <span class="hljs-string">&quot;\tHash value: &quot;</span> &lt;&lt; blo-&gt;BlockArray[S_number<span class="hljs-number">-1</span>].hash &lt;&lt; endl;<br>                cout &lt;&lt; <span class="hljs-string">&quot;\tPrevious hash value: &quot;</span> &lt;&lt; blo-&gt;BlockArray[S_number<span class="hljs-number">-1</span>].p_hash &lt;&lt; endl;<br>                cout &lt;&lt; <span class="hljs-string">&quot;*                                                                      *&quot;</span> &lt;&lt; endl;<br>                cout &lt;&lt; <span class="hljs-string">&quot;************************************************************************&quot;</span> &lt;&lt; endl;<br>            &#125;<br>            cout &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (select == <span class="hljs-number">2</span>)&#123; <span class="hljs-comment">// Search by the data of the whole chain</span><br>            cout &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Please enter the data of the block you are looking for: &quot;</span>;<br>            cin &gt;&gt; data;<br>            <span class="hljs-keyword">if</span> (blo-&gt;m_Size == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// if the size of block is zero, output Empty!</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;Empty!!&quot;</span> &lt;&lt; endl;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// Display the informations of the block that the user wants to see according to the block data entered by the user</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; blo-&gt;m_Size; i++)&#123;<br>                    <span class="hljs-keyword">if</span> (blo-&gt;BlockArray[i].Data == data) &#123;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;************************************************************************&quot;</span> &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;***************** Here is the information of block &quot;</span> &lt;&lt; i+<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; *****************&quot;</span> &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;*                                                                      *&quot;</span> &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;\tNumber: &quot;</span> &lt;&lt; blo-&gt;BlockArray[i].Number &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;\tData: &quot;</span> &lt;&lt; blo-&gt;BlockArray[i].Data &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;\tHash value: &quot;</span> &lt;&lt; blo-&gt;BlockArray[i].hash &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;\tPrevious hash value: &quot;</span> &lt;&lt; blo-&gt;BlockArray[i].p_hash &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;*                                                                      *&quot;</span> &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;************************************************************************&quot;</span> &lt;&lt; endl;<br>                    &#125;   <br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (select == <span class="hljs-number">3</span>)&#123; <span class="hljs-comment">// Search by the hash values of a particular block</span><br>            cout &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Please enter the hash value of the block you are looking for: &quot;</span>;<br>            cin &gt;&gt; hash;<br>            <span class="hljs-keyword">if</span> (blo-&gt;m_Size == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// if the size of block is zero, output Empty!</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;Empty!!&quot;</span> &lt;&lt; endl;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// Display the informations of the block that the user wants to see according to the hash values of a particular block entered by the user</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; blo-&gt;m_Size; i++)&#123;<br>                    <span class="hljs-keyword">if</span> (blo-&gt;BlockArray[i].hash == hash) &#123;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;************************************************************************&quot;</span> &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;***************** Here is the information of block &quot;</span> &lt;&lt; i+<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; *****************&quot;</span> &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;*                                                                      *&quot;</span> &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;\tNumber: &quot;</span> &lt;&lt; blo-&gt;BlockArray[i].Number &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;\tData: &quot;</span> &lt;&lt; blo-&gt;BlockArray[i].Data &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;\tHash value: &quot;</span> &lt;&lt; blo-&gt;BlockArray[i].hash &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;\tPrevious hash value: &quot;</span> &lt;&lt; blo-&gt;BlockArray[i].p_hash &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;*                                                                      *&quot;</span> &lt;&lt; endl;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;************************************************************************&quot;</span> &lt;&lt; endl;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Input wrong or empty information!&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// The third operation checks whether there are blocks in it. If not, the program will display &quot;Empty&quot; and the system will redisplay the menu and ask the user to retype.</span><br><span class="hljs-comment">// This function allows the user to check the integrity of the data stored in the chain. The integrity of the data in the chain is judged by comparing the hash value with the previous hash value. When the blockchain already has block information entered by the user. When the user enters Menu number 3, the program will compare the hash value of each block with the previous hash value. Traverse each block, if the previous hash value of the next one is equal to the previous hash value, output &quot;The blocks are integral&quot;.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Check_integrity</span><span class="hljs-params">(Blockchain * blo)</span></span>&#123; <span class="hljs-comment">// Check the integrity of the data</span><br>    <br>    <span class="hljs-keyword">if</span> (blo-&gt;m_Size == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// if the size of block is zero, output Empty!</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Empty!!&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">bool</span> check = <span class="hljs-literal">true</span>; <span class="hljs-comment">// Initialize a Boolean value</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; blo-&gt;m_Size<span class="hljs-number">-1</span>; i++) &#123; <span class="hljs-comment">// Check all hash values, compare with their previous hash values</span><br>            <span class="hljs-keyword">if</span> (blo-&gt;BlockArray[i+<span class="hljs-number">1</span>].p_hash != blo-&gt;BlockArray[i].hash) &#123;<br>                check = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; endl;<br>        <span class="hljs-keyword">if</span> (check) &#123; <span class="hljs-comment">// output the integrity according to the Boolean value</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;\tThe blocks are integral&quot;</span> &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;\tThe blocks are NOT integral!!!&quot;</span> &lt;&lt; endl;<br>        &#125;<br>        cout &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Below is all hash value of the blockchain: &quot;</span> &lt;&lt; endl; <span class="hljs-comment">// display all the hash values and previous hash values to user for better understanding of the integrity of the blockchain</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; blo-&gt;m_Size; i++)&#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;\tHash value: &quot;</span> &lt;&lt; blo-&gt;BlockArray[i].hash &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">&quot;\tPrevious hash value: &quot;</span> &lt;&lt; blo-&gt;BlockArray[i].p_hash &lt;&lt; endl;<br>            cout &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// In the code, the program creates the Blockchain structure variable &quot;blo&quot; and initializes the current number of blocks in the Blockchain. Calling the menu guarantees that the menu is available to the user every time. select is the user&#x27;s input to perform the corresponding operation.</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Blockchain blo; <span class="hljs-comment">// naming structure</span><br>    blo.m_Size = <span class="hljs-number">0</span>; <span class="hljs-comment">// Initialize the size of blocks</span><br>    <span class="hljs-type">int</span> select = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-built_in">showMenu</span>();<br>        cout &lt;&lt; <span class="hljs-string">&quot;Enter the number of the Menu number: &quot;</span>; cin &gt;&gt; select;<br>        <span class="hljs-keyword">switch</span> (select) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-built_in">addBlocks</span>(&amp;blo); <span class="hljs-comment">// This is the function to add blocks</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-built_in">findBlock</span>(&amp;blo); <span class="hljs-comment">// display the chain data in a number of ways by block number, the data of the whole chain or the hash values of a particular block</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-built_in">Check_integrity</span>(&amp;blo); <span class="hljs-comment">// check the integrity of the blocks</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">// enter 0 to end the program</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;Thank you for using.&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>                <br>            <span class="hljs-keyword">default</span>:<br>                cout &lt;&lt; <span class="hljs-string">&quot;Please enter correct a number!&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Multi-thread-Web-Server-Python"><a href="#Multi-thread-Web-Server-Python" class="headerlink" title="Multi-thread Web Server (Python)"></a>Multi-thread Web Server (Python)</h2><p>This is a Python-based web server that is capable of processing HTTP requests from browsers or other clients in a multi-threaded way.</p><p>You should first run the program “Server.py” and click on the link on the console. This will navigate to the server’s main menu where you can find links to image files, the “server.txt” log file, modifiable files, and 404 not found. You can click on any link and follow the instructions to access the desired file. If the server hasn’t responded for a while, it may have closed the connection. Please try refreshing and clicking again. After you run it, you can go to the log file to find the request record, including the client address, access time, requested file name and response type for each record.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># import socket, import threading, import os, import time, and from datetime import datetime are Python modules imported at the start of the code. Class Server is defined as the main server class that takes host, port, and html_file parameters in its constructor. It creates a server socket with socket.socket(), sets socket options with setsockopt(), and binds the socket to the host and port with bind(). It then listens for incoming connections with listen().</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> http <span class="hljs-keyword">import</span> HTTPStatus<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span>:<br>  <span class="hljs-comment"># __init__: The constructor initializes the server with a specified host and port, and a default html_file to serve when the root directory (&quot;/&quot;) is requested. It also sets up a server socket and binds it to the given address and port.</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, host, port, html_file</span>):<br>        self.host = host<br>        self.port = port<br>        self.html_file = html_file<br>        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="hljs-number">1</span>)<br>        self.server_socket.bind((self.host, self.port))<br>        self.server_socket.listen()<br><br>    <span class="hljs-comment"># serve_forever: This method starts the server loop, which continuously listens for incoming connections. For each client that connects, it spawns a new thread to handle the client&#x27;s requests, allowing the server to handle multiple clients simultaneously.</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">serve_forever</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Server listening on http://<span class="hljs-subst">&#123;self.host&#125;</span>:<span class="hljs-subst">&#123;self.port&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            client_socket, client_address = self.server_socket.accept()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Accepted connection from <span class="hljs-subst">&#123;client_address&#125;</span>&quot;</span>)<br>            client_thread = threading.Thread(target=self.handle_client, args=(client_socket, client_address))<br>            client_thread.start()<br><br>     <span class="hljs-comment"># handle_client: This method handles a client&#x27;s connection. It reads and parses the client&#x27;s HTTP request, logs the request details, determines what file the client is requesting, and responds appropriately. If the client is requesting a file that exists, it sends the file&#x27;s content with a 200 OK status. If the client is requesting a file that does not exist, it sends a 404 Not Found status. If the client is making a conditional GET request with an If-Modified-Since header, and the requested file has not been modified since the specified date, it sends a 304 Not Modified status.</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_client</span>(<span class="hljs-params">self, client_socket, client_address</span>):<br>        <span class="hljs-keyword">with</span> client_socket:<br>            request = client_socket.recv(<span class="hljs-number">1024</span>).decode()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received request from <span class="hljs-subst">&#123;client_address&#125;</span>:&quot;</span>)<br>            <span class="hljs-built_in">print</span>(request)<br><br>            <span class="hljs-comment"># Parse the request to determine the specific file being requested</span><br>            headers = request.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            filename = headers[<span class="hljs-number">0</span>].split()[<span class="hljs-number">1</span>]  <span class="hljs-comment"># /</span><br>            method = headers[<span class="hljs-number">0</span>].split()[<span class="hljs-number">0</span>]  <span class="hljs-comment"># Get, Head</span><br><br>            <span class="hljs-comment"># Add logging here</span><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;server.txt&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>, mode=<span class="hljs-string">&quot;a&quot;</span>) <span class="hljs-keyword">as</span> log_file:<br>                <span class="hljs-keyword">if</span> filename == <span class="hljs-string">&quot;/&quot;</span>:<br>                    log_message = <span class="hljs-string">f&quot;Client address: [<span class="hljs-subst">&#123;client_address[<span class="hljs-number">0</span>]&#125;</span>]\tAccess time: [<span class="hljs-subst">&#123;datetime.now()&#125;</span>]\nFile name: [<span class="hljs-subst">&#123;filename&#125;</span>index.html]\tResponse type: [<span class="hljs-subst">&#123;method&#125;</span> HTTP/1.1 200 OK]\n\n&quot;</span><br>                <span class="hljs-keyword">else</span>:<br>                    log_message = <span class="hljs-string">f&quot;Client address: [<span class="hljs-subst">&#123;client_address[<span class="hljs-number">0</span>]&#125;</span>]\tAccess time: [<span class="hljs-subst">&#123;datetime.now()&#125;</span>]\nFile name: [<span class="hljs-subst">&#123;filename&#125;</span>]\tResponse type: [<span class="hljs-subst">&#123;method&#125;</span> HTTP/1.1 200 OK]\n\n&quot;</span><br>                log_file.write(log_message)<br><br>            <span class="hljs-keyword">if</span> method == <span class="hljs-string">&#x27;GET&#x27;</span> <span class="hljs-keyword">or</span> method == <span class="hljs-string">&#x27;HEAD&#x27;</span>:<br>              <span class="hljs-comment"># If the method is GET or HEAD, it attempts to retrieve the requested file and sends a response back to the client with the file contents and appropriate headers. Since image files are binary and must be viewed in &quot;rb&quot; mode before being transferred individually, they cannot be read and delivered to the browser immediately. In this manner, the picture returned by the GET request may be seen normally in the browser. If the file has not been updated after being cached by the browser, it will return 304 Not Modified when we reload the website. This indicates that our software can appropriately handle image files and 304 answers. If the file does not exist, it sends a 404 Not Found error. If the file is a directory, it attempts to append index.html to the file path and retrieve that file. </span><br>                <span class="hljs-keyword">if</span> filename == <span class="hljs-string">&#x27;/&#x27;</span>:<br>                    path = self.html_file<br>                <span class="hljs-keyword">else</span>:<br>                    path = filename[<span class="hljs-number">1</span>:]<br><br>                filepath = os.path.join(os.getcwd(), path)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filepath):<br>                    self.send_error(client_socket, HTTPStatus.NOT_FOUND)<br>                    <span class="hljs-keyword">return</span><br><br>                <span class="hljs-keyword">if</span> os.path.isdir(filepath):<br>                    filepath = os.path.join(filepath, self.html_file)<br><br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                        content = f.read()<br>                        content_length = <span class="hljs-built_in">len</span>(content)<br>                        last_modified = datetime.utcfromtimestamp(os.path.getmtime(filepath)).strftime(<br>                            <span class="hljs-string">&#x27;%a, %d %b %Y %H:%M:%S GMT&#x27;</span>)<br>                        <span class="hljs-comment"># Check for If-Modified-Since header</span><br>                        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;If-Modified-Since&#x27;</span> <span class="hljs-keyword">in</span> request:<br>                            ims = headers[headers.index(<span class="hljs-string">&#x27;If-Modified-Since: &#x27;</span>) + <span class="hljs-number">1</span>].strip()<br>                            ims_time = datetime.strptime(ims, <span class="hljs-string">&#x27;%a, %d %b %Y %H:%M:%S GMT&#x27;</span>)<br>                            <span class="hljs-keyword">if</span> ims_time &gt;= datetime.utcfromtimestamp(os.path.getmtime(filepath)):<br>                                self.send_error(client_socket, HTTPStatus.NOT_MODIFIED) <span class="hljs-comment"># 304 Not Modified</span><br>                                <span class="hljs-keyword">return</span><br>                        <span class="hljs-comment"># Get Response Headers</span><br>                        response_headers = [<br>                            <span class="hljs-string">f&quot;HTTP/1.1 <span class="hljs-subst">&#123;HTTPStatus.OK.value&#125;</span> <span class="hljs-subst">&#123;HTTPStatus.OK.phrase&#125;</span>&quot;</span>,<br>                            <span class="hljs-string">f&quot;Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span>&quot;</span>,<br>                            <span class="hljs-string">f&quot;Last-Modified: <span class="hljs-subst">&#123;last_modified&#125;</span>&quot;</span>,<br>                            <span class="hljs-string">&quot;Connection: keep-alive&quot;</span>,<br>                        ]<br>                        response = <span class="hljs-string">&#x27;\r\n&#x27;</span>.join(response_headers).encode() + <span class="hljs-string">b&#x27;\r\n\r\n&#x27;</span><br>                    <span class="hljs-keyword">if</span> method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>                        response += content<br>                    client_socket.sendall(response)<br>                <span class="hljs-keyword">except</span>:<br>                    self.send_error(client_socket, HTTPStatus.NOT_FOUND) <span class="hljs-comment"># 404 File Not Found</span><br>                    <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send_error</span>(<span class="hljs-params">self, client_socket, status</span>): <span class="hljs-comment"># sends an error response to the client with the specified HTTP status.</span><br>        response = <span class="hljs-string">f&quot;HTTP/1.1 <span class="hljs-subst">&#123;status.value&#125;</span> <span class="hljs-subst">&#123;status.phrase&#125;</span>\r\nConnection: close\r\n\r\n&quot;</span><br>        client_socket.sendall(response.encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(): <span class="hljs-comment"># main() creates a new instance of the Server class with a host of 127.0.0.1, port 8000, and the HTML file web.html. It then calls serve_forever() on this instance, which starts the server and listens for incoming connections.</span><br>    server = Server(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, port=<span class="hljs-number">8000</span>, html_file=<span class="hljs-string">&#x27;web.html&#x27;</span>)<br>    server.serve_forever()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><ol><li>The <code>main</code> function creates an instance of the <code>Server</code> class with the host <code>127.0.0.1</code> (localhost), the port <code>8000</code>, and the default HTML file <code>web.html</code>, and starts the server.</li><li>The <code>if __name__ == &#39;__main__&#39;</code> conditional checks whether the script is being executed directly (rather than being imported as a module), and if so, it calls the <code>main</code> function to start the server.</li><li>The code creates a multithreaded HTTP server in Python with sockets and threading. It listens on a given IP address and port and handles requests from clients. It sends static files from the local file system for HTTP GET requests and returns suitable HTTP status codes. It writes client requests to a file called “server.txt” in UTF-8. The code has a class named Server with three methods: <strong>init</strong>(), serve_forever(), and handle_client(). The <strong>init</strong>() method sets up the server TCP socket and binds it to the IP address and port. The serve_forever() method waits for client connections and launches a new thread for each one. The handle_client() method gets and parses the client request, reads the file from the local file system, and sends a response to the client. The main() function makes a Server object and starts serving requests.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北京vlog#04｜汪苏泷微博扫楼｜自助烤肉｜孔庙-国子监｜端午半日游-景山公园-什刹海-烟袋斜街</title>
    <link href="/2023/06/26/vlog36/"/>
    <url>/2023/06/26/vlog36/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=315186566&bvid=BV16P411v72a&cid=1175920102&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北京vlog#03｜新浪总部办理入职｜BeiJing City Walk｜三里屯太古里｜国贸南门涮肉｜朝阳公园</title>
    <link href="/2023/06/11/vlog35/"/>
    <url>/2023/06/11/vlog35/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=997245541&bvid=BV1Ms4y1y771&cid=1160074371&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北京vlog#02｜微博实习｜游玩北京CBD｜南锣鼓巷</title>
    <link href="/2023/06/04/vlog34/"/>
    <url>/2023/06/04/vlog34/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=869437512&bvid=BV1yV4y1U7fH&cid=1152715269&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北京vlog#01｜居庸关长城｜颐和园｜实习开幕式｜主日</title>
    <link href="/2023/05/31/vlog33/"/>
    <url>/2023/05/31/vlog33/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=954250037&bvid=BV1RW4y197ej&cid=1148342116&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#32｜香港国际机场 ✈️ 北京首都国际机场</title>
    <link href="/2023/05/31/vlog32/"/>
    <url>/2023/05/31/vlog32/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=229310956&bvid=BV1Z8411f78V&cid=1148200348&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#30｜窗外的海景｜在香港理工大学 ICON Hotel 参加 WIE Kick-off Ceremony</title>
    <link href="/2023/05/22/vlog30/"/>
    <url>/2023/05/22/vlog30/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=698931582&bvid=BV1Wm4y1t76t&cid=1138046538&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Midjourney</title>
    <link href="/2023/05/21/Midjourney/"/>
    <url>/2023/05/21/Midjourney/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><p><strong>【画面主体】+【画面环境】+【镜头视角】+【风格参考】+【渲染方式】</strong></p><p>这里注意的是关键词之间要用英文的“,”隔开，我们得到优化后的关键词：a large futuristic architecture <strong>inspired by</strong><br><strong>the designs of</strong> Zaha Hadid + Roman Vlasov, in the Garden of Spring, epic composition, Ultra-Wide Angle超广角, ultra photorealistic Octane render, 8k, pink palette –-ar 16:9 –no blur, blurry, dof, people, person, woman, man –test –creative</p><p>Upscale：满意这张图，希望他的细节更多（对指定一张图片进行品质提高）</p><p>Variation：走向是对的，但是再做些改变（对指定一张图片进行延展）</p><p><strong>a sensual woman, longcurly white hair, futuristic long dress, dancing under the full bright moon, golden, hiper realistic, ultra high resolution</strong> </p><p>一个性感的女人，长长的卷曲的白色头发，未来主义的长裙，在满月下跳舞，金色，更现实，超高分辨率</p><p><strong>sunny vibes</strong></p><p><strong>close-ups</strong> 特写</p><p><strong>with determination in his eyes</strong> 他的眼睛里充满了决心</p><p>&#x2F;imagine prompt:a large futuristic architecture inspired by the designs of Zaha Hadid + Roman Vlasov, in the Garden of Spring, epic composition, Ultra-Wide Angle, ultra photorealistic Octane render, 8k, pink palette –-ar 16:9 –no blur, blurry, dof, people, person, woman, man –test –creative</p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【莲塘口岸】十分钟过关！莲塘口岸到香港保姆级教学</title>
    <link href="/2023/05/20/liantangkouan/"/>
    <url>/2023/05/20/liantangkouan/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=826337596&bvid=BV1zg4y1F7ox&cid=1135657683&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简短的深圳vlog</title>
    <link href="/2023/05/20/sz/"/>
    <url>/2023/05/20/sz/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=613804503&bvid=BV1Hh4y1t7jF&cid=1135604472&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#29｜四天三夜的大屿山梅窝成全营</title>
    <link href="/2023/05/17/vlog29/"/>
    <url>/2023/05/17/vlog29/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=486158307&bvid=BV1CT411t7nY&cid=1132072551&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#28｜俯瞰港岛最美夜景｜宝马山</title>
    <link href="/2023/05/16/vlog28/"/>
    <url>/2023/05/16/vlog28/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=996138513&bvid=BV1Qs4y1Q7rw&cid=1131654012&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#27｜在港理工期末考试周的精神状态</title>
    <link href="/2023/05/08/vlog27/"/>
    <url>/2023/05/08/vlog27/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=655996061&bvid=BV1Ta4y137Em&cid=1121990105&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#26｜爬狮子山-笔架山-小排聚会｜主日早茶-卡巴</title>
    <link href="/2023/04/10/vlog26/"/>
    <url>/2023/04/10/vlog26/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=824786644&bvid=BV1Fg4y1u7wX&cid=1090026927&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#25｜生活日常｜去香港入境局｜学校招聘会｜聚会讲座｜同学受浸｜小狼出街｜学习做丝袜奶茶</title>
    <link href="/2023/04/05/vlog25/"/>
    <url>/2023/04/05/vlog25/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=697108973&bvid=BV1wm4y1B7h4&cid=1083347066&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#24｜小排聚会｜主日｜小狼出街｜林俊杰演唱会</title>
    <link href="/2023/03/27/vlog24/"/>
    <url>/2023/03/27/vlog24/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=611692841&bvid=BV1584y1g7uS&cid=1072223983&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.4.2 RDT 3.0 stop-and-wait operation</title>
    <link href="/2023/03/18/nw%20copy%209/"/>
    <url>/2023/03/18/nw%20copy%209/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=696216408&bvid=BV1U24y1x7Ae&cid=1058663457&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.4.3 RDT 3.0 Pipelined protocols</title>
    <link href="/2023/03/18/nw%20copy%2010/"/>
    <url>/2023/03/18/nw%20copy%2010/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=311209532&bvid=BV12P411d7MJ&cid=1058663461&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.4 principles of reliable data transfer</title>
    <link href="/2023/03/18/nw%20copy%208/"/>
    <url>/2023/03/18/nw%20copy%208/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=226127008&bvid=BV14b411Z7Df&cid=1058663511&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.4 DNS｜Three DNS hierarchy</title>
    <link href="/2023/03/18/nw%20copy%204/"/>
    <url>/2023/03/18/nw%20copy%204/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=526149651&bvid=BV1HM411H71n&cid=1058663084&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.1-3.3 transport-layer｜multiplexing</title>
    <link href="/2023/03/18/nw%20copy%207/"/>
    <url>/2023/03/18/nw%20copy%207/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=696174945&bvid=BV1v24y1x7yb&cid=1058663450&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.7 socket programming with UDP and TCP</title>
    <link href="/2023/03/18/nw%20copy%206/"/>
    <url>/2023/03/18/nw%20copy%206/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=781191500&bvid=BV1T24y1E7LR&cid=1058663446&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.3 Email</title>
    <link href="/2023/03/18/nw%20copy%203/"/>
    <url>/2023/03/18/nw%20copy%203/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=993656538&bvid=BV1Jx4y1P7xt&cid=1058663437&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.4.2 Local DNS server｜Domain name resolution</title>
    <link href="/2023/03/18/nw%20copy%205/"/>
    <url>/2023/03/18/nw%20copy%205/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=526164393&bvid=BV1BM411H7ww&cid=1058663441&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#23｜学校的吹干机是戴森？｜美食生活碎片分享记录</title>
    <link href="/2023/03/12/vlog23/"/>
    <url>/2023/03/12/vlog23/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=610849785&bvid=BV1A84y1A7Sm&cid=1049109608&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#31｜在宿舍“捡垃圾”｜去海之恋商场吃早茶｜在Donki逛🔞｜相调（去北京实习前一周）</title>
    <link href="/2023/03/12/vlog31/"/>
    <url>/2023/03/12/vlog31/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=869227765&bvid=BV1sV4y1z7xP&cid=1146372851&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#22｜维港散步｜小狼上街｜散步学校</title>
    <link href="/2023/03/01/vlog22/"/>
    <url>/2023/03/01/vlog22/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=267848608&bvid=BV1uY411k7xB&cid=1032060585&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AF3313 Corporate Finance Review Notes</title>
    <link href="/2023/02/22/notes1/"/>
    <url>/2023/02/22/notes1/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><h2 id="Chapter-02"><a href="#Chapter-02" class="headerlink" title="Chapter 02"></a>Chapter 02</h2><p>$$<br>\bf CF(A) &#x3D; OCF - CS - ΔNWC<br>$$</p><ul><li><p><strong>CF(A) &#x3D; CF(B) <em>+</em> CF(S)</strong> </p><ul><li><p><strong>Debt (Cash Flow to Creditors, CF(B) )</strong> &#x3D; Interest - change of debt &#x3D;  Interest - (New debt - Retirement&#x2F;payback&#x2F;redeemed of debt)</p></li><li><p><strong>Equity (Cash Flow to Stockholders, CF(S) )</strong> &#x3D; Dividends + Repurchase of stock - new stock issue</p></li></ul></li><li><p><strong>Operating cash flow(OCF)</strong> &#x3D; EBIT + Depreciation – Taxes &#x3D; Net income + Depreciation &#x3D; Sales - Costs - Taxex &#x3D; (Sales - Costs)(1-T) + Depreciation*T</p></li><li><p><strong>Capital spending</strong> &#x3D; 购买&#x2F;维修 PPE &#x3D; Purchase(Acquisitions) of fixed assets - Sales of fixed assets</p></li><li><p><strong>Additions to net working capital</strong> &#x3D; ΔNWC &#x3D; change of NWC -&gt; sum &#x3D; 0</p><ul><li><strong>Net Working Capital (NWC)</strong> &#x3D; current asset - current liability</li></ul></li></ul><p><strong>Income Statement</strong></p><table><thead><tr><th align="left">Sales</th></tr></thead><tbody><tr><td align="left">- Cost of goods sold</td></tr><tr><td align="left">- Selling costs&#x2F;expenses</td></tr><tr><td align="left">- Depreciation</td></tr><tr><td align="left"><strong>EBIT</strong></td></tr><tr><td align="left">- Interest</td></tr><tr><td align="left"><strong>Taxable income</strong></td></tr><tr><td align="left">- Taxes (Current + Deffered)</td></tr><tr><td align="left">**&#x3D; Net income **(Addition to retained earnings + Dividends)</td></tr></tbody></table><table><thead><tr><th>OCF</th></tr></thead><tbody><tr><td><strong>- Capital spending</strong> (购买&#x2F;维修 PPE)</td></tr><tr><td><strong>- NWC</strong> (sum&#x3D;0)</td></tr><tr><td><strong>&#x3D; incremental Cash Flow, CF(A)</strong></td></tr></tbody></table><h2 id="Chapter-04-Discounted-Cash-Flow-Valuation"><a href="#Chapter-04-Discounted-Cash-Flow-Valuation" class="headerlink" title="Chapter 04. Discounted Cash Flow Valuation"></a>Chapter 04. Discounted Cash Flow Valuation</h2><ul><li><p><strong>The One-Period Case</strong><br>$$<br>\bf FV&#x3D;C_0(1+r)\ \ \ \ \ \ \ \ \ \ PV&#x3D;\frac{C_1}{1+r}<br>$$</p></li><li><p><strong>The Multiperiod Case</strong></p><ul><li><p>Compounding 复利和<strong>Compounding Periods 多年期复利</strong>, 拿现在的钱去算将来的钱</p></li><li><p><strong>r代表一个单位，T代表一共多少个单位</strong><br>$$<br>\bf FV&#x3D;C_0(1+r)^T\ \ ➡️\ \ FV&#x3D;C_0(1+\frac{r}{m})^{mT}<br>$$</p></li><li><p>Present Value and Discounting 现金与折现, 拿将来的钱去算现在的钱<br>$$<br>\bf PV&#x3D;\frac{C_T}{(1+r)^T}<br>$$</p></li></ul></li><li><p><strong>Simplifications 简化</strong></p><p>PV 算的是 one period before the first payment</p><ul><li><p><strong>Perpetuity 永续年金:</strong> 源源不断的现金流 <strong>(生命周期无限)</strong><br>$$<br>\bf PV&#x3D;\frac{C}{r}<br>$$</p></li><li><p><strong>Growing perpetuity 增长性永续年金:</strong> 能始终以某固定的增长率保持增长的一系列现金流 <strong>(生命周期无限 + 有增长率g)</strong><br>$$<br>\bf PV&#x3D;\frac{C}{r-g}<br>$$</p></li><li><p><strong>Annuity 年金:</strong> 一系列稳定有规律的、**持续一段固定时期(T)**的现金收付活动  <strong>(生命周期有限T)</strong><br>$$<br>\bf PV&#x3D;\frac{C}{r}[1-\frac{1}{(1+r)^T}]<br>\\bf FV &#x3D; PV(1+r)^T<br>$$</p></li><li><p><strong>Growing annuity 增长型年金:</strong> **在一定时期内(T)**，保持以固定比率增长的一系列现金流  <strong>(生命周期有限T + 有增长率g)</strong><br>$$<br>\bf PV&#x3D;\frac{C}{r-g}[1-(\frac{1+g}{(1+r)})^T]<br>$$</p></li></ul></li></ul><h2 id="Chapter-05-NPV-amp-Other-Investment-Rules"><a href="#Chapter-05-NPV-amp-Other-Investment-Rules" class="headerlink" title="Chapter 05. NPV &amp; Other Investment Rules"></a>Chapter 05. NPV &amp; Other Investment Rules</h2><p>Independent Projects(独立项目)，可以都选。</p><p>Mutually Exclusive Projects(互斥项目)，只能二选一。</p><ul><li><strong>Net Present Value (NPV): 越高越好</strong><ul><li><p><strong>NPV</strong> is the sum of the present value of the cash flows from the project</p></li><li><p>最低可接受法则为：<strong>如果 NPV ＞0，则接受项目</strong></p></li><li><p>排序法则：<strong>选择NPV最高的项目</strong></p></li></ul></li></ul><p>$$<br>\bf NPV&#x3D;C_0+\frac{C_1}{1+r}+\frac{C_2}{(1+r)^2}+…+\frac{C_t}{(1+r)^t}&#x3D;C_0+\sum_{t&#x3D;1}^T \frac{C_t}{(1+r)^t}\\bf C_0&#x3D;positive\ cash\ flows,\ represents\ cash\ receipts\<br>\bf C_0&#x3D;negative\ cash\ flow,\ represents\ cash\ payment<br>$$</p><ul><li><strong>Profitability Index (PI): 选&gt;0</strong></li></ul><p>$$<br>  \bf PI_2&#x3D;\frac{PV}{-C_0}&#x3D;\frac{\frac{C_1}{(1+r)}+\frac{C_2}{(1+r)^2}+…+\frac{C_T}{(1+r)^T}}{-C_0}\ (accept,\ if\ PI_2&gt;1)\\ PI_1 和 PI_2 在项目选择方面应该有相同的答案，因为它们等同于数字相差1<br>$$</p><ul><li><p><strong>Discount Payback Period (DPB): 越小越好</strong></p><ul><li><p>how long it takes to payback on <strong>a discounted basis</strong> 在折扣的基础上需要多长时间才能收回</p></li><li><p>$$<br>\bf Cash\ Flow\ of\ Present\ Value(PV) &#x3D; \frac{C_T}{(1+r)^T}<br>$$</p></li></ul><p><img src="/../../../Desktop/previous%2520and%2520others'%2520file/AF3313%2520Business%2520Finance/Typora_Picture/image-20230223012859304.png" alt="image-20230223012859304"></p></li></ul><h2 id="Chapter-06-Making-Capital-Investment-Decisions"><a href="#Chapter-06-Making-Capital-Investment-Decisions" class="headerlink" title="Chapter 06. Making Capital Investment Decisions"></a>Chapter 06. Making Capital Investment Decisions</h2><p><img src="/../../../Desktop/previous%2520and%2520others'%2520file/AF3313%2520Business%2520Finance/Typora_Picture/Screenshot%25202023-03-01%2520at%252012.51.06.png" alt="Screenshot 2023-03-01 at 12.51.06"></p><ul><li><strong>Incremental Cash Flows &#x3D; Cash Flow From Assets  (CFFA)</strong></li></ul><p>$$<br>\bf Earnings ≠ Cash<br>$$</p><ul><li>if the value is <strong>positive</strong> then it is a <strong>cash inflow</strong>. If the value is <strong>negative</strong>, then it is a <strong>cash outflow</strong></li></ul><p>$$<br>\bf CFFA &#x3D; OCF - CS - ΔNWC</p><p>\\bf CS &#x3D; capital\ spending\ (购买&#x2F;维修\ PPE)</p><p>\\bf ΔNWC&#x3D;change\ in\ net\ working\ capital\ (current\ assets-current\ liabilities)<br>$$</p><ul><li><p><strong>Operating Cash Flows (OCFs)</strong></p><ul><li>公司运营产生的现金流量<br>$$<br>\bf Bottom\ Up:\ OCF &#x3D; Net Income + depreciation<br>\\bf Top\ Down: OCF &#x3D; Sales – Costs – Taxes<br>\\bf Tax\ Shield: OCF &#x3D; (Sales – Costs)(1 – T) + Depreciation*T\ (T是税率)<br>\\bf Net\ Income(NI)&#x3D;(sales-costs)-Depreciation<br>$$</li></ul></li><li><p><strong>Change in Net working Capital (ΔNWC)</strong></p></li><li><p><strong>After-tax Salvage</strong>, salvage &#x3D; Market value<br>$$<br>\bf After\ tax\ salvage &#x3D; Salvage – T(Salvage\ –\ Book\ value)&#x3D;MV-T(MV-BV)<br>$$</p></li></ul><h2 id="Lecture-06-Chapter-26-28"><a href="#Lecture-06-Chapter-26-28" class="headerlink" title="Lecture 06 Chapter 26-28"></a>Lecture 06 Chapter 26-28</h2><p>$$<br>\bf Inventory\ turnover&#x3D;\frac{Cost\ of\ Good\ Sold}{Average\ inventory}<br>\\bf Inventory\ period&#x3D;\frac{365}{Inventory\ turnover}<br>\——————————————<br>\\bf Accounts\ Receivable\ turnover&#x3D;\frac{Sales}{Average\ Accounts\ receivable}<br>\\bf Accounts\ Receivable\ period&#x3D;\frac{365}{Accounts\ receivable\ turnover}<br>\——————————————<br>\\bf Accounts\ Payable\ turnover&#x3D;\frac{Cost\ of\ Good\ Sold}{Average\ Accounts\ Payable}<br>\\bf Accounts\ Payable\ period&#x3D;\frac{365}{Accounts\ Payable\ turnover}<br>$$</p><ul><li><strong>Credit Management</strong></li></ul><p>$$<br>\bf One\ Time\ Sale:\ NPV &#x3D; -v + \frac{(1 - \pi)P}{(1 + r)}<br>\\bf Repeat\ Customers:\ NPV &#x3D; -v + \frac{(1-\pi)(P – v)}{r},\ \ \ defaults\ once,\ NO\ grant\ credit\ again<br>\\bf \ \ v&#x3D;variable\ cost;\ \pi &#x3D;default\ probability\ 违约率;\ P&#x3D;current\ price;\ r&#x3D;required\ return\ rate<br>$$</p><h2 id="Chapter-08-09-Valuation-of-Bonds-amp-Stocks"><a href="#Chapter-08-09-Valuation-of-Bonds-amp-Stocks" class="headerlink" title="Chapter 08-09 Valuation of Bonds &amp; Stocks"></a>Chapter 08-09 Valuation of Bonds &amp; Stocks</h2><ul><li><p><strong>Bond (债券)</strong><br>$$<br>\bf Bond\ value &#x3D; \frac{C}{r} × [{1-\frac{1}{(1+r)^T}}]+\frac{FV}{(1+r)^T}<br>\\bf C: Coupon\ paid\ each\ period&#x3D;Coupon\ rate*FV<br>\\bf interest\ rates ⬆️\ present\ values ⬇️,\ interest\ rates ⬆️\ bond\ prices ⬇️<br>$$</p></li><li><p><strong>Stocks (股票)</strong></p><ul><li><p><strong>Zero Growth</strong> (Dividends will remain at the sa‘；me level forever) 生命周期无限，未来现金流是恒定的<br>$$<br>\bf P_0&#x3D;\frac{Div_1}{R}<br>$$</p></li><li><p><strong>Constant Growth</strong> (Dividends will grow at a constant rate “<strong>g</strong>“, forever) 生命周期无限，未来现金流永远以 g 增长<br>$$<br>\bf P_0&#x3D;\frac{Div_1}{R-g}\\bf R(cost\ of\ equity)&#x3D;Dividend\ yield+Capital\ gains\ yeild&#x3D;\frac{Div_1}{P_0}+g<br>$$</p></li><li><p><strong>Differential Growth</strong> (Dividends will *<em>grow at rate <em>g</em>1 for <em>N</em> years</em>* and *<em>grow at rate <em>g</em>2 thereafter</em>*.<br>$$<br>\bf P_0&#x3D;\frac{C_0×(1+g_1)}{r-g_1}[1-\frac{(1+g_1)^T}{(1+r)^T}]+\frac{\frac{C_0×(1+g_1)^T(1+g_2)}{R-g_2}}{(1+r)^T}<br>\——————————————-<br>\\bf P_n&#x3D;\frac{last\ divident\ forever}{r}<br>\\bf P_0&#x3D;\frac{C_1}{(1+r)}+\frac{C_2}{(1+r)^2}+…+\frac{C_n+P_n}{(1+r)^n}<br>$$</p></li></ul></li></ul><h2 id="Chapter-11-The-Capital-Asset-Pricing-Model"><a href="#Chapter-11-The-Capital-Asset-Pricing-Model" class="headerlink" title="Chapter 11 The Capital Asset Pricing Model"></a>Chapter 11 The Capital Asset Pricing Model</h2><ul><li><p><strong>Portfolios (证券投资组合)</strong></p></li><li><p><strong>Capital Asset Pricing Model (CAPM)</strong></p></li><li><p><strong>Capital market line (CML)</strong></p></li></ul><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a><u>Final</u></h2><p><strong>Debt(Creditors) versus Equity(Shareholder)</strong></p><ul><li><strong>Creditors</strong> generally receive the <strong><u>first claim on the firm’s cash flow</u></strong>, and they receive a <strong>fixed interest rate</strong> regardless of the performance of the business. </li><li><strong>Shareholder’s equity</strong> is the <strong><u>residual difference between assets and liabilities</u></strong>, and they receive <strong>dividends or capital gains</strong> only if the business makes enough profit. </li><li><strong>Shareholder’s equity take on more risk</strong> but also have a <strong>greater return</strong> than debt holders (Creditors).</li></ul><p><strong>The dividend growth model calculates total return, the total return of stock:</strong></p><ul><li><strong>The required return (R)</strong> has two components. </li><li><strong>Dividend yield (Div&#x2F;P):</strong> This is calculated as the <u><strong>expected cash dividend (D)</strong></u> divided by <u><strong>the current price (P).</strong></u></li><li><strong>Capital gains yield &#x2F; Dividend growth rate (g):</strong> The rate at which <strong><u>the value of the investment grows</u>.</strong></li></ul><p><strong>The CAPM suggests that the expected return is a function of</strong> </p><ul><li><p>**Risk-free rate of return: **is the <strong><u>pure time value of money</u>.</strong> </p></li><li><p>**Beta: **is <strong><u>the amount of systematic risk present in a particular asset</u>.</strong> 特定资产中存在的系统性风险</p></li><li><p><strong>Market risk premium:</strong> is <strong><u>the reward for bearing systematic risk</u>.</strong> 承担系统性风险的回报</p></li><li><p>A <strong>flexible short-term finance policy</strong> would maintain a <strong>high</strong> ratio of current assets to sales.</p><ul><li>Keeping large <strong>cash balances</strong> and <strong>investments in marketable securities</strong></li><li>Large investments in <strong>inventory</strong> </li><li><strong>Liberal credit terms</strong></li></ul></li><li><p>A <strong>restrictive short-term finance policy</strong> would maintain a <strong>low</strong> ratio of current assets to sales.</p><ul><li>Keeping low cash balances, no investment in marketable securities</li><li>Making small investments in inventory</li><li>Allowing no credit sales (thus no accounts receivable)</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Corporate Finance</category>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Corporate Finance</tag>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#21｜从维港到 -- 元创方｜利东街｜PMQ｜Lee Tung St.</title>
    <link href="/2023/02/19/vlog21/"/>
    <url>/2023/02/19/vlog21/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=224642602&bvid=BV15b411d7vH&cid=1016026317&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#20｜烧烤&amp;远足大谭笃水库｜BBQ feast and HIKE to Tai Tum Tuk Reservoir</title>
    <link href="/2023/02/15/vlog20/"/>
    <url>/2023/02/15/vlog20/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=566988595&bvid=BV1Uv4y1x7Z9&cid=1008216819&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.2.2 Cookies｜Web缓存caching (代理服务器 proxy server)</title>
    <link href="/2023/02/09/nw%20copy%202/"/>
    <url>/2023/02/09/nw%20copy%202/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=224004845&bvid=BV1L8411u7ME&cid=1000836739&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.2.1 Web and HTTP</title>
    <link href="/2023/02/09/nw%20copy/"/>
    <url>/2023/02/09/nw%20copy/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=694000926&bvid=BV1K24y1q74f&cid=1000701714&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.1 网络应用原理｜principles of network applications</title>
    <link href="/2023/02/08/nw/"/>
    <url>/2023/02/08/nw/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=309070257&bvid=BV1JA411B7jz&cid=998769933&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.6 协议层、服务模型｜Protocol layers, service models</title>
    <link href="/2023/02/07/nw4/"/>
    <url>/2023/02/07/nw4/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=906485047&bvid=BV1UM4y1X7bY&cid=997459483&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.5 性能损失，延迟，吞吐量｜Performance loss, delay, throughput</title>
    <link href="/2023/02/07/nw3/"/>
    <url>/2023/02/07/nw3/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=393944912&bvid=BV1Md4y1H7ck&cid=997379113&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.4 互联网结构与ISP｜Internet structure and ISP</title>
    <link href="/2023/02/07/nw2/"/>
    <url>/2023/02/07/nw2/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=736420720&bvid=BV1LD4y1N7Ju&cid=997287645&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.1-1.3 Introduction to Computer network｜Network edge｜Network core (packet/circuit switching)</title>
    <link href="/2023/02/07/nw1/"/>
    <url>/2023/02/07/nw1/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=608901046&bvid=BV1C84y157aa&cid=996597948&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>死锁及防止｜等待图｜从死锁中恢复｜Deadlock &amp; Prevention｜Wait-for-graph｜Recovery from a deadlock</title>
    <link href="/2023/02/02/ds11/"/>
    <url>/2023/02/02/ds11/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=223639538&bvid=BV1R8411u7LW&cid=990121769&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Database Systems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database Systems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Two-Phase Locking｜两段锁协议</title>
    <link href="/2023/02/02/ds%20copy%2010/"/>
    <url>/2023/02/02/ds%20copy%2010/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=693702884&bvid=BV1724y1B7xf&cid=990068891&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Database Systems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database Systems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并发控制｜并发事务隔离级别｜Concurrency control｜Isolation level</title>
    <link href="/2023/02/02/ds%20copy%209/"/>
    <url>/2023/02/02/ds%20copy%209/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=651242254&bvid=BV1Ke4y1N7jB&cid=990027921&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Database Systems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database Systems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冲突可串行化｜Conflict serializable｜Precedence Graph</title>
    <link href="/2023/02/02/ds%20copy%208/"/>
    <url>/2023/02/02/ds%20copy%208/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=991169099&bvid=BV1ox4y1L7KS&cid=989999516&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Database Systems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database Systems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库可串行性｜Serializability｜Result Equivalence｜Conflict Equivalence</title>
    <link href="/2023/02/01/ds%20copy%207/"/>
    <url>/2023/02/01/ds%20copy%207/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=566106572&bvid=BV1Tv4y1r75U&cid=987464980&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Database Systems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database Systems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#19｜深圳福田站到香港西九龙｜无需预约｜仅需要15分钟｜全流程</title>
    <link href="/2023/01/24/vlog19/"/>
    <url>/2023/01/24/vlog19/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=478299289&bvid=BV1uT411f7UF&cid=977811241&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#18｜香港西九龙-深圳福田高铁｜无需预约｜全流程</title>
    <link href="/2023/01/24/vlog18/"/>
    <url>/2023/01/24/vlog18/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=265760290&bvid=BV1dY411X7d2&cid=977697291&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tut.01 Wireshark_Intro</title>
    <link href="/2023/01/20/nw5/"/>
    <url>/2023/01/20/nw5/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=308059835&bvid=BV1BA411R7Th&cid=973939233&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cascaded, Cascadeless, Strict schedules｜级联的，无级联的，严格调度</title>
    <link href="/2023/01/20/ds%20copy%206/"/>
    <url>/2023/01/20/ds%20copy%206/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=905515452&bvid=BV1XP4y167QU&cid=973246865&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Database Systems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database Systems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可恢复调度和不可恢复调度｜Irrecoverable and recoverable Schedule</title>
    <link href="/2023/01/19/ds%20copy%205/"/>
    <url>/2023/01/19/ds%20copy%205/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=650566760&bvid=BV12Y4y1Z75J&cid=973166778&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Database Systems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database Systems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库故障恢复｜undo, redo, undo/redo log</title>
    <link href="/2023/01/19/ds%20copy%204/"/>
    <url>/2023/01/19/ds%20copy%204/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=523110685&bvid=BV14M411t7dC&cid=972837274&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Database Systems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database Systems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库中的事务是什么？Transactions</title>
    <link href="/2023/01/19/ds%20copy%203/"/>
    <url>/2023/01/19/ds%20copy%203/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=478061230&bvid=BV1eK411k7pV&cid=972758982&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Database Systems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database Systems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Query tree &amp; Optimization｜查询树和优化查询树</title>
    <link href="/2023/01/18/ds%20copy%202/"/>
    <url>/2023/01/18/ds%20copy%202/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=435535227&bvid=BV1X3411d7td&cid=971350165&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Database Systems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database Systems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#16｜钓鱼翁之旅</title>
    <link href="/2023/01/15/vlog17/"/>
    <url>/2023/01/15/vlog17/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=862825943&bvid=BV1jG4y1C7EM&cid=967318805&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B+树的删除｜B+ Tree Deletion｜例题讲解</title>
    <link href="/2023/01/08/ds%20copy/"/>
    <url>/2023/01/08/ds%20copy/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=392497994&bvid=BV1sd4y1j7HU&cid=956792788&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Database Systems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database Systems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#16｜钓鱼翁之旅</title>
    <link href="/2023/01/07/vlog16/"/>
    <url>/2023/01/07/vlog16/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=293041140&bvid=BV1sf4y1n7ZL&cid=411683959&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B+树的插入｜B+ Tree Insertion｜例题讲解</title>
    <link href="/2023/01/04/ds/"/>
    <url>/2023/01/04/ds/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=649722754&bvid=BV1Le4y1V7Xo&cid=950114720&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Database Systems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database Systems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#14｜香港大学生寒假玩什么｜石澳沙滩</title>
    <link href="/2023/01/02/vlog14/"/>
    <url>/2023/01/02/vlog14/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=293041140&bvid=BV1sf4y1n7ZL&cid=411683959&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#13｜香港大学生寒假玩什么｜香港故宫博物馆</title>
    <link href="/2023/01/02/vlog13/"/>
    <url>/2023/01/02/vlog13/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=434676061&bvid=BV1S3411U7Aj&cid=948609435&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#12｜香港大学生寒假玩什么｜香港龙脊山</title>
    <link href="/2023/01/02/vlog12/"/>
    <url>/2023/01/02/vlog12/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=307175731&bvid=BV1MA411D7GZ&cid=948281067&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#11｜尖沙咀探店｜香港圣诞节</title>
    <link href="/2023/01/02/vlog11/"/>
    <url>/2023/01/02/vlog11/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=862162160&bvid=BV1dG4y1m7YA&cid=948272517&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中国革命背景下的女权主义发展及对中国妇女的影响</title>
    <link href="/2022/11/25/essay1/"/>
    <url>/2022/11/25/essay1/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><p><em><strong>The Hong Kong Polytechnic University</strong></em></p><p>Department of Applied Social Sciences</p><p><em><strong>APSS1C19P 中國社會之變&#x2F;辯：革命與改革</strong></em></p><p>Transformation of Chinese Society: Revolution and Reform</p><p>2020 Semester 1</p><hr><h1 id="中国革命背景下的女权主义发展及对中国妇女的影响"><a href="#中国革命背景下的女权主义发展及对中国妇女的影响" class="headerlink" title="中国革命背景下的女权主义发展及对中国妇女的影响"></a>中国革命背景下的女权主义发展及对中国妇女的影响</h1><p>从五四新文化运动开始，越来越多的中国女性开始觉醒，其中就有一部分成为女权运动领袖，但是在中国革命的时代背景下的女权后续发展却极度坎坷，这也是我选择这个题目的原因。我对中国革命后女权主义的发展以及中国妇女因为女权运动带来的各种影响和转变感兴趣，于是我希望通过本科阅读中的信息对中国女权主义有更深入的了解。</p><p>本读书报告将会先探讨一下上列书中作者对中国女权的描述及看法，例如在賀蕭《記憶的性別》（第四章）以及王政的＜探尋被遮蔽的歷史——中國的社會主義女權主義革命&gt;，《小鎮讀書會》（2021）。以上文章中作者谈及了在革命前的女性地位和封建婚姻，和对1950年《婚姻法》颁发前后对女性婚姻的影响和对凄惨案例的描述，以及中国革命后女权主义的兴起及发展对中国妇女带来的转变和影响。</p><p>賀蕭《記憶的性別》（第四章）作者从农村女性的视角出发，揭露了中国在1950年颁布《婚姻法》后对妇女婚姻的改变。向我们展示了妇女在改革做的事情如：扫盲运动，让妇女冬学接受教育，废除封建传统婚姻，让我们了解到《婚姻法》对她们的婚姻产生的积极影响，同时以第三人称的方式描写和揭示了女性在当时为自己的权益的努力时外界对其的束缚。</p><p>&lt;探尋被遮蔽的歷史——中國的社會主義女權主義革命&gt;这篇文章原是王政为小镇读书会讲座内容，由读书会编辑整理发布。作者带领我们从社会性别的角度出发，叙述了从新文化运动使中国共产党成立，女性开始觉醒和女权思想萌芽，到7、80年代男性批判否定女权的中国女权发展的跌宕起伏和女权对革命和社会带来的影响。审视了中共在社会主义国家建设过程中的内部运作，重新发掘社会主义女权主义的历史意义。后面的提问环节揭露了中国革命并没有完成完全去封建化，中国女权问题仍然存在。</p><p>在接下来的段落中，我将首先深入分析作者在书中的观点，介绍相关材料内容，并考察作者对妇女解放的看法及其对社会的影响。 然后结合作者在上述阅读中的观点，提出自己的看法。</p><p>首先将会讨论女权主义的兴起。五四新文化运动是中国女性主义发展的开端，&lt;探尋被遮蔽的歷史–中國的社會主義女權主義革命&gt;中提到“1919年五四运动发生后，新文化刊物对青年学生的影响颇深。其中就不乏一批活跃的学生群体中的女学生们，积极发起和参与了女权运动”。 越来越多受过高等教育的妇女站出来探讨女权在社会各个方面受到的问题和不平等。此外，同时为女性提供了思想资源，为中国女性主义发展作出了启蒙作用。</p><p>同时的共产党创立促进了女权主义发展，并使女权运动从此与中国革命联系到了一起。王政指出在共产党创立之初中的男女平等纲领吸引了许多中国女权主义领袖们，她们在参加共产党的同时也把五四女权议题带进来了。这就意味着在政治方面，党内女权主义者可以利用在体制内的资源对男权社会进行改造，全国妇联也是这个时期建立的。</p><p>女权主义的进一步发展离不开中国共产党在1950年颁布的《婚姻法》。它逐渐改变了当代男女性的婚姻观和家庭观。在以前以男性为家庭主导角色的社会来说，其法律使许多当代男性无法接受，产生了诸多的妇女婚姻问题。然而，国家政策对此并不能及时做出改变。《記憶的性別》中指出是“封建残余”阻碍了承诺无法立即兑现。这些“封建残余”体现在丈夫、婆婆以及一些干部的恶劣态度和暴力行径当中”。 而我认为《婚姻法》仍然对中国妇女的婚姻具有长远影响，提升了妇女的家庭地位和社会稳定并且为妇女提供了离婚自由和自由婚姻的权利。在《記憶的性別》中朝凤离婚被劝，最后成功通过法律离婚。也体现了《婚姻法》的重要之处，依法保障了妇女权益。同时期的中国女性在发展女权主义中的表现体现在对社会主义革命的贡献，例如：建立全国妇联、扫盲、解决产妇和婴幼儿的健康问题、创办 《妇女生活》和举办冬学等使妇女逐渐有了融入和走向社会的能力。</p><p>然而，从20世纪70年代末的中共革命时期开始，女权主义逐渐受到男性的批判和诟病，歪曲甚至抹除了女性对社会主义的贡献。其主要体现在男性知识精英否定了女性的能动性，他们并不能想象中国妇女在历史上是有能动作用的，认为中国妇女所得到的解放并非是妇女主动争取而是国家自上而下恩赐的。但是在我看来中国女性并非没有能动性，他们追求男女平等，成功的在婚姻、经济、政治和文化等各个方面保证了女性和男性的平等，但是因为无论在经济还是社会上，男女平等与男性所希望的“女人就要有女人味”、“贤妻良母”、“相夫教子”以及“ 上得厅堂,下得厨房”等等对女性的标签都是背道而驰的，从而使得男性知识精英过于强调男女都一样的拨乱反正，压抑了女性的特点，即所谓的“无性化铁姑娘”现象，这种“无性化”的劳动造成了女性的身体伤痛。他们把”铁姑娘”这个符号在当时所负载的多重含义以及具体的铁姑娘们的杰出贡献和赋权历史抹去了。铁姑娘从芳动妇女双重解放的象征，急剧地转变为“社会主义妇女解放把女人男性化“的象征，成为“极左”政策的象征。我认为，女权会被在后毛的男性精英挑战，其实也反映了中国妇女解放的不彻底。虽然中国女权主义者得到了女性平等自由的机会，但是他们却忽略了中国依旧是一个由男性构建和主导的国家，并没有根本上改变社会里的“旧”思维和“父权”思维。王政指出中国女权的多年艰苦发展和斗争被保守思想和男权社会影响倒退，女性现在在社会上的歧视和不公仍然存在。也就是说这种缺乏对中国男权社会对认知，无疑使中国无数女权主义者几十年的努力和斗争历程付诸东流。</p><p>总结而言，中国革命是男权主导的革命，其促使了女权发展的同时抑制了女权主义的延续，并最终颠覆了许多社会主义时期的男女平等机制，让女权主义者认识到社会主义必须要和女权主义革命结合，而并非由男权主宰。</p><h2 id="【注释】"><a href="#【注释】" class="headerlink" title="【注释】"></a>【注释】</h2><p>①  ＜探尋被遮蔽的歷史——中國的社會主義女權主義革命&gt;，第2頁。</p><p>②  ＜探尋被遮蔽的歷史——中國的社會主義女權主義革命&gt;，第2-3頁。</p><p>③  《記憶的性別》，第3頁。</p><p>④  《記憶的性別》，第30頁。</p><p>⑤  ＜探尋被遮蔽的歷史——中國的社會主義女權主義革命&gt;，第16頁。</p><p>⑥  ＜探尋被遮蔽的歷史——中國的社會主義女權主義革命&gt;，第16頁。</p><p>⑦  ＜探尋被遮蔽的歷史——中國的社會主義女權主義革命&gt;，第19頁。</p><h2 id="中文參考書目"><a href="#中文參考書目" class="headerlink" title="中文參考書目"></a>中文參考書目</h2><p>王政：＜探尋被遮蔽的歷史——中國的社會主義女權主義革命&gt;《小鎮讀書會》2021。</p><p>賀蕭：《記憶的性別》，北京：人民出版社。「第四章」，2017。</p>]]></content>
    
    
    <categories>
      
      <category>APSS1C19P 中國社會之變/辯：革命與改革</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Essay</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港理工大学国庆升旗仪式vlog</title>
    <link href="/2022/10/01/flag-raising/"/>
    <url>/2022/10/01/flag-raising/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=858546381&bvid=BV13V4y1N7XP&cid=849072078&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>港铁路线图 | MTR system map</title>
    <link href="/2022/06/30/travel2/"/>
    <url>/2022/06/30/travel2/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><h1 id="港铁路线图"><a href="#港铁路线图" class="headerlink" title="港铁路线图"></a>港铁路线图</h1><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Hong_Kong_Railway_Route_Map_zh-hans.svg"></p><p>图片来源：<a href="https://zh.wikipedia.org/wiki/File:Hong_Kong_Railway_Route_Map_zh-hans.svg">Hong Kong Railway Route Map</a></p><h1 id="MTR-system-map"><a href="#MTR-system-map" class="headerlink" title="MTR system map"></a>MTR system map</h1><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Hong_Kong_Railway_Route_Map_en.svg"></p><p>图片来源：<a href="https://www.wikiwand.com/ang/Hongcong">wikiwand</a></p>]]></content>
    
    
    <categories>
      
      <category>Travel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Travel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>广州一日游 | A day trip to Guangzhou</title>
    <link href="/2022/06/30/travel1/"/>
    <url>/2022/06/30/travel1/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><p>7:50 - 8:20 深圳北站 -&gt; 广州南站</p><p>8:20 – 9:20 广州南站 -&gt; 沙面</p><p>9:20 – 9:50 沙面走半个小时(拍照, 露天展馆，具有一百多座欧式风格建筑)</p><p>9:50 – 10:00 从沙面骑10分钟自行车 -&gt; 陈添记(广州市荔湾区宝华路十五甫三巷2-2号)</p><p>10:00  - 11:00 在永庆坊旁边吃陈添记(早餐) -&gt; 去离陈添记只有200米的南信牛奶甜品专家吃双皮奶和杨枝甘露</p><p>11:00 - 11:10 骑10分钟自行车到永庆坊</p><p>11:10 – 12:40 -&gt; 打卡永庆坊里的岁月邮局、李小龙故居、粤剧艺术博物馆、钟书阁等等</p><p>12:40 – 13:10 打车到北京路步行街</p><p>13:10 – 14:00 午饭 </p><p>14:00 – 16:00 南越王博物馆</p><p>16:00 – 16:30 到珠江新城</p><p>16:30 – 17:00 在花城公园拍照游玩 -&gt; 拍摄白天的珠江新城和广州塔</p><p>17:00 – 17:10 到广州唯一一家米其林餐厅 新斗记(人均90左右)</p><p>17:10 – 18:20 晚餐</p><p>18:20 – 18:30 步行10分钟去K11</p><p>18:30 – 19:30 逛K11</p><p>19:30 – 21:00 欣赏珠江新城夜景</p><p>21:00 – 21:55 乘坐1站APM线海心沙 -&gt; 3号线广州塔 -&gt;3号线汉溪长隆站换乘7号线-&gt; 广州南站 F出口</p><p>22:09 – 22:39 到深圳北站</p><p>23:20 到家</p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/IMG_4668.JPG"></p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/IMG_4669.JPG"></p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/IMG_4670.JPG"></p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/IMG_4671.JPG"></p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/IMG_4672.JPG"></p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/IMG_4673.JPG"></p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/IMG_4674.JPG"></p><p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/IMG_4675.JPG"></p>]]></content>
    
    
    <categories>
      
      <category>Travel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Travel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#10｜黄大仙｜中环摩天轮｜西九艺术文化公园｜圣诞树</title>
    <link href="/2021/12/17/vlog10/"/>
    <url>/2021/12/17/vlog10/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=507448835&bvid=BV1ug411A7gZ&cid=462430893&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#09｜维多利亚港湾坐船｜逛街｜夜景</title>
    <link href="/2021/12/16/vlog9/"/>
    <url>/2021/12/16/vlog9/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=294930961&bvid=BV1vF411q7KK&cid=462378249&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#08｜猫咖｜海边｜香港回归塔｜大学生生活vlog</title>
    <link href="/2021/12/16/vlog8/"/>
    <url>/2021/12/16/vlog8/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=849897493&bvid=BV1hL4y1J7gg&cid=462345778&page=1"  allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#07｜维多利亚港湾｜大学生生活vlog</title>
    <link href="/2021/12/16/vlog7/"/>
    <url>/2021/12/16/vlog7/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=764901502&bvid=BV1mr4y1D7zu&cid=462300457&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#06 - 在香港过国庆竟然有家的感觉？！｜海滩+爬山｜西贡码头｜逛街</title>
    <link href="/2021/10/12/vlog6/"/>
    <url>/2021/10/12/vlog6/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=718606359&bvid=BV1vQ4y1D79n&cid=423698316&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#05 - 生活日常｜Mistletoe音乐沉浸式欣赏｜卡点</title>
    <link href="/2021/09/30/vlog5/"/>
    <url>/2021/09/30/vlog5/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=848322314&bvid=BV17L4y1z7DJ&cid=416692577&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#04 - 劳逸结合的大学生活是怎么样的｜大一新生报道｜海景宿舍</title>
    <link href="/2021/09/23/vlog4/"/>
    <url>/2021/09/23/vlog4/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=633146057&bvid=BV1Ub4y1y78G&cid=412970917&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#03 - 夜间散步｜上早课｜自习｜买生活用品</title>
    <link href="/2021/09/22/vlog3/"/>
    <url>/2021/09/22/vlog3/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=250684437&bvid=BV1Qv41137Gd&cid=412421728&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#15｜香港维港跨年烟花秀</title>
    <link href="/2021/09/20/vlog15/"/>
    <url>/2021/09/20/vlog15/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=293041140&bvid=BV1sf4y1n7ZL&cid=411683959&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#02 - 办学生卡｜上课｜学校食堂吃饭</title>
    <link href="/2021/09/20/vlog2/"/>
    <url>/2021/09/20/vlog2/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=293041140&bvid=BV1sf4y1n7ZL&cid=411683959&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>香港留学vlog#01 - 从深圳出发到香港全过程｜来港易｜学校宿舍｜何文田</title>
    <link href="/2021/09/20/vlog1/"/>
    <url>/2021/09/20/vlog1/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><iframe src="//player.bilibili.com/player.html?aid=848000523&bvid=BV17L4y1a7r9&cid=411192808&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的日记｜My Diary -- 2021/6 - 2021/7</title>
    <link href="/2021/06/30/diary2/"/>
    <url>/2021/06/30/diary2/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><p>现在我发现了人生其中之一的道理：活在当下，未来可期。知乎有人这样说：“之前我认为活在当下就好了。甚至不会去攒钱，自己喜欢的东西，想做的事，对自己的健康投资，都会去做，觉得这就是活在当下。<br>反正知道明天和意外，哪个先来，还不如享受当下。<br>这种生活持续了一段时间，但是当周围人都开始涨薪，有欲有求的时候，我开始反思自己，自己这样的生活对吗？当别人进步的时候，自己却不进步，停在过去，其实是一种倒退，简单来说就是退步了。<br>一直以来以为佛经讲的是无欲无求，某天听《金刚金》，听到一句话，意思是佛也不是无欲无求，而是每日精进。佛经是梵文，为了学佛，会去查找各种资料，学习语言，就是为了研究其意。看到佛这种态度，我认为活在当下不是无欲无求，满足当下，而是活在当下的时候，你也需要进步，要有自己的想法。<br>认真体会，你会发现，生活就是不断的去解决一个又一个的问题，当问题被解决了，就是进步。在生活中，一定要有自己的小目标，短期的规划。这样会促使你不断的去思考，每天会有规划，怎么达到这个目标。现阶段有什么问题，该怎么解决，去分析问题，找出一个最优产出价值最高的方案。<br>健康的生活态度是，有自己的小目标，活在当下，便可未来可期。”</p><p>反正无论如何人都不能活在过去，后悔和担心是世界上最没有用最浪费时间的东西（还有一个词叫反省，这跟后悔不相同。我认为人可以反省，但是后悔就是白消耗功夫，这对人的心理健康可能都会造成影响）人总是要向前看的。在之前我推荐的那本书，三体中人类对抗外星人三体。从一开始的颓废慢慢的意识到：与其等他们过来占领地球，还不如先好好享受剩下的几百年的时光（外星人三体乘坐他们的宇宙飞船到地球所需要的时间要300年，三体文明是领先地球文明一大截的）。所以人类就开始向前看，于是发生了技术大爆炸，在短短的300年间，人类就已经可以发明出一种可以达到光速15%的宇宙飞船，并且生产了2000艘。这个速度已经可以超越三体飞船的速度了，这令人类打败三体增强了很高的自信心。所以我们要一直展望未来，活在当下，而不是总是回首过去。</p><p>（现在是2023年7月7号，我看到这个我想补充一下；在三体这本书中，人类的“向前看”进而发生了技术大爆炸，但是最终结果却是人类因为自己的自大傲慢，这2000艘达到光速15%的宇宙飞船被三体一粒的“水滴”全部消灭。所以当我们在舒适的环境中保持谨慎，在忧患的环境中选择向前看。）</p><h1 id="日记前言："><a href="#日记前言：" class="headerlink" title="日记前言："></a>日记前言：</h1><p>我已经有段时间没有写日记了，我感觉这段时间过得非常快，我感觉我前一天还是陈子悦要将要去上学的星期天，然后一下子就到了星期五她回来了，然后现在是6月21号凌晨。他在昨天下午应该说就是昨天，实际上我感觉是今天的下午就回学校了。一点都不像我在平时上学的时候，那时候我感觉每天都过得非常慢，然后一周下来我感觉还是比较清醒的，所以现在我要开始学习，因为我放假已经玩的差不多了。</p><p>我翻了一下，我上一次写日记是在6月12号，我看到三体这本书，然后后面就没有写了，现在差不多6月21号就算是6月20号吧，我已经有7天没有写日记了，我都有点难以想象我这7天到底干了些什么。</p><p>说真的，暑假期间比起我在学校我做的事情少了一些，基本上都是放松，然后现在正慢慢要进入学习状态。</p><h4 id="2021-x2F-6-x2F-14"><a href="#2021-x2F-6-x2F-14" class="headerlink" title="2021&#x2F;6&#x2F;14"></a>2021&#x2F;6&#x2F;14</h4><p>6月14号，是星期一，而且今天是端午节，满叔就邀请我们去绿茶吃饭，我中午就跟爸爸还有陈子悦就到满姨他们家来吃午饭了，然后晚上就跟着他们一起出去吃的绿茶。</p><p>中午：</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707122730.png" style="zoom:50%;" /><p>下午准备出发：</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707122810.png" style="zoom:80%;" /><p>等了好久，吃饭：</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707122828.png" style="zoom:80%;" /><h4 id="2021-x2F-6-x2F-15"><a href="#2021-x2F-6-x2F-15" class="headerlink" title="2021&#x2F;6&#x2F;15"></a>2021&#x2F;6&#x2F;15</h4><p>6月15号爸爸跟我说，我三天之后就要去美奥口腔，因为现在疫情又开始反弹了，前几天在广州发现了有一个新冠患者，所以说他们要求在三天之内如果比如说我要去看口腔科嘛，所以像这种我必须要提供三天之内的核酸检测，于是我今天就去大门口检验核酸了，人非常多，我排了好久的队。</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707122849.png" style="zoom:80%;" /><h4 id="2021-x2F-6-x2F-16"><a href="#2021-x2F-6-x2F-16" class="headerlink" title="2021&#x2F;6&#x2F;16"></a>2021&#x2F;6&#x2F;16</h4><p>6月16号廖林浩他过来了，起初是他联系了爸爸，然后爸爸说廖林浩现在回深圳了，要我跟他一起去玩，然后我就联系他，叫他来我们家一起玩，因为我搬家了，所以说我就给他打了个滴滴，让他过来之后第一给他送到壹方城对面去了。找到他之后，他说他要做什么核酸，然后我们就跑到大门口，结果发现人还是超级多（我昨天做过），他就放弃了说，那我们还是去玩吧，我就带他先回家休息了一下，并且参观一下我们家，然后就带他去了欢乐港湾。还请他喝了喜茶。</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707123235.png" style="zoom:80%;" /><p>变化挺大的，他好像没怎么长，然后我从之前很矮，现在变得有1米8了，廖林浩还是在1米72，他之前比我高的。</p><h4 id="2021-x2F-6-x2F-17"><a href="#2021-x2F-6-x2F-17" class="headerlink" title="2021&#x2F;6&#x2F;17"></a>2021&#x2F;6&#x2F;17</h4><p>6月17号大硕哥哥过来了，当时我去看牙了：</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707123321.png" style="zoom:50%;" /><h4 id="2021-x2F-6-x2F-18"><a href="#2021-x2F-6-x2F-18" class="headerlink" title="2021&#x2F;6&#x2F;18"></a>2021&#x2F;6&#x2F;18</h4><p>6月18号大硕哥哥给我买的书到了，有两本。然后我还又买了两本，也是大硕哥哥推荐给我的。今天是星期五嘛，我差不多下午1:00的时候收到了爸爸信息，他说让我去他公司跟他实习的那个哥哥聊会天，我们聊得挺多的，从下午2点多应该说接近3点的时候聊到了下班就是下午5点，我们聊了很多一些什么专业啊，还有雅思啊，还有很多未来的计划。他人还挺好的，我们聊完之后只有爸爸邀请他到我们家去吃饭，然后我那个实习的哥哥还有大帅哥都一起聊天，实际那哥哥现在才上大二，然后因为在英国他们本科是三年，他再读一年，准备一个毕业论文就可以毕业了，他说他是1999年的，当时我说还有一个大硕哥哥他正在读博士，然后他就觉得那个大硕哥哥应该比他大三岁左右，但是结果大硕哥哥是98年的，才比他大一岁。之所以会这样，是因为他是读的普高，然后在高三下半年他才去准备的雅思，最后好像考了6分，最后也考了高考，但是他们英国并不看高考，所以说他必须要上语言班，在英国语言班跟加拿大不一样，他那边的语言班你上完之后可以根据你分数的高低去选择学校，而不是你只能选择本校的。但是在他学校读的语言也在那个学校读的本科，然后是金融专业。</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707123534.png" style="zoom:50%;" /><h4 id="2021-x2F-6-x2F-19"><a href="#2021-x2F-6-x2F-19" class="headerlink" title="2021&#x2F;6&#x2F;19"></a>2021&#x2F;6&#x2F;19</h4><p>6月19号，我下午去前海湾玩去了</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707123638.png" style="zoom:50%;" /><h4 id="2021-x2F-6-x2F-20"><a href="#2021-x2F-6-x2F-20" class="headerlink" title="2021&#x2F;6&#x2F;20"></a>2021&#x2F;6&#x2F;20</h4><p>6月20号我今天睡得非常早（现在应该算是6月21号了），晚上8点17分就睡着了，然后起来的时候是凌晨，刚好12:59，睡了4个小时42分钟。现在刚刚起来洗完脸刷牙，现在是凌晨1:23，然后我就趁这个时间，我不困的这个时间写下日记。总结一下今天吧，今天差不多11点多起来，然后中午吃饭的时候大硕哥哥就不在了，他去找他的朋友去了，下午他回来的时候正好赶上晚饭时间，当时满夜过来了，我们吃饭吃的非常早，5:00就吃饭了，吃完饭之后他就来到我房间，然后我们一起聊关于大学课程的东西，然后我们就打开官网先搜索了香港城市大学他的母校，然后给我介绍一些研究生的课程，他们之前学的，然后打开了我们学校官网，看了我们大学4年本科的课程，我发现大学一第1年和第2年学的东西都是非常基础的，还很少涉及编程之类的，然后到大二下学期就要开始选择你后面的细分方向了，比如说你以后想去搞软件工程呀，然后信息啊，还有什么自媒体啊相关的大叔哥说弄那个媒体相关的没什么用，让我选其他的，然后他还有那种你既可以修软件也可以修媒体，然后可以那种结合的来，但是那种你必须要修媒体，所以大硕哥哥说还是只修一种细分专业吧。而且他大四会有很多选修，你可以选你自己喜欢的，所以学的东西并不亚于那两个结合的。</p><p>当时因为快到618了，我就买了很多东西。现在转眼就到了6月21号，在我睡觉之前的。6月20号是6月份的第3个星期天，也就是父亲节，陈子悦一早起来就给爸爸发信息说父亲节快乐，但是我却没有给爸爸买礼物（虽然陈子悦也没有买，但我连祝福的话也没有跟爸爸说。）</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707123812.png" style="zoom:50%;" /><h4 id="618淘宝京东活动特别篇："><a href="#618淘宝京东活动特别篇：" class="headerlink" title="618淘宝京东活动特别篇："></a>618淘宝京东活动特别篇：</h4><p>因为是618，所以我准备买一些东西，然后淘宝也有一个红包是满500块钱减40块钱。于是我就像我同学询问了一些东西我想买一些护肤品。但实际上我护肤品也就花了300块钱，其他都是买了一些裤子呀衣服还有书。事实上我发现二手网站挺对人友好的。如果你想买一些书或者一些日常用品在上面一般都会卖并且挺便宜的，在淘宝上像这些书要原价的一半或者2&#x2F;3再带，但在那上面很便宜。</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Screenshot%202023-07-07%20at%2012.40.14.png" style="zoom:40%;" /><p>这个是从妈妈衣柜里找到的爽肤水，但邓睿不建议我用，她说这个有点刺激皮肤容易长痘痘：</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Screenshot%202023-07-07%20at%2012.41.09.png" style="zoom:40%;" /><h4 id="2021-x2F-6-x2F-21"><a href="#2021-x2F-6-x2F-21" class="headerlink" title="2021&#x2F;6&#x2F;21"></a>2021&#x2F;6&#x2F;21</h4><p>6月21号，我今天早上起来之后就一直没有睡，直到差不多10:00左右的时候又睡到了12点。然后在下午的时候我一个人去了蛇口玩，到那里我发现好像有个地方，我之前去过，就是有一个很大的轮船，我们在那里吃过晚饭还带着陈子悦好像，然后我们似乎还在里面住了几天。实际上我去那里是因为在抖音上面有人拍了防堤坝公园的视频，我感觉那里风景非常好，我就想去看看。然后到了地铁站那个地铁站叫海上世界，出来就看到了这个很大的轮船。前往防堤坝公园：</p><center>  <img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707124237.png" style="zoom:55%;" /><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707141606.png" style="zoom:55%;" />  </center><p>路过一个学校我觉得好好看，感觉像贵族学校：</p><center>  <img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707141640.png" style="zoom:55%;" />  <img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707141700.png" style="zoom:55%;" />  </center><p>骑了1.4公里终于到了；我骑自行车进来的时候，有一个保安在入口那里，然后他旁边有个牌子是周末不许自行车进入，然后今天是星期一，我就问那个保安小哥哥（很年轻，看起来20岁左右）今天不是周末，那我可不可以骑自行车进去？然后他就摆出好像是在问我，但好像又是在自言自语说：“今天是星期几呀，”说完他就看了看自己的手机：“哦，今天是星期一，你可以骑自行车进去了”。我听完他的话，我感觉他好像站着脑子都出问题了，他居然不知道今天是星期几哈哈哈</p><p>刚刚骑进来映入眼帘就的是满目青碧绿的海水，那碧绿的海面，像丝绸一样柔和，微荡着涟猗：</p><center><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707141903.png" style="zoom:55%;" /><img src="../../../Desktop/Typora_Picture/20230707141918-20230707144330000.png" style="zoom:55%;" /></center><p>准备原路返回又看到了那个学校。里面还有人在打球｜路过，发现这是当时地铁站出来的背面；看到这里可以下去；</p><center>  <img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707142124.png" style="zoom:55%;" /><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707142246.png" style="zoom:55%;" /></center><p>于是发现了女娲补天；地铁站很长地铁站发现的游玩向导图：</p><center><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707142254.png" style="zoom:60%;" /><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707142349.png" style="zoom:45%;" /></center><p>晚上将近8点才到家。</p><h4 id="2021-x2F-6-x2F-22"><a href="#2021-x2F-6-x2F-22" class="headerlink" title="2021&#x2F;6&#x2F;22"></a>2021&#x2F;6&#x2F;22</h4><p>6月22号早上9点，大硕哥哥就跑到我房间说他要去罗湖，然后要准备回香港了，当时我还在睡觉，意识都有点模糊（捂脸）。然后今天一天呢，本来是想去爸爸公司拿一本书去看的，但是想去的那时候离爸爸下班只有两个小时了（他5:00下班，但是有时候不知道为什么，他老是喜欢晚一点下，就像我上次去他公司的时候，他还晚了半个小时才跟我和那个哥哥一起回去），我就说算了还是在家里吧，于是我就一个人抱着书跑到1楼阳台看书，一直没等到爸爸回来，爸爸回来都快7点了，在此之前我就早早把晚饭吃完了。然后到8点多的时候，爸爸就发微信跟我说（虽然他住在旁边的房间里）现在壹方中心3楼又有做核酸的，叫我现在赶紧下去做。我就跟他说，我把这把游戏打完就下去就只有10分钟了。等我坐电梯到3楼的时候就看到了“惊人”的一幕：</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707142445.png" style="zoom:80%;" /><h4 id="2021-x2F-6-x2F-23-25"><a href="#2021-x2F-6-x2F-23-25" class="headerlink" title="2021&#x2F;6&#x2F;23-25"></a>2021&#x2F;6&#x2F;23-25</h4><p>6.23-6.25 没干什么事情</p><p>6月25号我们晚上的时候去美宜佳吃饭了，然后我和陈子悦回去的时候，我的手机不小心摔了，但是那个时候已经差不多10点了，所以壹方城的华为店应该已经关门了。</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707142515.png" style="zoom:60%;" /><h4 id="2021-x2F-6-x2F-26"><a href="#2021-x2F-6-x2F-26" class="headerlink" title="2021&#x2F;6&#x2F;26"></a>2021&#x2F;6&#x2F;26</h4><p>6月26号我在手机上搜索华为维修店，发现在美宜佳旁边有一个店可以修我的这个屏幕离我们这边大约700多米，所以我就打算骑自行车过去，下午的时候陈子悦跟妞妞想要去天虹那边看金鱼，所以我就跟着他们一起下去，而我是去修手机，他们是去看金鱼。手机给他们之后，我要了一部备用机。本来我以为是同款的那种，实际上他给我的备用机非常非常垃圾，我压根都没有用，他跟我说最早的话明天就能修好，最晚的话后天才能修好，并且有可能修复不成功，如果修复成功的话，我就要交267块钱，如果修复不成功也就是他不小心在修复的过程中把我的显示屏给弄花了的话，我就要交700块钱重新换一个显示屏。我觉得最傻的地方就是如果不小心弄花了，那就表示是他能力不行还要我们交这么多的钱。</p><center>  <img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707142558.png" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707142614.png" style="zoom:50%;" /></center><h4 id="2021-x2F-6-x2F-27"><a href="#2021-x2F-6-x2F-27" class="headerlink" title="2021&#x2F;6&#x2F;27"></a>2021&#x2F;6&#x2F;27</h4><p>6月27号，中午爸爸就跟我说要跟他们一起去送陈子悦上学。一下午2:00就出发了，之所以那么早是因为陈子悦他要做核酸检测，所以我们必须提前到那里，我们开了挺久的车，3:30才到。送完陈之悦之后，我发现旁边好像挺好玩的，于是我就跑到他学校旁边的山上玩去了，顺便参观了一下他们学校的外观，于是我观摩了他们的宿舍饭堂还有教学楼，他们学校还是很大的，并且他们学校对面就是宝安外国语学校听陈子悦说好像是豆豆在上的学校。</p><p>学校旁边：</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707142722.png" style="zoom:70%;" /><p>观摩完之后我骑着自行车爸爸车是走路跑到了山下面，爸爸没有上去，然而我打算上山，但是也就骑了不到一半。下面有卖荔枝的，爸爸买了一袋荔枝，坐在那里吃荔枝，他就看着我上山，然而我骑了没多久就下来了，于是就跟爸爸一起吃荔枝，但是他那个例子还挺多的，一直我们两个人还没吃完，挺便宜的，20块钱那么一大袋。不一会儿我们就打算回去了，我们回去必须要乘着爸爸的汽车走，但是在去往我们汽车的路上，爸爸说这里有一一个公交车站，可以直接到壹方中心，然后我就想我们从壹方中心开车过来都要那么久，公交车一站一站停的肯定更久啊。终于我们到了车上，在回家的过程中，我们经过了桃源居，路过完之后，爸爸突然心中一念说：我想去南山剪个头发，就是范思哲，因为妈妈在那里有卡。</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707142752.png" style="zoom:70%;" /><p>为了让我不白来，爸爸还跟我说剪完头发我们去吃日本料理吧，可能他也想吃。</p><center><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707144833.png" style="zoom:55%;" /><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707142859.png" style="zoom:55%;" /><center>  <img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707142918.png" style="zoom:45%;" /><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707142959.png" style="zoom:55%;" />  <br> 一共有十道菜</center><h4 id="2021-x2F-6-x2F-28"><a href="#2021-x2F-6-x2F-28" class="headerlink" title="2021&#x2F;6&#x2F;28"></a>2021&#x2F;6&#x2F;28</h4><p>6月28号，我下午2:00的时候接到了来自华为那边的电话，他让我3:00~4:00去取手机。修复成功了，我交了267块钱。晚上爸爸让我去拍照，因为我要办港澳台通行证。</p><h4 id="2021-x2F-6-x2F-29"><a href="#2021-x2F-6-x2F-29" class="headerlink" title="2021&#x2F;6&#x2F;29"></a>2021&#x2F;6&#x2F;29</h4><p>6月29号 本来我是想去之前和妈妈一起到的那个很大的一个购物商场，我们还在那里喝过奈雪。我之前自己还去过一次但因为疫情他们关门了这次我还想再去看一下。但是骑行的过程中我发现有一边有很多的高楼大厦，这些瞬间吸引了我的注意力，于是我就骑着自行车没有导航就直接朝着高楼大厦的方向驶去。跑了半天一直没有找到过去的路，还被咬了一个包，后面无奈之下用导航发现还要绕一个大弯才能过去，但是最后还是到了那个地方，那个地方比我想象的要繁华一点点，但是我觉得这个地方还挺偏僻的，旁边也没有什么东西，都是山。在里面逛了一会儿，买了一个饮料，我发现挺好喝的，于是我还把这个推荐给了龚想。差不多晚上天黑的时候才回去的，那里有一个地铁站叫铁路公园，而且是5号线，我就坐着那个地铁直接就到了宝安中心。</p><center>  <img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707143201.png" style="zoom:53%;" /><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707143355.png" style="zoom:53%;" /></center><p>到了：</p><center>  <img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707143247.png" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707143611.png" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Screenshot%202023-07-07%20at%2014.33.10.png" style="zoom:40%;" /><h4 id="2021-x2F-6-x2F-30"><a href="#2021-x2F-6-x2F-30" class="headerlink" title="2021&#x2F;6&#x2F;30"></a>2021&#x2F;6&#x2F;30</h4><p>6.30 星期三我回学校取毕业证，不过虽然我到了中加的大门口，但是我没有进去，因为我先要去医院看眼科，爸爸之前给我预约了一个医生。只好拍一下先；坐在前面的是爸爸：</p><center>  <img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707145050.png" style="zoom:55%;" /><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707145118.png" style="zoom:55%;" /></center><p>还有加方毕业证：</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707145345.png" style="zoom:50%;" /><p>我们取完毕业证之后，我把我的两个毕业证都给爸爸让他拿回去了，我就跟着冯培耀去他家玩了。</p><center>  <img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707145455.png" style="zoom:55%;" />  <img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707145507.png" style="zoom:55%;" /></center><p>打的回家，到家后看了看我们家的猫咪：</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707145609.png" style="zoom:50%;" /><h4 id="2021-x2F-7-x2F-1"><a href="#2021-x2F-7-x2F-1" class="headerlink" title="2021&#x2F;7&#x2F;1"></a>2021&#x2F;7&#x2F;1</h4><p>7月1号，我下午去了美奥口腔看牙齿。我在那里等的时候我发现爸爸也过来了，原来是他说如果现在牙套好了的话就可以取下来，但是取下来要他签字，所以他就跟着过来了。等我们看完了之后，医生说我的牙缝已经都完全合上了。但是还要固定一段时间，所以就约了7月26号再过来拆线（牙套）。这样的话，我8月初的时候就可以去香港了。（阴性是好的）</p><p>本来我也是要去参加高考的，但是最后嫌麻烦就没有去。廖林浩才考了470好像。</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707145719.png" style="zoom:50%;" /><p>一本线539分；蓝深高考成绩（tcl是太惨了的意思）：</p><img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/Screenshot%202023-07-07%20at%2014.59.10.png" style="zoom:50%;" /><h4 id="2021-x2F-7-x2F-2"><a href="#2021-x2F-7-x2F-2" class="headerlink" title="2021&#x2F;7&#x2F;2"></a>2021&#x2F;7&#x2F;2</h4><p>7月2号今天我起来的比较早，然后8点多的时候就出发去医院要去看眼睛（复诊）。爸爸给我约的时间是10:00~10:30，但是可能因为疫情原因，我必须要转诊。这就意味着我要提早去。于是我就在那等了好久好久，10:30的时候才到我。最后一番操作下来，医生说我不用换度数（听到他这句话我就放心了）。看完眼睛之后我就跑到了爸爸公司，因为他说他要带我吃饭，而且我下午还要去公安局，我要去公安局准备的资料都在他那里。中午的时候他带我去吃了他们公司所谓的饭堂，实际上就是一家店，然后里面的饭我觉得一般般。</p><p>我就夹了一点点菜，然后就吵吵两次，吃完饭之后我就回到爸爸公司睡觉，爸爸把他的沙发给我了，由于我非常困，所以我一下就睡着了，我都不知道爸爸怎么睡的。下午将近2:30的时候，爸爸把我叫起来了，他说要我现在赶快去公安局。并且他不让我打的，说旁边就有一个公交站台，直接就可以坐到公安局。</p><p>我在那等了一会儿之后公交车就来了。一上车我就慌了，因为我看到那里投硬币的盒子，我才知道我没有带硬币。然后我就问司机怎么支付啊，他说你可以扫码呀，然后我就打开了微信扫一扫，结果没有找到他的微信付款码在哪里。那个司机就跟我说，你难道是第1次坐公交车吗？你要用乘车码呀。我才知道好像有一个小程序跟是乘车码，我都是用它来做地铁的，但是从来没有用它来坐过公交。</p><p>司机员也挺好的，还跟我一直聊天，因为车上就只有我一个人。</p><center>  <img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707150051.png" style="zoom:45%;" />  <img src="https://raw.githubusercontent.com/CHEN-Ziyang-Rocky/Image/main/20230707150124.png" style="zoom:55%;" /><p>但其实我都不知道我什么时候应该下，我是根据我看到哪个地方熟悉我就下，结果下的地方并不是公安局，我看错了。于是我只好骑自行车过去了。好不容易到了公安局，我发现我口渴了，然后我就在旁边的报刊亭买了一杯瓶装奶茶。他的口感一点都不像奶茶，而是像那种咖啡。爽爽的喝了一大口之后就屁颠屁颠的跑到了公安局。一顿操作下来之后，我发现我缺少一个资料，那就是粉签，然而我的粉签还没有下来，还在审核当中。我就只好回去了。哎。</p><p>今天还加到初中的李淑榕老师了。</p>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Diary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的日记｜My Diary -- 2019/12 To 2020/3</title>
    <link href="/2020/03/16/introduction/"/>
    <url>/2020/03/16/introduction/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Made by Ziyang CHEN, Rocky, 陈子阳</strong></em></p><hr><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>自2019年起，我就想记录每一天。那时，我没有智能手机，但学校允许带MP3，因此我决定每天用iPod简单地记录下自己每天的想法。我并不关心语法或排版，只是想记录下自己当时的想法和当时的事情过程。现在，我更喜欢用手机拍摄视频来记录日常，也就是我们俗称的vlog。我当初产生这个想法的原因可能有以下几点：</p><ul><li>我不记得小时候发生的许多事情，回想起来感到很空虚。</li><li>我想让未来的自己知道曾经的我每天在做什么，想些什么。</li><li>…</li></ul><p>我写日记的原因不同于其他人，并不是为了缓解情绪、提高写作能力或者激发创造力，而是纯粹想记录生活，帮助未来的我更好地了解过去的自己。</p><hr><h4 id="2019／12／1-星期日"><a href="#2019／12／1-星期日" class="headerlink" title="2019／12／1 星期日"></a>2019／12／1 星期日</h4><p>晚上6：20艺术节开幕式</p><p>（主持人大赛和十大歌手）</p><p>由于我的疏忽</p><p>忘记这回事了</p><p>所以迟到了</p><h4 id="2019／12／2-星期一"><a href="#2019／12／2-星期一" class="headerlink" title="2019／12／2 星期一"></a>2019／12／2 星期一</h4><p>晚上6：20到9：30艺术节开幕式</p><p>我们班表演校园欺凌</p><p>过于真实而没有选上</p><p>有点遗憾</p><p>但又很开心</p><p>因为我表演了老师这一角色</p><p>有很多台词</p><p>而这又是学校性的表演</p><p>全校都要看我们表演</p><p>所以没上我还蛮开心的</p><p>感叹一下：真是不懂丢面子</p><h4 id="2019／12／3-星期二"><a href="#2019／12／3-星期二" class="headerlink" title="2019／12／3 星期二"></a>2019／12／3 星期二</h4><p>下午有Social Study的课程</p><p>我、Jeremy、Jimmy还有Leo花了一个中午</p><p>做完了Ayaz布置的小组作业（视频）</p><p>下午Social Study的课上</p><p>老师说现在这节课交就不会扣分</p><p>下课后交扣两分</p><p>下节课后扣四分</p><p>然后八分</p><p>最后就是扣一百分</p><p>这节课仍然可以去电脑房做</p><p>不过我们这组是唯一全部完成的（完全准备充分的）</p><p>所以Ayaz说我们可以玩我们想玩的东西（游戏）</p><p>晚上爸爸过来了</p><p>把我的快递（iPod的充电线、钥匙带还有耳机）</p><p>重点是爸爸带来了以前爸爸妈妈为我写的作文</p><p>我看完后可以看出他们想说的就是：孩子已经长大了</p><p>全文充斥着期望和感叹</p><p>感叹他们竟然成为了父母</p><p>竟然有了孩子 竟然会说话会走路 后面竟然会自己骑自行车上学、帮爸爸妈妈提行李…</p><p>直到他们发现我在一天天长大 他们在一天天变老</p><p>我想等我长大并有了孩子会不会也会有这种想法呢</p><h4 id="2019／12／4-星期三"><a href="#2019／12／4-星期三" class="headerlink" title="2019／12／4 星期三"></a>2019／12／4 星期三</h4><p>下午4：30到6：30是跳蚤市场</p><p>爸爸昨天过来时给我带了80块</p><p>但我只买了5块的肉松面包</p><p>我们班的东西大卖（中加土豪太多）</p><p>而且Jeremy的妈妈的手艺很不错</p><p>为了感谢Jeremy妈妈做的料理（料理帮忙班上赚了很多钱）</p><p>家委分了300块给Jeremy妈妈（尽管Jeremy妈妈不停地说不用不用）</p><p>晚上为了庆祝跳蚤市场净赚两千</p><p>家委给我们买了喜茶</p><p>一杯要41块 好贵 但很满足</p><p>（全班27个人）</p><h4 id="2019／12／5-星期四"><a href="#2019／12／5-星期四" class="headerlink" title="2019／12／5 星期四"></a>2019／12／5 星期四</h4><p>Social Study课上展示了每个组做的视频</p><p>我们组是第一个被放出来的</p><p>当时声音一出来的时候</p><p>大家都很惊讶</p><p>说声音很好听</p><p>还有人说可以去当声优了</p><p>我很开心，因为声音是我滴</p><p>嘻嘻</p><p>4：25到5：00艺术节闭幕式</p><p>因为中途下雨</p><p>被迫暂停了（在操场上真的好冷）</p><p>所以只有颁奖，而没有表演</p><h4 id="2019／12／6-星期五"><a href="#2019／12／6-星期五" class="headerlink" title="2019／12／6 星期五"></a>2019／12／6 星期五</h4><p>新东方免费一对一节课</p><p>老师姓朱</p><p>每次周五，我基本上都是最后走的</p><p>今天也是一样</p><p>打算尽全力复习 下周期末考试</p><p>晚上10点左右</p><p>看到Jimmy和Leo在通话</p><p>加入后</p><p>知道Jimmy的手烂了</p><p>而他家的门又是指纹解锁</p><p>不能用钥匙</p><p>所以他在外面一直带着</p><p>到11点钟左右他姐姐回来才进去</p><h4 id="2019／12／7-星期六"><a href="#2019／12／7-星期六" class="headerlink" title="2019／12／7 星期六"></a>2019／12／7 星期六</h4><p>没有课 早上10点多才起来</p><p>洗漱后 打开了电脑</p><p>说着复习 却又玩了会游戏</p><p>玩玩后背起了语文：逍遥游</p><p>问爸爸去哪了 多多爸爸说去陈子悦学校开家长会了</p><p>文言文难背 早上爷爷和小浩浩过来了</p><p>陪他们吃了午饭</p><p>下午 开始复习物理</p><p>爷爷陪浩浩出去玩</p><p>回来后我洗了个澡</p><p>3：00左右我洗完的同时爷爷说他们要走了</p><p>走时浩浩想要糖 但糖是陈子悦的</p><p>爷爷怕陈子悦生气 怎么样也不拿走</p><p>送他们到门口 爷爷感叹了一下陈子悦还有妈妈 便带着担心走了</p><p>回到书房 继续学习了</p><p>看了很多关于物理的视频</p><p>陈子悦下午5：00左右回来了</p><p>带着一位同学</p><p>我看视频看到爸爸回来 吃饭</p><p>又看到晚上22：30左右</p><p>后面把一些文件（视频）上传到了ipod上</p><p>后悔把充电宝给Jimmy带回家充电</p><p>陈子悦的同学住在我们家了</p><h4 id="2019／12／8-星期天"><a href="#2019／12／8-星期天" class="headerlink" title="2019／12／8 星期天"></a>2019／12／8 星期天</h4><p>早上10：20左右被陈子悦的弹琴声吵醒</p><p>我说他们弹到12：30就给他们5块钱</p><p>他们嫌钱少便不弹了 嘻嘻（这个方法好吧）</p><p>下午拿着语文和生物准备复习</p><p>然后开始玩起来了游戏</p><p>（哎、抵不过这一点点诱惑的人啊）</p><p>后面上传了一些视频到iPod上面</p><p>直到5：40收行李箱</p><p>6：18出发去学校了</p><p>这周作业有很多 因为这周要考试</p><p>所以准备补作业</p><p>放东西时经过了马可旁</p><p>马可把我叫住 我帮你把面带来了 10包 然后我说了声：十分感谢</p><p>随后同学们陆陆续续拿走（坑）了我5包</p><p>回到了宿舍 泡了一包</p><p>随后Jimmy、Leo、马可加入这个队伍</p><p>后面Lee也泡了一包</p><p>当我们都吃完，桌子也清理玩之后</p><p>马可敲了敲我们宿舍的门</p><p>＂我的。。（我忘记他说什么了，好像说的是物流）出了点问题 十分抱歉 看你又被瓢了挺多面的 作为补偿 给你（说着把东西交到了我手上）</p><p>马可又给了我一包面外带三根香肠</p><p>我、马可、Jimmy吃都是马可的拌面</p><p>Lee的拌面和马可的牌子是一样的</p><p>只是Lee是在Alex哪拿的</p><p>而Alex的这个与马可相同品牌的泡面是他妈妈在香港买的</p><p>调料包比国内多一种</p><p>今天过得真快</p><h4 id="2019／12／9-星期一"><a href="#2019／12／9-星期一" class="headerlink" title="2019／12／9 星期一"></a>2019／12／9 星期一</h4><p>第一节目课下课就是早操时间</p><p>今天周一升国旗</p><p>结束后我把全班的化学作业交给了于伟老师</p><p>化学办公室换了 好心的IT老师领着我出去并找到了（她说她顺路 应该是要出去上课吧）</p><p>交完后回去上了生物课 测试</p><p>但由于我们组（马可、我。。）上一次测试最高</p><p>所以不用交这次测试（10个错6个就要去老师办公室）</p><p>我们就可以保证不会去老师办公室</p><p>ENG课巩固复习了一下Idiom（俗语）</p><p>结果晃着晃着就到最后一节课（体育课）了</p><p>买了一杯雪碧准备着</p><p>被同学们喝了一大半QAQ</p><p>打篮球 一个都没有进</p><p>现在在宿舍里面都还很渴</p><p>下午的课程我们可先暂且不谈</p><p>先说说晚上发生的事情吧</p><p>因为这件事搞得我有点难以理解</p><p>为什么呢</p><p>在上完AP化学之后</p><p>紧接着是9：00到9：40的晚自习</p><p>在语文课代表龚想说今天默写可以叠加到明天之前我都是蛮开心的</p><p>但到了换座位的时候我的心情发生了小小的波动</p><p>实际情况是 已经有俩周没有换座位了，而且上次我就是在三排之外</p><p>这其实也不算什么</p><p>认为感到疑惑的是</p><p>她（温芷卉）不仅把我放在了最后一排，而且她竟说June没和她说（我座位特殊的事）</p><p>这就意味着我离黑板（白板）又远了一步</p><p>现在想想就算了 不和高中生计较</p><p>（虽然我也是高中生2333）</p><p>回到宿舍 准备把写的日记用QQ发给爸爸</p><p>没想到的是爸爸竟然在陌生人的分组中 我很生气</p><p>然后换到了家人的分组</p><h4 id="2019／12／10-星期二"><a href="#2019／12／10-星期二" class="headerlink" title="2019／12／10 星期二"></a>2019／12／10 星期二</h4><p>早上6：53起来的</p><p>还好今天不是我值日 不然的话我肯定要迟到</p><p>吃完早餐 往班级走去 感觉什么忧虑都没有</p><p>到了班级坐在新位置上</p><p>惊讶的是新同桌贾雨茹竟然主动找我说话</p><p> （心想：我和她熟吗？好像以前也作过同桌）</p><p>快考试了早上的早读老师让我们自己复习</p><p>然后我把昨天的英语作业给补了</p><p>上午课间女生（我旁边）们在讨论着中午的义卖</p><p>隐隐约约听到凉皮这两个字</p><p>记得跳蚤市场到时候我们班好像垄断了凉皮的售卖</p><p>我们班大约二三十个凉皮在短短半个小时之内被扫荡一空</p><p>上午最后一节课下课 走到一楼时</p><p>看见并听见＂蛙吹梅雨＂在和一位男同学讲话</p><p>＂带钱了吗？＂＂没有 我这周没带 我打算下周再买＂</p><p>我大概记得他们也在说凉皮的事</p><p>午餐结束后 在宿舍看到王一在接水</p><p>我搭了一句＂嘧哆哆好处吗？＂＂好吃a＂</p><p>过了一会有人敲我们宿舍的门</p><p>打开一看 大胖Edd站在门外＂借一个盆＂＂OK＂</p><p>大约5分钟他就送回来了</p><p>13：00了我宿舍的人都没回来</p><p>然后去上了个大手</p><p>结果13：07时上完后</p><p>Jimmy回来了</p><p>他说他敲了一年的门</p><p>2333 我哭笑不得</p><p>只见他把衣服脱了</p><p>边走边笑着说我也要上厕所</p><p>他进去后我也刷了个牙</p><p>随后我听到了每个人在洗澡时才会发出的声音</p><p>还有他那动人的歌声</p><p>直到13：25他才睡（我也是）</p><p>下午Social Study老师Ayaz把每个小组的视频都放了一遍</p><p>每个组Ayaz都打了相应的分数</p><p>分数发下来时 我们小组获得94分</p><p>Ayaz说是全校最高的分数</p><p>每个星期二下午都会有一个自习</p><p>然后生物老师抱着一打试卷打开我们这＂安乐＂的教室的门</p><p>晚饭时间 Roy想和我一起回宿舍洗澡</p><p>我说＂冬天不用每天都洗澡＂</p><p>（用较为委婉的话拒绝了他，并说服他和我一起去吃饭</p><p>晚上历史课 老师发了一套试卷 限时30分钟</p><p>（Jeremy和贾雨茹换位 因为贾雨茹前面就是Grace）</p><p>虽然最后我只得了69分 但感觉还可以</p><p>（因为其它人得分都不高）</p><p>晚自习时间被数学老师占用了</p><p>带着一起复习</p><p>晚自习时间Roy和Mark依次坐到了我旁边</p><p>Mark还推荐了一部番给我</p><p>过着过着一天就又结束了</p><h4 id="2019／12／11-星期三"><a href="#2019／12／11-星期三" class="headerlink" title="2019／12／11 星期三"></a>2019／12／11 星期三</h4><p>昨天晚上蚊子好像在我床上聚会</p><p>欢快地讨论着怎么解决我这个＂大餐＂</p><p>以至于早上6：55才起床</p><p>没时间刷牙 扒拉了一下脸就走了</p><p>上午的课都是在复习</p><p>感觉政治要背的东西好多</p><p>中午又有义卖</p><p>但是今天午餐很好吃</p><p>所以王一没买嘧哆哆</p><p>不过我看到好多女生都买了奶茶</p><p>大胖也买了</p><p>回到宿舍 映入眼帘的是满目的乡村既视感</p><p>老翁把火锅煮了</p><p>第一感想就是为什么我饱的时候煮啊 呜呜呜</p><p>过了一会 Jimmy看了一下他的＂拖鞋＂说：老翁你的乐谱（快递）到了</p><p>老翁听到后说：好 我去取 反正火锅还没煮好</p><p>说完带门而去</p><p>Jimmy在老翁出去期间对正在洗澡的Lee说：陈乐好了没 已经洗了17分钟了 快点 我要上厕所</p><p>Lee出来 Jimmy进去 老翁回来了</p><p>看到老翁手上拿着一个小本子冲进了宿舍</p><p>迫不及待地打开了他的尤克里里</p><p>此期间宿管老师把Lee叫走了</p><p>Leo弹唱了一会后终于打开了那封盖着腾腾热气的火锅盖</p><p>他叫我过去尝尝 一闻味道 辣</p><p>汤汁似鲜血 小试一口 好似团团火球从嘴巴里被释放出来</p><p>Jimmy出来了也过去了（然后他就一直吃 直到Lee回来）</p><p>我问Lee：老师把你叫过去干嘛</p><p>他说：楼下老师投诉我们迟到人数太多 导致每次都有好多人堵在楼梯 还说下次再迟到就发过失单</p><p>说完也到老翁床上吃</p><p>（谁洗筷子大战一触既发）</p><p>下午是ENG的期末考试</p><p>发生了一件紧张万分的事情：</p><p>考试铃声响起时</p><p>我才发现我没有添答题卡</p><p>我开始了一场生死时速</p><p>奋笔疾书地填涂这答题卡</p><p>才第一次感觉原来选择题怎么多</p><p>外教老师（白色头发 估计四五十岁的样子）说：We have to go</p><p>我说：＂Please take me time.”</p><p>还有”Wait a moment.”</p><p>老师等了我大约一分钟</p><p>我写得铅笔迹还能隐隐约约看到选项的字母</p><p>好不容易写完</p><p>身体背后还出了一身冷汗</p><p>回到教室</p><p>我跟Jimmy说了我的事情</p><p>Jimmy说周嘉也没有涂答题卡</p><p>再看向周嘉 她一脸悲伤</p><p>小小的眼珠子似乎被泪水填满</p><p>眼角边还散落着几条红血丝</p><p>不知道为什么我竟然有一种庆幸有人和我一样的感觉</p><p>但她比我更加严重</p><p>她是完全忘记填涂答题卡</p><p>仅仅填了三十多道</p><p>她听到我也没涂完的时候问了我一句：你不急（担心）吗</p><p>我为什么不是很担心呢</p><p>那是因为我有那如德国柏林墙一般厚的脸皮</p><p>考试完后的第一节课就是Jane的课</p><p>周嘉在课后和老师讨论了这一件事</p><p>老师叫她赶紧去外教办公室</p><p>不然就没办法改了</p><p>＂答题卡＂事件先告一段落</p><p>（Jane的课上完后 是语文课）</p><p>老师抽了一些逍遥游的句子让我们默写</p><p>晚上有人把Mark、王一、Alex还有Jimmy的假面骑士变身视频放出来了 引发了全班的笑点</p><p>然后今天就没什么特别的事情了</p><p>座位：（高二7班）</p><p>。</p><p>。</p><p>。</p><p>刘通</p><p>我</p><p>Roy</p><p>上午11：40考完试</p><p>大约11：45到的食堂</p><p>饭看起来不是很好吃</p><p>我和Roy就一起回了宿舍</p><p>记得我把碗放在Eric宿舍了</p><p>然后我有一次在洗手台下找到了我的碗</p><p>本来想说下面很脏不想再借给他了</p><p>但他洗的还蛮干净的</p><p>泡了两包Mark给的拌面</p><p>Roy说吃完后借他碗</p><p>没有剪刀剪调料包</p><p>在王一和Alex宿舍找了好久 未果 无奈 寻宿管</p><p>宿舍老师（古老师）走到他房间门口外 指了指门口的桌子 说剪刀固定在这里</p><p>过了一会 王一回来</p><p>我大概吃到了Jimmy回来</p><p>他是已经吃完饭了的</p><p>看着Roy有点着急</p><p>把碗给他后 他洗了一下碗便把他的面泡了</p><p>由于中午没有带iPod所以我记录地非常完整</p><p>于是饱饱地睡了一觉 嘻嘻</p><p>下午晚餐过后我一个人回了宿舍</p><p>大约半个小时</p><p>Jimmy回来了</p><p>他要洗澡 出来后 正在擦身子</p><p>有人敲门</p><p>我疑惑地打开了门</p><p>发现爸爸妈妈在外头</p><p>第一感觉就是惊讶 看到妈妈的时候有点傻住了</p><p>「妈妈居然回来了」</p><p>只见妈妈激动地笑了笑</p><p>我便引他们进来了</p><p>他们为我带了面包🍞</p><p>闲谈了许久便送他们回去了</p><p>晚上回宿舍</p><p>Leo要去大晚自习（陪GF）</p><p>Jimmy和Lee去Jeremy的宿舍</p><p>在Jeremy宿舍吃了维生素B50便回自己宿舍了</p><p>Mark来我们宿舍 带着他的iPod</p><p>聊了聊物理并且再次为我推荐了动漫「少女终末旅行」</p><p>然后和Jimmy、Lee斗智斗勇（石头剪刀布 谁输谁帮值日 中间不输不赢的人可以全权推出）</p><p>我赢了 Jimmy输了</p><p>（我：石头 Jimmy：剪刀 Lee：剪刀）</p><p>（Jimmy：石头 Lee：布）</p><p>随后Jimmy在思考准备什么礼物给他的GF（Nancy）</p><p>搜＂娃娃＂的时候 出现了成人娃娃的字样 2333</p><p>过了一会 老古突然袭击我们宿舍</p><p>Jimmy用他那闪电般的手速收了起来</p><p>今天也是开心的 不仅仅是爸爸妈妈来看我了，而且我下周可以不值日啦</p><h4 id="2019／12／13-星期五"><a href="#2019／12／13-星期五" class="headerlink" title="2019／12／13 星期五"></a>2019／12／13 星期五</h4><p>早上宿友们6：30就起来了</p><p>隐隐约约记得Eric（借厕所）和Mark进来了</p><p>上午考了生物和物理</p><p>中午我收拾了行李就回教室了</p><p>在电脑上看到了武田华恋</p><h4 id="2019／12-x2F-14-星期六"><a href="#2019／12-x2F-14-星期六" class="headerlink" title="2019／12 &#x2F; 14 星期六"></a>2019／12 &#x2F; 14 星期六</h4><p>，</p><p>，</p><p>2：20上课 写作（张荣）</p><p>4：30下课</p><p>因为看牙 所以没有自习</p><p>4：45到家</p><p>4：50看牙</p><p>5：00看完</p><p>牙医院出来 爸爸竟然在街上</p><p>爸爸面朝我这边</p><p>好像就是要来接我的样子</p><p>在楼下等妈妈收拾</p><p>坐地铁🚇去伯伯家</p><p>要去看小妹妹</p><p>没想到新开的9号线离我们小区如此地近</p><p>十几个站</p><p>从南山书城到上梅林</p><p>到的时候天已经黑了</p><p>爷爷来接我们</p><p>我跑地快 他们没来</p><p>我奇怪 打电话给爸爸 说在买水果</p><p>到后 小浩浩把玩具摆在桌子上</p><p>全是玩具</p><p>聊天 伯伯给每个人都倒了茶</p><p>浩浩不让把杯子放在桌子上</p><p>因为他要摆玩具</p><p>妈妈抱在睡觉的小妹妹</p><p>吃饭</p><p>惠惠阿姨的妈妈让我们先吃 她抱会小妹妹</p><p>爷爷和伯伯吵了几句</p><p>我吃完</p><p>看手机</p><p>惠惠阿姨帮我打开了电视</p><p>熊大它们</p><p>浩浩把脚放在爷爷头上 我生气地哄了一声</p><p>和妈妈比较了一下动画片和动漫的画风区别</p><p>妈妈对动漫赞不绝口</p><p>准备回家</p><p>爷爷带着小浩浩一起和我们下去</p><p>（感觉在整个家里的过程中 惠惠阿姨对爷爷有点偏见）</p><p>回家</p><p>看我的iPhone和华为有没有充好电</p><h4 id="2019／12-x2F-15-星期天"><a href="#2019／12-x2F-15-星期天" class="headerlink" title="2019／12 &#x2F; 15 星期天"></a>2019／12 &#x2F; 15 星期天</h4><p>10：13起床 上课</p><p>迟到了几分钟</p><p>听力</p><p>下课 助教让我自习</p><p>点了嘧哆哆</p><p>没吃完</p><p>作完作业</p><p>回家 </p><p>接Mark</p><p>他竟然就坐在家楼下</p><p>一起看电脑</p><p>思考如何下载bilibili的视频</p><p>（因为我想下载武田华恋的视频）</p><p>点了俩瓶酸奶</p><p>吃饭</p><p>爸爸妈妈和Mark聊的不亦乐乎</p><p>回学校</p><p>下课</p><p>Mark又资助了我一包面</p><h4 id="2019／12／16-星期一"><a href="#2019／12／16-星期一" class="headerlink" title="2019／12／16 星期一"></a>2019／12／16 星期一</h4><p>早上起得不早</p><p>因为今天Jimmy要实行上周的诺言</p><p>（帮我值日一天）</p><p>上午地理课是两个班（5和7）一起上 在多功能厅</p><p>中午没睡觉</p><p>晚上化学于伟老师8：00叫我们去上课</p><p>结果8：30就下课了</p><p>原来是因为老师从早上第二节课一直上到了晚上</p><p>回宿舍 Jimmy不是很开心</p><h4 id="2019／12／17-星期二"><a href="#2019／12／17-星期二" class="headerlink" title="2019／12／17 星期二"></a>2019／12／17 星期二</h4><p>问了几个课的卷面成绩</p><p>考得还不错</p><p>数学 班级第五（27）</p><p>（主要是我们班数学不错 年级前3名都在我们班）</p><p>年级排名 14 </p><p>卷面成绩分数 96分（108）</p><p>政治 班级第四（27）</p><p>（这是我完全没有想到的 我基本上老师讲的我一点也没听）</p><p>物理 80分（100）</p><p>（物理和政治是两课我一节课都没听的两门课程 但是物理我自己学了 感觉考了80分不是很开心</p><p>经济 选择题分数54分（60） 年级排名6（？）</p><p>这几天都挺热的</p><h4 id="2019／12／18-星期三"><a href="#2019／12／18-星期三" class="headerlink" title="2019／12／18 星期三"></a>2019／12／18 星期三</h4><p>今天看到日期慢慢地从几到18</p><p>不禁感叹时间流逝之迅速</p><p>早上询问了一下经济老师 我和Roy的经济大题分数 我们但是满分</p><p>这样一来我的经济分数就是54加40等于94分 算是一个不错的分数吧</p><p>化学成绩昨天就出来了</p><p>但是今天老师把我们全部的成绩打印了出来</p><p>令人惊奇的是 我58分 是年级前30</p><p>（其实就是年级第30）</p><p>全班及格的就没几个</p><p>中午的时候问了一下刘通的成绩</p><p>让我没有想到的是他政治考了全校第一 88分</p><p>差距拉的非常大 因为我政治才60分 却是班级第四</p><p>而他是年级第一</p><p>他是付出了努力的</p><p>晚上我从宿舍回教室的时候</p><p>看到好多人在看教室的大屏幕</p><p>原来是有人在玩斗地主（Alen）</p><p>十把赢了九把</p><p>晚上生物课 老师不讲课 就是答疑</p><p>结束后 政治老师来了</p><p>Leo的妈妈看到Leo政治考了45分</p><p>比较疑惑（似生气又非生气）</p><p>询问了一番后</p><p>Leo妈妈看到的结果却是 老师在不断地道歉：</p><p>＂我是新来的 教得不好＂等等</p><p>后面Leo妈妈把我叫出来说了多伦多大学夏校</p><p>一开始我一字否决 但后面Leo妈妈慢慢说服我 搞的现在有点动心</p><p>回到宿舍（我又是第一个回的）</p><p>过了一会 只见Lee提着两袋零食</p><p>我投向了羡慕的眼光</p><p>后面才知道这是妈妈和Leo妈妈买的 送来一起吃的</p><p>吃。。。</p><p>被鱼排中的刺扎到了 还出了点血</p><p>晚上把电影「解忧杂货店」看完了</p><p>感慨万千</p><p>Leo也在看 但他看的是电视剧＂庆余年＂</p><p>随后我睡觉的时候就一直想着那个电影</p><p>同时还有我的期末成绩</p><p>不知道为什么 心情比较活跃 睡不着</p><p>凌晨一点多一点（1：10左右）</p><p>Jimmy突然叫我＂子阳 睡了吗？＂</p><p>我惊奇地＂跳＂了起来：还没有</p><p>＂看来我们是集体失眠了＂说完Jimmy跑到Leo床边看了一会儿电视剧 做了几个俯卧撑后和我开玩笑地说：我们来打架吧！＂看了看我的被子＂哦 你好像没穿裤子＂</p><p>说完 他拿起了他的手机 看了起来</p><h4 id="2019／12／19-星期四"><a href="#2019／12／19-星期四" class="headerlink" title="2019／12／19 星期四"></a>2019／12／19 星期四</h4><p>时光荏苒 逝着如斯夫 不舍昼夜</p><p>早上最后一节课（化学）我们班环保部义卖</p><p>中午Edd和Timmy玩电脑被Jane抓到 过失单2张</p><p>下午放学Roy一如既往地叫我先回宿舍冲凉</p><p>然后洗完澡后 去食堂吃晚饭 期间 教学处老师叫我和Roy帮忙（把几个带有伸缩带的小型黑色围栏搬到食堂外面 食堂外面的井盖开了）</p><p>每人发了2张好人好事单</p><p>后面吃完饭他们（饭堂工作人员又搬回来了 当我们出饭堂的时候井盖已经修好了）</p><p>Roy说白搬了</p><p>晚上环保部义卖剩下的奶茶我们班分掉了</p><p>团培课 阅读 讲的很基础</p><h4 id="2019／12／20-星期五"><a href="#2019／12／20-星期五" class="headerlink" title="2019／12／20 星期五"></a>2019／12／20 星期五</h4><p>考试难</p><p>9号线好了</p><p>和Mark、王一一起走</p><p>带他们看楼下日本料理和酒吧之繁多</p><p>晚上在楼下吃饭</p><p>cafeteria called＂野食野食野食＂</p><p>因为yes yes yes</p><p>自助餐 69／人 加上锅底20块</p><p>总消费320多</p><h4 id="2019／12／21-星期六"><a href="#2019／12／21-星期六" class="headerlink" title="2019／12／21 星期六"></a>2019／12／21 星期六</h4><p>阅读课</p><p>下午自习 遇到初级班的听口老师</p><p>（她真的好像日本小姐姐啊 不仅仅是外表adorable 而且行为举止都很像）</p><p>下午5：30去满姨家给清清姐姐过生日</p><h4 id="2019／12／22-星期天"><a href="#2019／12／22-星期天" class="headerlink" title="2019／12／22 星期天"></a>2019／12／22 星期天</h4><p>11：00多起来</p><p>去海岸城吃饭</p><p>看到新东方助教林老师说早上要去自习 我没回她</p><p>本来想吃@@@</p><p>但需要排队</p><p>便换了一家叫探鱼的店</p><p>还可以 花了390左右</p><p>吃完便和爸爸回去 妈妈和妹妹坐地铁（不知道干嘛去）</p><p>和爸爸到了南山书城地铁站</p><p>他说他要去公司</p><p>我回去收拾 准备14；20到新东方</p><p>口语老师第一眼看到我的时候</p><p>说 哇 你好可爱啊 第一次见这么可爱的学生</p><p>上课期间 老师不停地在鼓励我</p><p>不幸的是我要自习写作业</p><p>写到下午5：40</p><p>回家fleetly</p><p>吃椰子鸡 和多多爸爸一起</p><p>回学校</p><h4 id="2019／12／23-星期一"><a href="#2019／12／23-星期一" class="headerlink" title="2019／12／23 星期一"></a>2019／12／23 星期一</h4><p>体育课 打篮球 和同学一起</p><p>他们的姿势、表情、动作和跑步样子都很搞笑</p><p>下午心理社发了一张亲手写的条子</p><p>很有诚意</p><p>我在思考到底去不去</p><p>因为他们把时间设在了12月24日（圣诞节）的中午12：40到1：30</p><p>我中午是绝对要睡觉的</p><p>晚上8：30提前庆祝圣诞节（很多外教）</p><p>让我记忆犹新的是一位女孩（说不定是可爱的男孩纸呢（因为我看看不出来QAQ））</p><p>应该是一位外教的孩子（因为他／她的英语实在是太好了，身高和语调像一位兼于小学生和初中生之间）</p><p>长得袖袖清风、天真无暇、活泼开朗 我很喜欢</p><p>晚上10：00在宿舍 与Jimmy斗智斗勇（争洗澡）</p><p>但是最后我won了</p><p>他＂伤心欲绝＂无奈之下去其他宿舍洗了</p><p>2333</p><h4 id="2019／12／24-星期二"><a href="#2019／12／24-星期二" class="headerlink" title="2019／12／24 星期二"></a>2019／12／24 星期二</h4><p>中午老师把风扇和空调里面的网取出来了</p><p>让我们洗 但是最终还是让老师动手了</p><p>心理课没去 因为我以为今天是12月23号</p><p>下午吃饭 饭堂打饭的一位小哥哥态度不好 要打两个鸡腿 结果只打了一个 能理解</p><h4 id="2019／12／25-星期三"><a href="#2019／12／25-星期三" class="headerlink" title="2019／12／25 星期三"></a>2019／12／25 星期三</h4><p>刘通托Roy送了圣诞贺卡给我 很开心</p><p>（刘通给我的贺卡很大 给Timmy、Roy、Eric、Jimmy还有Lee都很小</p><p>Merry Christmas</p><p>下午西贝拉我背了两节生物课的生物</p><p>背到想吐辽QAQ</p><p>晚上还不放过我 说要和我一起背地理</p><p>然后魏同学找我换了座位</p><p>我欣喜若狂</p><p>背了一晚上的单词 爽</p><p>但晚上回宿舍的时候 我第一个回来 然后冲凉 Eric Jimmy他们说我抽烟（因为他们闻到了烟味）</p><p>便拍我的门 Eric还把排气扇开了 导致我认为他们这玩笑开的过分了 便大哄（后面才知道Eric是怕我在里面闷才开的）</p><h4 id="2019／12／26-星期四"><a href="#2019／12／26-星期四" class="headerlink" title="2019／12／26 星期四"></a>2019／12／26 星期四</h4><p>早上Jimmy打死了一只蚊子</p><p>中午也打死了一只</p><p>晚上团陪 王一开玩笑说我把一本牛津词典给背完了</p><p>到了班级晚自习时 发现又是Vicky’s妈妈监督 她妈妈向我问了个好 我因为迟到而没有好好地回应 结束后她妈妈带着Vicky’s爸爸来了 他们带了好多吃的（以前的家长也一样 像Jeremy’s妈妈之类的天使家长）</p><p>反正都是十分惊讶、受宠若惊、开心、感谢</p><p>晚上Jimmy在宿舍牢骚了一下他的女朋友Nancy</p><p>看他有点难过 因为Nancy很冷漠</p><h4 id="2019／12／27-星期五"><a href="#2019／12／27-星期五" class="headerlink" title="2019／12／27 星期五"></a>2019／12／27 星期五</h4><p>考完试后，我Mark还有王一起回了家，到家之后本来爸爸是叫我们一起出去吃饭，但是我和陈子悦都选择了吃外卖，所以爸爸只好自己下去吃了</p><p>妈妈回来后带了一些面给陈子悦，我买了两杯奶茶，给了陈子悦一杯，还买了一只炸鸡吃。</p><p>2019&#x2F;12&#x2F;28 星期六</p><p>今天早上10点27分才起来，嘟嘟爸爸把我叫起床，说10点半要去看牙齿，然后我跟爸爸打了个电话才知道是11点，当我到的时候还有人在看牙护士让我再等一会儿。弄完牙套之后回家发现爷爷带着小浩浩后过来了，我打开电脑自己玩了，爷爷回去后，我和妈妈一起看了李子柒的视频，对其赞不绝口。</p><p>下午三点我去新东方做了八分钟的摩拜单车就到了，自己自习到了六点半，叫了个外卖（奶茶和六个墨鱼丸子），才发现我刚弄的牙齿根本就咬不动那个丸子。</p><p>晚上七点半到九点半是听力课，我非常紧张，因为上次听力课的时候听力老师对我的印象就不是很好。我去了下卫生间出来后，发现老师站在一对一教室Vip14的门口（在调空调），我出来走向教室，然后尴尬地站在老师的旁边，老师看到我后跟我说这个教室好臭，我们换一个教室吧，于是我们就到了vip15。老师上来第一句话就是说：“把上次作业拿出来。”由于我上次在一个一对一教室自习，然后忘记把那些资料拿回来了然后当我再次去的时候发现已经不见了，老师说了我一番之后开始上课，上课期间他反复强调我学习态度不好，如果再这样下去，我下次考雅思的分数很有可能比上次考的还要低。总之一节课下来，我的自信心完全被老师打压住了。最后我意识到老师说的是对的。没有用心的努力就是在浪费时间，我要向老师证明我可以，决定从现在开始专专心心学雅思。</p><h4 id="2019／12／29-星期天"><a href="#2019／12／29-星期天" class="headerlink" title="2019／12／29 星期天"></a>2019／12／29 星期天</h4><p>9：33起来了一次（因为不知道几点，看到时间还够便又躺下了）</p><p>11：03 我终于起来了</p><p>刷牙 扒拉了下脸就去新东方了</p><p>自习 打了下卡 发现打不了（因为至少是上课前一个小时打卡） 下午14：20到16：20口语课</p><p>（老师对我期望太大了）</p><p>直接回家 以至于我东西又忘拿了（听力书和笔记本）</p><p>外面下雨 淋着雨回家的</p><p>快走到小区门口的时候多多爸爸叫住我了 拿着一把雨伞🌂</p><p>有点对不起他 因为他又要洗我的脏衣服了</p><p>在家玩了会就快到回学校的时间了</p><p>爸爸和我打了个电话 说外面下雨 他来接我会学校</p><p>说叫我等一会 他快到楼下了</p><p>又说了灰灰在车上要多多爸爸下去带走</p><p>后面挂完电话后 又打了一个</p><p>说外面很堵 还是让我一个人打伞去学校</p><p>当我万事俱备时 发现外面已经不下雨了</p><h4 id="2019／12／30-星期一"><a href="#2019／12／30-星期一" class="headerlink" title="2019／12／30 星期一"></a>2019／12／30 星期一</h4><p>地理老师把我们（龚想、王一、邓睿、姜欣棋、我）几个上去＂骂＂了一顿</p><p>中午去看牙齿</p><p>历史三模考得不好 打算好好复习下</p><p>晚上元旦晚会 马可是highlight</p><p>妈妈来了</p><p>随后很多学校领导来了</p><p>后面经济老师也来了 Jane看到后热情迎接 说是我妈妈 经济老师听到后握着妈妈的手激动地说：</p><p>哦 陈子阳妈妈啊 你们家陈子阳很优秀啊</p><p>我听完后感觉脸上沾满了光 嘻嘻</p><h4 id="2019／12／31-星期二"><a href="#2019／12／31-星期二" class="headerlink" title="2019／12／31 星期二"></a>2019／12／31 星期二</h4><p>5；15就放学了</p><p>马可和王一坐桃园站下</p><p>我一个人回去的</p><p>晚上看了时间的朋友</p><p>妈妈凌晨回来的</p><h4 id="2020／1／1-星期三"><a href="#2020／1／1-星期三" class="headerlink" title="2020／1／1 星期三"></a>2020／1／1 星期三</h4><p>一起来就有满姨浩浩他们的声音</p><p>起来吃饭</p><p>清清姐姐在我们吃饭时来的</p><p>今天没课</p><h4 id="2020／1／2-星期四"><a href="#2020／1／2-星期四" class="headerlink" title="2020／1／2 星期四"></a>2020／1／2 星期四</h4><p>起来的时候已经下午2：35了</p><p>人是懵的</p><p>爸爸妈妈先后打了电话给我</p><p>迟到了半个小时（14：20的课）</p><p>课还是上了两个小时16：50下的课</p><p>自习了一会</p><p>刘通说下午6：00来找我</p><p>我18：30到家</p><p>读圣经的叔叔阿姨们来了</p><p>妈妈说刘通在房间里面</p><p>我和刘通说去书城</p><p>到了发现没有桌子</p><p>我便提议去刘通家</p><p>刘通说他电瓶车在我家楼下</p><p>回去拿车 他载着我回他家了</p><p>我做听力 他看历史</p><p>我渴了 我们出去买水 他请了我</p><p>我饿了 我们出去买吃的 我买了10快钱的炒饭 他买了10块钱的炒米粉</p><p>晚上11：10分才回到家</p><p>凌晨12：40左右的时候灰灰在挠身子在陈子悦门口</p><p>只听见她不耐烦却又无可奈何又有点哭笑不得地打开了门</p><h4 id="2020／1／3-星期五"><a href="#2020／1／3-星期五" class="headerlink" title="2020／1／3 星期五"></a>2020／1／3 星期五</h4><p>返校</p><p>为寒假制定了一个作息表</p><h4 id="2020／1／4-星期六"><a href="#2020／1／4-星期六" class="headerlink" title="2020／1／4 星期六"></a>2020／1／4 星期六</h4><p>历史上次50分以下的在晚上去录播厅</p><p>下午李琼老师和冷晶主任讲话 讲考试的注意事项 结果是讲了一堆废话（捂着手哭笑不得 2333）</p><p>马可和我一起去的录播厅</p><h4 id="2020／1／5-星期天"><a href="#2020／1／5-星期天" class="headerlink" title="2020／1／5 星期天"></a>2020／1／5 星期天</h4><p>历史老师在刚接我们的时候说学业水平考试不会有几个人过</p><p>今天却说我们大概都可以过</p><p>晚上Leo和Jimmy又在闹（Jimmy有手机而Leo没有 Leo就开门、关门……导致Jimmy不敢把手机拿出来）</p><h4 id="2020／1／6-星期一"><a href="#2020／1／6-星期一" class="headerlink" title="2020／1／6 星期一"></a>2020／1／6 星期一</h4><p>早上6：10起来</p><p>6：30吃早饭 7：10上车去第二高级中学考试</p><p>期间刘通说他遇到了杨欣棋和张海鹏（好像是这个名字）</p><h4 id="2020／1／7-星期二"><a href="#2020／1／7-星期二" class="headerlink" title="2020／1／7 星期二"></a>2020／1／7 星期二</h4><p>昨天晚上凌晨3：30才睡</p><p>蚊子太多了</p><p>导致早上困的不行</p><p>下午上AP化学 于伟老师讲了许多去英国的信息</p><p>6：00和马可一起去吃饭（马可用学校的电脑玩了会儿崩坏3）</p><p>打饭的时候又遇到之前态度＂恶劣＂打饭哥哥</p><p>于以往不同的是 马可排在我前面打饭的时候马可说了两声谢谢</p><p>打饭哥哥把最大的炸鸡翅给了他</p><p>我使用相同的方法同样地获得了两只鸡翅</p><p>晚上猜拳 我又赢了（连续第五次）</p><p>先是Jimmy说又是我赢了 我一次都没拖过地 Leo应和了一句 就让陈子阳拖把</p><p>完全不想拖地的我</p><p>明天到底会发生什么呢</p><h4 id="2020／1／8-星期三"><a href="#2020／1／8-星期三" class="headerlink" title="2020／1／8 星期三"></a>2020／1／8 星期三</h4><p>还是我拖的地</p><h4 id="2020／1／9-星期四"><a href="#2020／1／9-星期四" class="headerlink" title="2020／1／9 星期四"></a>2020／1／9 星期四</h4><p>Lee拖的地 猜拳的时候 本来Lee没有输的 但是Lee没看清我出的 Leo便见机起事地说Lee输了</p><p>由于昨天 所以我就没有说话</p><h4 id="2020／1／10-星期五"><a href="#2020／1／10-星期五" class="headerlink" title="2020／1／10 星期五"></a>2020／1／10 星期五</h4><p>早上一早起来收拾行李今天11：30就放学</p><p>农历腊月十六 我生日</p><p>叔叔阿姨们都来了</p><p>满姨还为我买了一份蛋糕</p><p>王智城住我们家 刘通来我们家玩</p><h4 id="2020／1／11-星期六"><a href="#2020／1／11-星期六" class="headerlink" title="2020／1／11 星期六"></a>2020／1／11 星期六</h4><p>放假一天 马可、王一、Eric他们都没来（他们要住我家）</p><h4 id="2020／1／12-星期天"><a href="#2020／1／12-星期天" class="headerlink" title="2020／1／12 星期天"></a>2020／1／12 星期天</h4><p>早上7：40到50起来的</p><p>8：04左右才出发</p><p>不过没有迟到（补课到校时间是8：20）</p><p>大多都是补AP</p><p>下午王一他们收拾行李准备走的时候 我和马可要上AP化学 他们便坐在教室等我们（玩手机）</p><p>于伟老师让我们自习 如果5：10他还没回来就直接让我们走</p><p>期间陈雨佳等人走了</p><p>最后于伟在5：10前回来了</p><h4 id="2020／1／13-星期一"><a href="#2020／1／13-星期一" class="headerlink" title="2020／1／13 星期一"></a>2020／1／13 星期一</h4><p>早上马可拉屎 8：06才走</p><p>买了肠粉</p><p>不过没有关系 Jane考驾照</p><p>在即将上AP微积分的时候吃</p><p>我和马可都被冷晶老师说了QAQ</p><p>不过老师在课上原谅我了（因为我做对了几道难题）</p><p>自习了一下午</p><p>AP化学有人说于伟他们还是要开教师研讨会 不上了</p><p>回家时 又吃了烧烤 看包子挺香的就买了（结果真的挺香的）</p><h4 id="2020／1／14-星期二"><a href="#2020／1／14-星期二" class="headerlink" title="2020／1／14 星期二"></a>2020／1／14 星期二</h4><p>下午放学 于伟（AP化学）老师又把课割了</p><p>我们可以直接回家</p><p>马可和王一还要回我家拿行李 Eric则直接回家</p><p>但马可要等他妈妈</p><p>我和王一一同回去的</p><p>在路上 我们又买了名叫＂半汤包＂的包子</p><p>到家后王一goes：玩儿会 等马可一起走</p><p>不一会儿 马可和Alen一起来到我家</p><p>王一自己走了 马可和Alen留下来玩了会手机</p><h4 id="2020／1／15-星期三"><a href="#2020／1／15-星期三" class="headerlink" title="2020／1／15 星期三"></a>2020／1／15 星期三</h4><p>全天都呆在家里</p><p>妈妈10：11回来的（just now）</p><h4 id="2020／1／16-星期四"><a href="#2020／1／16-星期四" class="headerlink" title="2020／1／16 星期四"></a>2020／1／16 星期四</h4><p> 没记呢</p><h4 id="2020／1／17-星期五"><a href="#2020／1／17-星期五" class="headerlink" title="2020／1／17 星期五"></a>2020／1／17 星期五</h4><p>刘通一早就过来了</p><p>自己自习</p><p>晚上爸爸邀请了他的俄罗斯同事过来 和我们一起说英语</p><p>他进来的时候是一直在打电话</p><p>以为他没有礼貌</p><p>爸爸是他在和家里人打电话</p><p>后面聊天的过程中</p><p>发现他是一位十分健谈的人</p><p>但他的口音让我难以判断他在讲什么</p><h4 id="2020／1／18-星期六"><a href="#2020／1／18-星期六" class="headerlink" title="2020／1／18 星期六"></a>2020／1／18 星期六</h4><p>下午14：20 写作课</p><p>过小年</p><p>张文轩本来晚上过来</p><p>爸爸说我们晚上不会在家</p><p>就和他说今天不过来</p><p>但我在新东方自习 没去满姨家</p><h4 id="2020／1／19-星期天"><a href="#2020／1／19-星期天" class="headerlink" title="2020／1／19 星期天"></a>2020／1／19 星期天</h4><p>张文轩一早就来了</p><p>我学了会AP化学 中午吃了点饭就走了</p><p>下午14：20听力课</p><p>晚上张文轩一直都在找手机的充电器</p><h4 id="2020／1／20-星期一"><a href="#2020／1／20-星期一" class="headerlink" title="2020／1／20 星期一"></a>2020／1／20 星期一</h4><p>实行作息表第一天</p><p>健身房放假从1／17到1／31</p><p>在亿利达大厦吃早餐</p><p>回家路上碰到爸爸</p><p>学习</p><p>刘通下午回英庭上课</p><p>我下午5：20上课（阅读）</p><h4 id="2020／1／21-星期二"><a href="#2020／1／21-星期二" class="headerlink" title="2020／1／21 星期二"></a>2020／1／21 星期二</h4><p>10：40上课（写作）</p><p>张文轩中午走的</p><p>我下午6：40才从新东方出来</p><h4 id="2020／1／22-星期三"><a href="#2020／1／22-星期三" class="headerlink" title="2020／1／22 星期三"></a>2020／1／22 星期三</h4><p>中午在楼下新开的日本料理吃的</p><p>陈子悦闹脾气 不来</p><p>花了一天学AP化学</p><h4 id="2020／1／23-星期四"><a href="#2020／1／23-星期四" class="headerlink" title="2020／1／23 星期四"></a>2020／1／23 星期四</h4><p>又被陈子悦的钢琴声吵醒</p><p>晚上开了个家庭会议</p><p>主要聊过去2019年的总结</p><h4 id="2020／1／24-星期五"><a href="#2020／1／24-星期五" class="headerlink" title="2020／1／24 星期五"></a>2020／1／24 星期五</h4><p>除夕</p><p>中午去满姨家吃饭</p><p>玩王者荣耀with刘qing清、陈子悦和妞妞</p><p>晚上在我们家吃的年夜饭</p><p>睡了几个小时</p><h4 id="2020／1／25-至26／27／28／29／30／31"><a href="#2020／1／25-至26／27／28／29／30／31" class="headerlink" title="2020／1／25 至26／27／28／29／30／31"></a>2020／1／25 至26／27／28／29／30／31</h4><p>为了预防新型冠状病毒</p><p>都在家带着</p><p>30号星期四的时候上了一节阅读课用电脑 新东方自制的app：Classin</p><p>网络极其不好</p><p>后来和老师用微信视频上课</p><h4 id="2020／2／5-星期三"><a href="#2020／2／5-星期三" class="headerlink" title="2020／2／5 星期三"></a>2020／2／5 星期三</h4><p>晚上深夜看到了继月色真美以来再一次看到如此令人心旷神怡的番：俺物语</p><p>并且决定解化爷爷对妈妈单方面的误解 洗白妈妈（以前没怎么想是没把这个当会事，为了让爷爷更好地活在当下 不总担心忧虑 决定明天立即说明）</p><h4 id="2020／2／6-星期四"><a href="#2020／2／6-星期四" class="headerlink" title="2020／2／6 星期四"></a>2020／2／6 星期四</h4><p>到了晚上才和妈妈说的 妈妈把爸爸也叫了过来 后来陈子悦也好奇地到我房间＂看了看＂</p><h4 id="2020／2／7-星期五"><a href="#2020／2／7-星期五" class="headerlink" title="2020／2／7 星期五"></a>2020／2／7 星期五</h4><h4 id="2020／2／16-星期天"><a href="#2020／2／16-星期天" class="headerlink" title="2020／2／16 星期天"></a>2020／2／16 星期天</h4><p>上了阅读的网课</p><p>储备了下SAT</p><p>马老师好像在星期二的时候要跟我模拟测试一下</p><h4 id="2020／2／24-星期一"><a href="#2020／2／24-星期一" class="headerlink" title="2020／2／24 星期一"></a>2020／2／24 星期一</h4><p>今天晚上刷牙的时候看到爸爸刷牙的杯子 突然想起这个浅蓝色的杯子自打我出生就有了</p><p>于是决定给爸爸重新买个杯子</p><p>另外牙刷也要买</p><h4 id="2020／2／29-星期六"><a href="#2020／2／29-星期六" class="headerlink" title="2020／2／29 星期六"></a>2020／2／29 星期六</h4><p>为了录ENG的autobiology</p><p>人生中第一次刮胡子</p><p>因为我看到视频中有胡子的我太丑了 便打电话给妈妈 然后妈妈让我找爸爸</p><p>和爸爸微信视频 本来爸爸说他回去他手把手教我 但我等不及</p><p>刮完后 有点小刮痕 流了一丝丝血</p><p>但还是开心地录完了视频</p><p>录完后发现我审题出了问题</p><h4 id="2020／3／7-星期六"><a href="#2020／3／7-星期六" class="headerlink" title="2020／3／7 星期六"></a>2020／3／7 星期六</h4><p>晚上凌晨（相当于3／8号了）3：35 睡不着觉</p><p>原因：明天上听力课</p><h4 id="2020／3／8-星期天"><a href="#2020／3／8-星期天" class="headerlink" title="2020／3／8 星期天"></a>2020／3／8 星期天</h4><p>听力课 老师对我的态度发生180度大转变</p><p>很开心 她说我这样和她大一水平差不多 她大一考过听力8分 阅读6.5</p><h4 id="2020／3／15-星期天"><a href="#2020／3／15-星期天" class="headerlink" title="2020／3／15 星期天"></a>2020／3／15 星期天</h4><p>下午去人才公园玩了（散步）</p><p>疫情期间 公园人还真不少</p><h4 id="2020／3／16-星期一"><a href="#2020／3／16-星期一" class="headerlink" title="2020／3／16 星期一"></a>2020／3／16 星期一</h4><p>晚上妈妈向我要手机</p><p>说有微信文件在上面</p><p>我就很生气 要么不给我手机 要么给我就不要说只是借给我</p><p>陈子悦和妈妈就合伙说我</p><p>因为我把微信都删掉了</p><p>无知者无畏</p><p>我根本不知道妈妈还要文件在上面</p><p>针对这类事情我早就已经说过</p><p>但我相信她们绝对不会承认</p>]]></content>
    
    
    <categories>
      
      <category>Diary &amp; Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Diary</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
